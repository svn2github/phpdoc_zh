<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- $Author$ -->
<!-- EN-Revision: 283798 Maintainer: haohappy Status: ready -->

<sect1 xml:id="function.include" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title><function>include</function></title>
  <simpara>
   <function>include</function> 语句包含并运行指定文件。
  </simpara>
  <simpara>
   以下文档也适用于
   <function>require</function>。这两种结构除了在如何处理失败之外完全一样。<function>include</function>
   产生一个<link
   linkend="errorfunc.constants.errorlevels.e-warning">警告</link>而 <function>require</function> 则导致一个<link
   linkend="errorfunc.constants.errorlevels.e-error">致命错误</link>。换句话说，如果想在遇到丢失文件时停止处理页面就用
   <function>require</function>。<function>include</function>
   就不是这样，脚本会继续运行。同时也要确认设置了合适的 <link
   linkend="ini.include-path">include_path</link>。注意在
   PHP 4.3.5 之前，包含文件中的语法错误不会导致程序停止，但从此版本之后会。
  </simpara>
  <simpara>
    Files for including are first looked for in each include_path entry
    relative to the current working directory, and then in the directory of
    current script.
    E.g. if your include_path
    is <literal>libraries</literal>, current working directory is <filename class="directory">/www/</filename>,
    you included <filename>include/a.php</filename> and there is <literal>include "b.php"</literal>
    in that file, <filename>b.php</filename> is first looked in <filename class="directory">/www/libraries/</filename>
    and then in <filename class="directory">/www/include/</filename>.
    If filename begins with <literal>./</literal> or <literal>../</literal>, it
    is looked only in the current working directory.
++++   寻找包含文件的顺序先是在当前工作目录的相对的 include_path
   下寻找，然后是当前运行脚本所在目录相对的 include_path 下寻找。例如
   include_path 是 <literal>.</literal>，当前工作目录是
   <filename class="directory">/www/</filename>，脚本中要 include 一个
   <filename>include/a.php</filename> 并且在该文件中有一句
   <literal>include "b.php"</literal>，则寻找
   <filename>b.php</filename> 的顺序先是
   <filename class="directory">/www/</filename>，然后是
   <filename class="directory">/www/include/</filename>。如果文件名以
   <literal>./</literal> 或者 <literal>../</literal> 开始，则只在当前工作目录相对的
   include_path 下寻找。
  </simpara>
  <simpara>
   当一个文件被包含时，其中所包含的代码继承了 include 所在行的<link
   linkend="language.variables.scope">变量范围</link>。从该处开始，调用文件在该行处可用的任何变量在被调用的文件中也都可用。不过所有在包含文件中定义的函数和类都具有全局作用域。
  </simpara>
  <para>
   <example>
    <title>基本的 <function>include</function> 例子</title>
    <programlisting role="php">
<![CDATA[
vars.php
<?php

$color = 'green';
$fruit = 'apple';

?>

test.php
<?php

echo "A $color $fruit"; // A

include 'vars.php';

echo "A $color $fruit"; // A green apple

?>
]]>
    </programlisting>
   </example>
  </para>
  <simpara>
   如果 include 出现于调用文件中的一个函数里，则被调用的文件中所包含的所有代码将表现得如同它们是在该函数内部定义的一样。所以它将遵循该函数的变量范围。
     An exception to this rule are <link
     linkend="language.constants.predefined">magic constants</link> which are
     evaluated by the parser before the include occurs.   
  </simpara>
  <para>
   <example>
   <title>函数中的包含</title>
    <programlisting role="php">
<![CDATA[
<?php

function foo()
{
    global $color;

    include 'vars.php';

    echo "A $color $fruit";
}

/* vars.php is in the scope of foo() so     *
 * $fruit is NOT available outside of this  *
 * scope.  $color is because we declared it *
 * as global.                               */

foo();                    // A green apple
echo "A $color $fruit";   // A green

?>
]]>
    </programlisting>
   </example>
  </para>
  <simpara>
   当一个文件被包含时，语法解析器在目标文件的开头脱离 PHP 模式并进入 HTML
   模式，到文件结尾处恢复。由于此原因，目标文件中应被当作
   PHP 代码执行的任何代码都必须被包括在<link
   linkend="language.basic-syntax.phpmode">有效的 PHP 起始和结束标记</link>之中。
  </simpara>
  <simpara>
   如果“<link linkend="ini.allow-url-fopen">URL fopen wrappers</link>”在
   PHP 中被激活（默认配置），可以用 URL（通过 HTTP
   或者其它支持的封装协议——所支持的协议见<xref linkend="wrappers"/>）而不是本地文件来指定要被包含的文件。如果目标服务器将目标文件作为
   PHP 代码解释，则可以用适用于 HTTP GET 的 URL
   请求字符串来向被包括的文件传递变量。严格的说这和包含一个文件并继承父文件的变量空间并不是一回事；该脚本文件实际上已经在远程服务器上运行了，而本地脚本则包括了其结果。
  </simpara>
  &warn.no-win32-fopen-wrapper;
  <para>
   <example>
    <title>通过 HTTP 进行的 <function>include</function></title>
    <programlisting role="php">
<![CDATA[
<?php

/* This example assumes that www.example.com is configured to parse .php *
 * files and not .txt files. Also, 'Works' here means that the variables *
 * $foo and $bar are available within the included file.                 */

// Won't work; file.txt wasn't handled by www.example.com as PHP
include 'http://www.example.com/file.txt?foo=1&bar=2';

// Won't work; looks for a file named 'file.php?foo=1&bar=2' on the
// local filesystem.
include 'file.php?foo=1&bar=2';

// Works.
include 'http://www.example.com/file.php?foo=1&bar=2';

$foo = 1;
$bar = 2;
include 'file.txt';  // Works.
include 'file.php';  // Works.

?>
]]>
    </programlisting>
   </example>
  </para>
  <warning>
   <title>安全警告</title>
   <para>
    远程文件可能会经远程服务器处理（根据文件后缀以及远程服务器是否在运行
    PHP 而定），但必须产生出一个合法的 PHP
    脚本，因为其将被本地服务器处理。如果来自远程服务器的文件应该在远端运行而只输出结果，那用
    <function>readfile</function>
    函数更好。另外还要格外小心以确保远程的脚本产生出合法并且是所需的代码。
   </para>
  </warning>
  <para>
   相关信息参见<link
   linkend="features.remote-files">使用远程文件</link>，<function>fopen</function>
   和 <function>file</function>。
  </para>
  <simpara>
   处理返回值：可以在被包括的文件中使用 <function>return</function>
   语句来终止该文件中程序的执行并返回调用它的脚本。同样也可以从被包含的文件中返回值。可以像普通函数一样获得
   include 调用的返回值。不过这在包含远程文件时却不行，除非远程文件的输出具有<link
   linkend="language.basic-syntax.phpmode">合法的 PHP
   开始和结束标记</link>（如同任何本地文件一样）。可以在标记内定义所需的变量，该变量在文件被包含的位置之后就可用了。
  </simpara>
  <para>
   因为 <function>include</function> 是一个特殊的语言结构，其参数不需要括号。在比较其返回值时要注意。
   <example>
    <title>比较 include 的返回值</title>
    <programlisting role="php">
<![CDATA[
<?php
// won't work, evaluated as include(('vars.php') == 'OK'), i.e. include('')
if (include('vars.php') == 'OK') {
    echo 'OK';
}

// works
if ((include 'vars.php') == 'OK') {
    echo 'OK';
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>include</function> 和 <function>return</function> 语句</title>
    <programlisting role="php">
<![CDATA[
return.php
<?php

$var = 'PHP';

return $var;

?>

noreturn.php
<?php

$var = 'PHP';

?>

testreturns.php
<?php

$foo = include 'return.php';

echo $foo; // prints 'PHP'

$bar = include 'noreturn.php';

echo $bar; // prints 1

?>
]]>
    </programlisting>
   </example>
  </para>
  <simpara>
   <literal>$bar</literal> 的值为 <literal>1</literal> 是因为 include
   成功运行了。注意以上例子中的区别。第一个在被包含的文件中用了
   <function>return</function> 而另一个没有。如果文件不能被包含，则返回
   &false; 并发出一个 <literal>E_WARNING</literal> 警告。
  </simpara>
  <para>
   如果在包含文件中定义有函数，这些函数可以独立于是否在
   <function>return</function> 之前还是之后在主文件中使用。如果文件被包含两次，PHP
   5 发出致命错误因为函数已经被定义，但是 PHP 在
   <function>return</function> 之后不会抱怨函数已定义。推荐使用
   <function>include_once</function> 而不是检查文件是否已包含并在包含文件中有条件返回。
  </para>
  <simpara>
   另一个将 PHP 文件“包含”到一个变量中的方法是用<link
   linkend="ref.outcontrol">输出控制函数</link>结合
   <function>include</function> 来捕获其输出，例如：
  </simpara>
  <para>
   <example>
    <title>使用输出缓冲来将 PHP 文件包含入一个字符串</title>
    <programlisting role="php">
<![CDATA[
<?php
$string = get_include_contents('somefile.php');

function get_include_contents($filename) {
    if (is_file($filename)) {
        ob_start();
        include $filename;
        $contents = ob_get_contents();
        ob_end_clean();
        return $contents;
    }
    return false;
}

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   要在脚本中自动包含文件，参见 &php.ini; 中的
   <link linkend="ini.auto-prepend-file">auto_prepend_file</link> 和
   <link linkend="ini.auto-append-file">auto_append_file</link>
   配置选项。
  </para>
  &note.language-construct;
  <simpara>
   参见 <function>require</function>，<function>require_once</function>，<function>include_once</function>，<function>get_included_files</function>，<function>readfile</function>，<function>virtual</function> 和 <link linkend="ini.include-path">include_path</link>。
  </simpara>
 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
