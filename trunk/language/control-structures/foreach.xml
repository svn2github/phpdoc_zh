<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- $Author$ -->
<!-- EN-Revision: 288721 Maintainer: haohappy Status: ready -->

<sect1 xml:id="control-structures.foreach" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title><literal>foreach</literal></title>
  <para>
   PHP 4 引入了 <literal>foreach</literal> 结构，和
   Perl 以及其他语言很像。这只是一种遍历数组简便方法。<literal>foreach</literal>
   仅能用于数组，当试图将其用于其它数据类型或者一个未初始化的变量时会产生错误。有两种语法，第二种比较次要但却是第一种的有用的扩展。
   <informalexample>
    <programlisting>
<![CDATA[
foreach (array_expression as $value)
    statement
foreach (array_expression as $key => $value)
    statement
]]>
    </programlisting>
   </informalexample>
  </para>
  <simpara>
   第一种格式遍历给定的 <literal>array_expression</literal>
   数组。每次循环中，当前单元的值被赋给 <literal>$value</literal>
   并且数组内部的指针向前移一步（因此下一次循环中将会得到下一个单元）。
  </simpara>
  <simpara>
   第二种格式做同样的事，只除了当前单元的键名也会在每次循环中被赋给变量
   <literal>$key</literal>。
  </simpara>
  <simpara>
   自PHP 5 起，还可能<link linkend="language.oop5.iterations">遍历对象</link>。
  </simpara>
  <para>
  <note>
   <para>
    当 <literal>foreach</literal>
    开始执行时，数组内部的指针会自动指向第一个单元。这意味着不需要在
    <literal>foreach</literal> 循环之前调用 <function>reset</function>。
   </para>
  </note>
 </para>
 <para>
  <note>
   <para>
    除非数组是被<link linkend="language.references">引用</link>，<literal>foreach</literal>
    所操作的是指定数组的一个拷贝，而不是该数组本身。<literal>foreach</literal>对数组指针有些副作用。除非对其重置，在
    foreach 循环中或循环后都不要依赖数组指针的值。
   </para>
  </note>
 </para>
   <para>
    自 PHP 5 起，可以很容易地通过在 <literal>$value</literal> 之前加上
    &amp; 来修改数组的元素。此方法将以<link
    linkend="language.references">引用</link>赋值而不是拷贝一个值。
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$arr = array(1, 2, 3, 4);
foreach ($arr as &$value) {
    $value = $value * 2;
}
// $arr is now array(2, 4, 6, 8)
?>
]]>
     </programlisting>
     </informalexample>
    此方法仅在被遍历的数组可以被引用时才可用（例如是个变量）。
   <programlisting role="php">
<![CDATA[
<?php
foreach (array(1, 2, 3, 4) as &$value) {
    $value = $value * 2;
}

?>
]]>
   </programlisting>    
   </para>
   <warning>
    <para>
     Reference of a <literal>$value</literal> and the last array element
     remain even after the <literal>foreach</literal> loop. It is recommended
     to destroy it by <function>unset</function>.
    </para>
   </warning>  
  <para>
  <note>
   <para>
    <literal>foreach</literal> 不支持用“@”来抑制错误信息的能力。
   </para>
  </note>
 </para>
  <para>
   用户可能注意到了以下的代码功能完全相同：
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$arr = array("one", "two", "three");
reset($arr);
while (list(, $value) = each($arr)) {
    echo "Value: $value<br>\n";
}

foreach ($arr as $value) {
    echo "Value: $value<br />\n";
}
?>
]]>
    </programlisting>
   </informalexample>
   以下代码功能也完全相同：
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$arr = array("one", "two", "three");
reset($arr);
while (list($key, $value) = each($arr)) {
    echo "Key: $key; Value: $value<br />\n";
}

foreach ($arr as $key => $value) {
    echo "Key: $key; Value: $value<br />\n";
}
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  <para>
   示范用法的更多例子：
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
/* foreach example 1: value only */

$a = array(1, 2, 3, 17);

foreach ($a as $v) {
   echo "Current value of \$a: $v.\n";
}

/* foreach example 2: value (with its manual access notation printed for illustration) */

$a = array(1, 2, 3, 17);

$i = 0; /* for illustrative purposes only */

foreach ($a as $v) {
    echo "\$a[$i] => $v.\n";
    $i++;
}

/* foreach example 3: key and value */

$a = array(
    "one" => 1,
    "two" => 2,
    "three" => 3,
    "seventeen" => 17
);

foreach ($a as $k => $v) {
    echo "\$a[$k] => $v.\n";
}

/* foreach example 4: multi-dimensional arrays */
$a = array();
$a[0][0] = "a";
$a[0][1] = "b";
$a[1][0] = "y";
$a[1][1] = "z";

foreach ($a as $v1) {
    foreach ($v1 as $v2) {
        echo "$v2\n";
    }
}

/* foreach example 5: dynamic arrays */

foreach (array(1, 2, 3, 4, 5) as $v) {
    echo "$v\n";
}
?>
]]>
    </programlisting>
   </informalexample>
  </para>
 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
