<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 324522 Maintainer: HonestQiao Status: ready -->
<!-- Reviewed: no Maintainer: HonestQiao -->
<!-- CREDITS: Gregory, dallas -->
 <chapter xml:id="language.functions" xmlns="http://docbook.org/ns/docbook">
  <title>函数</title>

  <sect1 xml:id="functions.user-defined">
   <title>用户自定义函数</title>

   <para>
    一个函数可由以下的语法来定义：
   </para>
   <para>
    <example>
     <title>展示函数用途的伪代码</title>
     <programlisting role="php">
<![CDATA[
<?php
function foo($arg_1, $arg_2, ..., $arg_n)
{
    echo "Example function.\n";
    return $retval;
}
?>
]]>
     </programlisting>
    </example>
   </para>

   <simpara>
    任何有效的 PHP 代码都有可能出现在函数内部，甚至包括其它函数和<link
    linkend="keyword.class">类</link>定义。
   </simpara>
   <para>
    函数名和 PHP 中的其它标识符命名规则相同。有效的函数名以字母或下划线打头，后面跟字母，数字或下划线。可以用正则表达式表示为：<literal>[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*</literal>。
   </para>
   &tip.userlandnaming;
   <para>
    <emphasis>除非</emphasis>是下面两个例子中的情况，函数必须在其调用之前定义。
   </para>
   <para>
    <example>
     <title>条件函数(Conditional functions)</title>
     <programlisting role="php">
<![CDATA[
<?php

$makefoo = true;

/* 我们不能在处调用foo()函数，
   因为它还不存在，但可以调用bar()函数。*/

bar();

if ($makefoo) {
  function foo()
  {
    echo "I don't exist until program execution reaches me.\n";
  }
}

/* 现在我们可以安全调用函数 foo()了，
   因为 $makefoo 值为真 */

if ($makefoo) foo();

function bar()
{
  echo "I exist immediately upon program start.\n";
}

?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    <example>
     <title>函数中的函数</title>
     <programlisting role="php">
<![CDATA[
<?php
function foo()
{
  function bar()
  {
    echo "I don't exist until foo() is called.\n";
  }
}

/* 现在还不能调用bar()函数，因为它还不存在 */

foo();

/* 现在可以调用bar()函数了，因为foo()函数
   的执行使得bar()函数变为已定义的函数 */

bar();

?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    PHP 中的所有函数和类都具有全局作用域，可以在内部定义外部调用，反之亦然。
   </para>
   <simpara>
    PHP 不支持函数重载，也不可能取消定义或者重定义已声明的函数。
   </simpara>
   <note>
    <simpara>
     函数名是大小写无关的，不过在调用函数的时候，通常使用其在定义时相同的形式。
    </simpara>
   </note>
   <simpara>
    PHP 支持<link linkend="functions.variable-arg-list">可变数量的参数</link>和<link 
    linkend="functions.arguments.default">默认参数</link>。具体请参考：
    <function>func_num_args</function>，<function>func_get_arg</function>，以及<function>func_get_args</function>。
   </simpara>

   <para>
    在 PHP 中可以调用递归函数。但是要避免递归函数／方法调用超过
    100-200 层，因为可能会破坏堆栈从而使当前脚本终止。
    <example>
     <title>递归函数</title>
     <programlisting role="php">
<![CDATA[
<?php
function recursion($a)
{
    if ($a < 20) {
        echo "$a\n";
        recursion($a + 1);
    }
}
?>
]]>
     </programlisting>
    </example>
   </para>
  </sect1>

  <sect1 xml:id="functions.arguments">
   <title>函数的参数</title>

   <simpara>
    通过参数列表可以传递信息到函数，即以逗号作为分隔符的表达式列表。
   </simpara>
   <para>
    PHP 支持按值传递参数（默认），<link
    linkend="functions.arguments.by-reference">通过引用传递参数</link>以及<link
    linkend="functions.arguments.default">默认参数</link>。也支持可变数量的参数；更多信息请参照<link
    linkend="functions.variable-arg-list">可变长度参数列表</link>和涉及到的相关函数
    <function>func_num_args</function>，<function>func_get_arg</function> 以及
    <function>func_get_args</function>。
   </para>
   <para>
    <example>
     <title>向函数传递数组</title>
     <programlisting role="php">
<![CDATA[
<?php
function takes_array($input)
{
    echo "$input[0] + $input[1] = ", $input[0]+$input[1];
}
?>
]]>
     </programlisting>
    </example>
   </para>

   <sect2 xml:id="functions.arguments.by-reference">
    <title>通过引用传递参数</title>

    <simpara>
     缺省情况下，函数参数通过值传递（因而即使在函数内部改变参数的值，它并不会改变函数外部的值）。如果希望允许函数修改它的参数值，必须通过引用传递参数。
    </simpara>
    <para>
     如果想要函数的一个参数总是通过引用传递，可以在函数定义中该参数的前面预先加上符号 &amp;：
    </para>
    <para>
     <example>
      <title>用引用传递函数参数</title>
      <programlisting role="php">
<![CDATA[
<?php
function add_some_extra(&$string)
{
    $string .= 'and something extra.';
}
$str = 'This is a string, ';
add_some_extra($str);
echo $str;    // outputs 'This is a string, and something extra.'
?>
]]>
      </programlisting>
     </example>
    </para>

   </sect2>

   <sect2 xml:id="functions.arguments.default">
    <title>默认参数的值</title>

    <para>
     函数可以定义 C++ 风格的标量参数默认值，如下：
    </para>
    <para>
     <example>
      <title>在函数中使用默认参数</title>
      <programlisting role="php">
<![CDATA[
<?php
function makecoffee($type = "cappuccino")
{
    return "Making a cup of $type.\n";
}
echo makecoffee();
echo makecoffee(null);
echo makecoffee("espresso");
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
Making a cup of cappuccino.
Making a cup of .
Making a cup of espresso.
]]>
      </screen>
     </example>
    </para>

    <para>
     上面代码段的输出是：
    </para>
    <para>
     <screen>
Making a cup of cappuccino.
Making a cup of .
Making a cup of espresso.
     </screen>
    </para>

    <para>
     PHP 还允许使用数组和特殊类型 NULL 作为默认参数，例如：
    </para>
    <para>
     <example>
      <title>使用非标量类型作为默认参数</title>
      <programlisting role="php">
<![CDATA[
<?php
function makecoffee($types = array("cappuccino"), $coffeeMaker = NULL)
{
    $device = is_null($coffeeMaker) ? "hands" : $coffeeMaker;
    return "Making a cup of ".join(", ", $types)." with $device.\n";
}
echo makecoffee();
echo makecoffee(array("cappuccino", "lavazza"), "teapot");
?>
]]>
      </programlisting>
     </example>
    </para>

    <simpara>
     默认值必须是常量表达式，不能是诸如变量，类成员，或者函数调用等表达式。
    </simpara>
    <para>
     请注意当使用默认参数时，任何默认参数必须放在任何非默认参数的右侧；否则，函数将不会按照预期的情况工作。考虑下面的代码片断：
    </para>
    <para>
     <example>
      <title>函数默认参数不正确的用法</title>
      <programlisting role="php">
<![CDATA[
<?php
function makeyogurt($type = "acidophilus", $flavour)
{
    return "Making a bowl of $type $flavour.\n";
}

echo makeyogurt("raspberry");   // won't work as expected
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     上述例子的输出是：
    </para>
    <para>
     <screen>
Warning: Missing argument 2 in call to makeyogurt() in
/usr/local/etc/httpd/htdocs/php3test/functest.html on line 41
Making a bowl of raspberry .
     </screen>
    </para>
    <para>
     现在，比较上面的例子和这个例子：
    </para>
    <para>
     <example>
      <title>函数默认参数正确的用法</title>
      <programlisting role="php">
<![CDATA[
<?php
function makeyogurt($flavour, $type = "acidophilus")
{
    return "Making a bowl of $type $flavour.\n";
}

echo makeyogurt("raspberry");   // works as expected
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     这个例子的输出是：
    </para>
    <para>
     <screen>
Making a bowl of acidophilus raspberry.
     </screen>
    </para>

    <note>
     <simpara>
      自 PHP 5 起，默认值可以通过引用传递。
     </simpara>
    </note>

   </sect2>

   <sect2 xml:id="functions.variable-arg-list">
    <title>可变数量的参数列表</title>

    <simpara>
     PHP 4 及更高版本已经在用户自定义函数中支持可变数量的参数列表。其实很简单，只需使用
     <function>func_num_args</function>，<function>func_get_arg</function>，和
     <function>func_get_args</function> 函数即可。
    </simpara>

    <simpara>
     可变参数并不需要特别的语法，参数列表仍按函数定义的方式传递给函数，并按通常的方式使用这些参数。
    </simpara>

   </sect2>

  </sect1>

  <sect1 xml:id="functions.returning-values">
   <title>返回值</title>

   <para>
    值通过使用可选的返回语句返回。可以返回包括数组和对象的任意类型。返回语句会立即中止函数的运行，并且将控制权交回调用该函数的代码行。更多信息见
    <function>return</function>。
   </para>
   <para>
    <example>
     <title><function>return</function> 的使用</title>
     <programlisting role="php">
<![CDATA[
<?php
function square($num)
{
    return $num * $num;
}
echo square(4);   // outputs '16'.
?>
]]>
     </programlisting>
     </example>
   </para>

   <para>
    函数不能返回多个值，但可以通过返回一个数组来得到类似的效果。
   </para>
   <para>
    <example>
     <title>返回一个数组以得到多个返回值</title>
     <programlisting role="php">
<![CDATA[
<?php
function small_numbers()
{
    return array (0, 1, 2);
}
list ($zero, $one, $two) = small_numbers();
?>
]]>
     </programlisting>
     </example>
   </para>
   <para>
    从函数返回一个引用，必须在函数声明和指派返回值给一个变量时都使用引用操作符 &amp; ：
   </para>
   <para>
    <example>
     <title>从函数返回一个引用</title>
     <programlisting role="php">
<![CDATA[
<?php
function &returns_reference()
{
    return $someref;
}

$newref =& returns_reference();
?>
]]>
     </programlisting>
     </example>
   </para>
   <simpara>
    有关引用的更多信息, 请查看<link
    linkend="language.references">引用的解释</link>。
   </simpara>
  </sect1>

  <sect1 xml:id="functions.variable-functions">
   <title>可变函数</title>

   <para>
    PHP 支持可变函数的概念。这意味着如果一个变量名后有圆括号，PHP
    将寻找与变量的值同名的函数，并且尝试执行它。可变函数可以用来实现包括回调函数，函数表在内的一些用途。
    </para>
   <para>
    变量函数不能用于语言结构，例如
    <function>echo</function>，<function>print</function>，<function>unset</function>，<function>isset</function>，<function>empty</function>，<function>include</function>，<function>require</function>
    以及类似的语句。需要使用自己的包装函数来将这些结构用作变量函数。
   </para>
   <para>
    <example>
     <title>可变函数示例</title>
     <programlisting role="php">
<![CDATA[
<?php
function foo() {
    echo "In foo()<br />\n";
}

function bar($arg = '') {
    echo "In bar(); argument was '$arg'.<br />\n";
}

// 使用 echo 的包装函数
function echoit($string)
{
    echo $string;
}

$func = 'foo';
$func();        // This calls foo()

$func = 'bar';
$func('test');  // This calls bar()

$func = 'echoit';
$func('test');  // This calls echoit()
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    还可以利用可变函数的特性来调用一个对象的方法。
    <example>
     <title>可变方法范例</title>
     <programlisting role="php">
<![CDATA[
<?php
class Foo
{
    function Variable()
    {
        $name = 'Bar';
        $this->$name(); // This calls the Bar() method
    }

    function Bar()
    {
        echo "This is Bar";
    }
}

$foo = new Foo();
$funcname = "Variable";
$foo->$funcname();   // This calls $foo->Variable()

?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    请参阅 <function>call_user_func</function>，<link
    linkend="language.variables.variable">可变变量</link>和
    <function>function_exists</function>。
   </para>

  </sect1>

<sect1 xml:id="functions.internal">
     <title>内部（内置）函数</title>

     <para>
      PHP 有很多标准的函数和结构。还有一些函数需要和特定地 PHP
      扩展模块一起编译，否则在使用它们的时候就会得到一个致命的“未定义函数”错误。例如，要使用<link
      linkend="ref.image">image</link>函数比如
      <function>imagecreatetruecolor</function>，需要在编译 PHP 的时候加上
      <productname>GD</productname> 的支持。或者，要使用
      <function>mysql_connect</function> 函数，就需要在编译 PHP 的时候加上
      <link linkend="ref.mysql">MySQL</link> 支持。有很多核心函数已包含在每个版本的
      PHP 中如<link linkend="ref.strings">字符串</link>和<link
      linkend="ref.var">变量</link>函数。调用
      <function>phpinfo</function> 或者 <function>get_loaded_extensions</function>
      可以得知 PHP 加载了那些扩展库。同时还应该注意，很多扩展库默认就是有效的。PHP
      手册按照不同的扩展库组织了它们的文档。请参阅<link
      linkend="configuration">配置</link>，<link
      linkend="install">安装</link>以及各自的扩展库章节以获取有关如何设置 PHP 的信息。
     </para>
     <para>
      手册中<link
      linkend="about.prototypes">如何阅读函数原型</link>讲解了如何阅读和理解一个函数的原型。确认一个函数将返回什么，或者函数是否直接作用于传递的参数是很重要的。例如，<function>str_replace</function>
      函数将返回修改过的字符串，而 <function>usort</function>
      却直接作用于传递的参数变量本身。手册中，每一个函数的页面中都有关于函数参数、行为改变、成功与否的返回值以及使用条件等信息。了解这些重要的（常常是细微的）差别是编写正确的
      PHP 代码的关键。
     </para>
   <note>
    <simpara>
     如果传递给函数的参数类型与实际的类型不一致，例如将一个<type>array</type>传递给一个<type>string</type>类型的变量，那么函数的返回值是不确定的。在这种情况下，通常函数会返回&null;。但这仅仅是一个约定，并不一定如此。
    </simpara>
   </note>    
     <para>
      参见 <function>function_exists</function>，<link
      linkend="funcref">函数参考</link>，<function>get_extension_funcs</function>
      和 <function>dl</function>。
     </para>
    </sect1>

    <sect1 xml:id="functions.anonymous">
   <title>匿名函数</title>

   <simpara>
    匿名函数（Anonymous functions），也叫闭包函数（<literal>closures</literal>），允许
    临时创建一个没有指定名称的函数。最经常用作回调函数（<link linkend="language.types.callback">callback</link>）的参数。
    当然，也有其他应用的情况。
   </simpara>

   <example>
    <title>Anonymous function 示例</title>
    <programlisting role="php">
<![CDATA[
<?php
echo preg_replace_callback('~-([a-z])~', function ($match) {
    return strtoupper($match[1]);
}, 'hello-world');
// 输出 helloWorld
?>
]]>
    </programlisting>
   </example>

   <simpara>
    闭包函数也可以作为变量的值来使用。PHP会自动把表达式转换成内置类<classname>Closure</classname>的
    对象实例。把一个closure对象赋值给一个变量的方式与普通变量赋值的语法是一样的，最后也要加上分号。
   </simpara>

   <example>
    <title>匿名函数变量赋值示例</title>
    <programlisting role="php">
<![CDATA[
<?php
$greet = function($name)
{
    printf("Hello %s\r\n", $name);
};

$greet('World');
$greet('PHP');
?>
]]>
    </programlisting>
   </example>
   
   <simpara>
    Closure对象也会从父作用域中继承类属性。这些变量都必须在函数或类的头部声明。从父作用域中继承
    变量与使用全局变量是*不同*的。全局变量存在于一个全局的范围，无论当前在执行的是哪个函数。而closure
    的父类作用域则是声明该closure的函数（不一定要是它被调用的函数）。示例如下：
   </simpara>

   <example>
    <title>Closures和作用域</title>
    <programlisting role="php">
<![CDATA[
<?php
// 一个基本的购物车，包括一些已经添加的商品和每种商品的数量。
// 其中有一个方法用来计算购物车中所有商品的总价格。该方法使用了一个closure作为回调函数。
class Cart
{
    const PRICE_BUTTER  = 1.00;
    const PRICE_MILK    = 3.00;
    const PRICE_EGGS    = 6.95;

    protected   $products = array();
    
    public function add($product, $quantity)
    {
        $this->products[$product] = $quantity;
    }
    
    public function getQuantity($product)
    {
        return isset($this->products[$product]) ? $this->products[$product] :
               FALSE;
    }
    
    public function getTotal($tax)
    {
        $total = 0.00;
        
        $callback =
            function ($quantity, $product) use ($tax, &$total)
            {
                $pricePerItem = constant(__CLASS__ . "::PRICE_" .
                    strtoupper($product));
                $total += ($pricePerItem * $quantity) * ($tax + 1.0);
            };
        
        array_walk($this->products, $callback);
        return round($total, 2);;
    }
}

$my_cart = new Cart;

// 往购物车里添加条目
$my_cart->add('butter', 1);
$my_cart->add('milk', 3);
$my_cart->add('eggs', 6);

// 打出出总价格，其中有 5% 的销售税.
print $my_cart->getTotal(0.05) . "\n";
// The result is 54.29
?>
]]>
    </programlisting>
   </example>
   
   <simpara>
    匿名函数目前是通过<link linkend="reserved.classes.closure">
    <classname>Closure</classname></link>类来实现的。目前还不稳定，不适用于正式开发。
   </simpara>
   
   <note>
    <simpara>    
     匿名函数只在PHP 5.3.0 及以上版本有效。
    </simpara>
   </note>

   <note>
    <simpara>
     在closure内部可以调用 <function>func_num_args</function>,
     <function>func_get_arg</function>, 和 <function>func_get_args</function>
     等函数来获取参数信息。
    </simpara>
   </note>

   <sect2 role="changelog">
    &reftitle.changelog;
    <para>
     <informaltable>
      <tgroup cols="2">
       <thead>
        <row>
         <entry>&Version;</entry>
         <entry>&Description;</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>5.4.0</entry>
         <entry>
          <varname>$this</varname> can be used in anonymous functions.
         </entry>
        </row>
        <row>
         <entry>5.3.0</entry>
         <entry>
          Anonymous functions become available.
         </entry>
        </row>
       </tbody>
      </tgroup>
     </informaltable>
    </para>
   </sect2>

   <sect2 role="notes">
    &reftitle.notes;
    <note>
     <simpara>
      It is possible to use <function>func_num_args</function>,
      <function>func_get_arg</function>, and <function>func_get_args</function>
      from within a closure.
     </simpara>
    </note>
   </sect2>

  </sect1>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
