<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 288503 $ -->
 <sect1 xml:id="language.oop5.properties" xmlns="http://docbook.org/ns/docbook">
  <title>属性</title>

  <para>
   类的变量成员叫做“属性”，或者叫“字段”、“特征”，在本文档统一称为“属性”。
   属性声明是由关键字<literal>public</literal>或者<literal>protected</literal>或者
   <literal>private</literal>开头，然后跟一个变量来组成。
   属性中的变量可以初始化，但是初始化的值必须是常数，这里的常数是指php脚本在编译阶段时就为常数，而不是在编译阶段之后在运行阶段运算出的常数。
  </para>
  <para>
   有关<literal>public</literal>, <literal>protected</literal>,
   和 <literal>private</literal>的更多详细信息，请查看<xref linkend="language.oop5.visibility" />。
  </para>
  <note>
   <para>
    为了兼容php4，php5声明属性依然可以直接使用关键字<literal>var</literal>，或者放在<literal>public</literal>, <literal>protected</literal>,
    or <literal>private</literal>之前。但是<literal>var</literal>并不是必须的。在php 5.0 到5.1.3，<literal>var</literal>会认为是废弃的，
    而且抛出<constant>E_STRICT</constant>警告，但是5.1.3之后就不再认为是废弃，也不会抛出警告。
   </para>
   <para>
    如果直接使用<literal>var</literal>声明属性，而没有<literal>public</literal>, <literal>protected</literal>,
    或 <literal>private</literal>，php 5 会认为这个属性为<literal>public</literal>。
   </para>
  </note>
  <para>
   在类的成员方法里面，可以通过<varname>$this-&gt;property</varname>(<literal>property</literal>是属性名字)这种方式来访问类的属性、
   方法，但是要访问类的静态属性或者在静态方法里面却不能使用，而是使用<varname>self::$property</varname>。
   更多Static关键字，请查看<link linkend="language.oop5.static">Static 关键字</link>。
  </para>
  <para>
   在类的非静态方法里面可以使用伪变量<varname>$this</varname>，这个伪变量是调用该方法的实例化对象引用（一般来说该对象是这个方法所在类的实例化对象，
   但是也有可能是另外的类的对象，比如在另一个类里面使用<link linkend="language.oop5.static">静态化</link>来调用这个类的方法 ）。
  </para>

  <para>
   <example>
    <title>属性声明</title>
    <programlisting role="php">
<![CDATA[
<?php
class SimpleClass
{
   // 错误的属性声明
   public $var1 = 'hello ' . 'world';
   public $var2 = <<<EOD
hello world
EOD;
   public $var3 = 1+2;
   public $var4 = self::myStaticMethod();
   public $var5 = $myVar;

   // 正确的属性声明
   public $var6 = myConstant;
   public $var7 = array(true, false);

   //在php 5.3.0 及之后，下面的声明也正确
   public $var8 = <<<'EOD'
hello world
EOD;
}
?>
]]>
    </programlisting>   
   </example>
  </para>

  <note>
   <para>
    更多关于类/对象的处理函数，请查看<link linkend="ref.classobj">类/对象 函数</link>。
   </para>
  </note>

  <para>
   跟<link linkend="language.types.string.syntax.heredoc">heredocs</link>不同, 
   <link linkend="language.types.string.syntax.nowdoc">nowdocs</link>能够使用在静态变量，也能使用在静态声明。
   <example>
    <title>示例：使用nowdoc初始化属性</title>
    <programlisting role="php">
<![CDATA[
<?php
class foo {
   // As of PHP 5.3.0
   public $bar = <<<'EOT'
bar
EOT;
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <note>
   <para>
    在php 5.3.0 增加了Nowdoc的支持。
   </para>
  </note>
 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
