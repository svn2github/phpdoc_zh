<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- $Author$ -->
<!-- EN-Revision: n/a Maintainer: Haohappy Status: ready -->
 <sect1 xml:id="language.oop5.magic" xmlns="http://docbook.org/ns/docbook">
  <title>魔术方法</title>
  <para>
    <literal>__construct</literal>,
   <literal>__destruct</literal>
   (参看 <link linkend="language.oop5.decon">构造方法和析构方法</link>),
   <literal>__call</literal>,
   <literal>__callStatic</literal>,
   <literal>__get</literal>,
   <literal>__set</literal>,
   <literal>__isset</literal>,
   <literal>__unset</literal>   
   (参看 <link linkend="language.oop5.overloading">重载</link>),
   <literal>__sleep</literal>,
   <literal>__wakeup</literal>,
   <literal>__toString</literal>,
   <literal>__set_state</literal> 和
   <link linkend="language.oop5.cloning">__clone</link>   
   等方法在PHP中被称为“魔术方法”（Magic methods）。 你在命名自己的类方法时不能使用这些方法名。
  </para>

  <caution>
   <simpara>
    PHP把所有以__（两个下划线）开头的类方法当成魔术方法。所以你定义自己的类方法时，不要以
	__为前缀。
   </simpara>
  </caution>
 
  <sect2 xml:id="language.oop5.magic.sleep">
   <title><literal>__sleep</literal> 和 <literal>__wakeup</literal></title>
   <para>
	<function>serialize</function> 函数会检查是否存在一个魔术方法 <literal>__sleep</literal>.如果存在，__sleep()方法会先被调用，
	然后才执行序列化操作。这个功能可以用于清理对象，并返回一个包含对象中所有变量名称的数组。如果该方法不返回任何内容，则&null;被序列化，导致
	一个E_NOTICE错误。
    </para>
   <para>
  <literal>__sleep</literal>方法常用于提交未提交的数据，或类似的操作。同时，如果你有一些很大的对象，
不需要保存，这个功能就很好用。

   </para>
   <para>
   	与之相反，<function>unserialize</function>会检查是否存在一个<literal>__wakeup</literal>方法。如果存在，则会先调用
<literal>__wakeup</literal>方法，预先准备对象数据。
   </para>
   <para>
   	<literal>__wakeup</literal>经常用在反序列化操作中，例如重新建立数据库连接，或执行其它初始化操作。
   </para>
   <example>
    <title>Sleep 和 wakeup</title>
    <programlisting role="php">
<![CDATA[
<?php
class Connection {
    protected $link;
    private $server, $username, $password, $db;
    
    public function __construct($server, $username, $password, $db)
    {
        $this->server = $server;
        $this->username = $username;
        $this->password = $password;
        $this->db = $db;
        $this->connect();
    }
    
    private function connect()
    {
        $this->link = mysql_connect($this->server, $this->username, $this->password);
        mysql_select_db($this->db, $this->link);
    }
    
    public function __sleep()
    {
        return array('server', 'username', 'password', 'db');
    }
    
    public function __wakeup()
    {
        $this->connect();
    }
}
?>
]]>
    </programlisting>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.magic.tostring">
   <title><literal>__toString</literal></title>
   <para>
    The <literal>__toString</literal> method allows a class to decide
    how it will react when it is converted to a string.

	 <literal>__toString</literal> 方法可以让一个类决定它如何转换成一个字符串。
   </para>
   <example>
    <title>简单示例</title>
    <programlisting role="php">
<![CDATA[
<?php
// Declare a simple class
class TestClass
{
    public $foo;

    public function __construct($foo) {
        $this->foo = $foo;
    }

    public function __toString() {
        return $this->foo;
    }
}

$class = new TestClass('Hello');
echo $class;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Hello
]]>
    </screen>
   </example>
   <para>
   在PHP 5.2.0之前，<literal>__toString</literal>方法只有结合使用<function>echo</function> 或 <function>print</function>时
才能生效。PHP 5.2.0之后，则可以在任何字符串环境生效（例如通过<function>printf</function>，使用<literal>%s</literal>修饰符），但
不能用于非字符串环境（如使用<literal>%d</literal>修饰符）。从PHP 5.2.0，如果将一个未定义<literal>__toString</literal>方法的对象
转换为字符串，会报出一个<constant>E_RECOVERABLE_ERROR</constant>错误。

   </para>
  </sect2>

  <sect2 xml:id="language.oop5.magic.invoke">
   <title><literal>__invoke</literal></title>
   <para>
     当尝试以调用函数的方式调用一个对象时，<literal>__invoke</literal> 方法会被自动调用。
   </para>
   <note>
    <para>     
	 本特性只在PHP 5.3.0 及以上版本有效。
    </para>
   </note>
   <example>
    <title>Using <literal>__invoke</literal></title>
    <programlisting role="php">
<![CDATA[
<?php
class CallableClass {
	function __invoke($x) {
		var_dump($x);
	}
}
$obj = new CallableClass;
$obj(5);
var_dump(is_callable($obj));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
int(5)
bool(true)
]]>
    </screen>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.magic.set-state">
   <title><literal>__set_state</literal></title>
   <para>
    当调用<function>var_export</function>时，这个<link linkend="language.oop5.static">静态</link> 方法会被调用（自PHP 5.1.0起有效）。
   </para>
   <para>
    本方法的唯一参数是一个数组，其中包含按<literal>array('property' => value, ...)</literal>格式排列的类属性。
   </para>
   <example>
    <title>Using <literal>__set_state</literal> (PHP 5.1.0及更高版本支持)</title>
    <programlisting role="php">
<![CDATA[
<?php

class A
{
    public $var1;
    public $var2;

    public static function __set_state($an_array) // As of PHP 5.1.0
    {
        $obj = new A;
        $obj->var1 = $an_array['var1'];
        $obj->var2 = $an_array['var2'];
        return $obj;
    }
}

$a = new A;
$a->var1 = 5;
$a->var2 = 'foo';

eval('$b = ' . var_export($a, true) . ';'); // $b = A::__set_state(array(
                                            //    'var1' => 5,
                                            //    'var2' => 'foo',
                                            // ));
var_dump($b);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(A)#2 (2) {
  ["var1"]=>
  int(5)
  ["var2"]=>
  string(3) "foo"
}
]]>
    </screen>
   </example>
  </sect2>
 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
