<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 328079 Maintainer: daijie Status: ready -->
<!-- Reviewed: no -->

 <sect1 xml:id="language.oop5.traits" xmlns="http://docbook.org/ns/docbook">
  <title>Traits</title>
  <para>
   自 PHP 5.4.0 起，PHP 实现了代码复用的一个方法，称为 Traits。
  </para>
  <para>
   Traits 是一种为类似 PHP 的单继承语言而准备的代码复用机制。
   Trait 为了减少单继承语言的限制，使开发人员能够自由地在不同层次结构内独立的类中复用方法集。
   Traits 和类组合的语义是定义了一种方式来减少复杂性，避免传统多继承和 Mixin 相关的典型问题。
  </para>
  <para>
   Trait 和一个类相似，但仅仅旨在用细粒度和一致的方式来组合功能。
   Trait 不能通过它自身来实例化。它为传统继承增加了水平特性的组合；也就是说，应用类的成员不需要继承。
  </para>
  
  <example xml:id="language.oop5.traits.basicexample">
    <title>Trait 例子</title>
    <programlisting role="php">
<![CDATA[
<?php
trait ezcReflectionReturnInfo {
    function getReturnType() { /*1*/ }
    function getReturnDescription() { /*2*/ }
}

class ezcReflectionMethod extends ReflectionMethod {
    use ezcReflectionReturnInfo;
    /* ... */
}

class ezcReflectionFunction extends ReflectionFunction {
    use ezcReflectionReturnInfo;
    /* ... */
}
?>
]]>
    </programlisting>
   </example>
  
  <sect2 xml:id="language.oop5.traits.precedence">
   <title>优先级</title>
   <para>
    从基类继承的成员被插入的 Trait 成员所覆盖。
    优先顺序是来自当前类的成员覆盖了 Trait 的方法，会重写继承的方法。
   </para>
   <example xml:id="language.oop5.traits.precedence.examples.ex1">
    <title>优先顺序例子</title>
    <para>
     从基类继承的成员被插入的 SayWorld Trait 中 MyHelloWorld 方法所覆盖。
     这个特征和 MyHelloWorld 定义的方法一致。
     优先顺序是当前类中的方法会覆盖 Trait 方法，而它覆盖了基类中的方法。
    </para>
    <programlisting role="php">
<![CDATA[
<?php
class Base {
    public function sayHello() {
        echo 'Hello ';
    }
}

trait SayWorld {
    public function sayHello() {
        parent::sayHello();
        echo 'World!';
    }
}

class MyHelloWorld extends Base {
    use SayWorld;
}

$o = new MyHelloWorld();
$o->sayHello();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Hello World!
]]>
    </screen>
   </example>
   <example xml:id="language.oop5.traits.precedence.examples.ex2">
    <title>另一个优先级顺序的例子</title>
    <programlisting role="php">
<![CDATA[
<?php
trait HelloWorld {
    public function sayHello() {
        echo 'Hello World!';
    }
}

class TheWorldIsNotEnough {
    use HelloWorld;
    public function sayHello() {
        echo 'Hello Universe!';
    }
}

$o = new TheWorldIsNotEnough();
$o->sayHello();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Hello Universe!
]]>
    </screen>
   </example>
  </sect2>
  
  <sect2 xml:id="language.oop5.traits.multiple">
   <title>多个 Traits</title>
   <para>
    通过逗号分隔，在 use 声明列出多个 Traits，可以都插入到一个类中。
   </para>
   <example xml:id="language.oop5.traits.multiple.ex1">
    <title>多个 Traits 的用法</title>
    <programlisting role="php">
<![CDATA[
<?php
trait Hello {
    public function sayHello() {
        echo 'Hello ';
    }
}

trait World {
    public function sayWorld() {
        echo 'World';
    }
}

class MyHelloWorld {
    use Hello, World;
    public function sayExclamationMark() {
        echo '!';
    }
}

$o = new MyHelloWorld();
$o->sayHello();
$o->sayWorld();
$o->sayExclamationMark();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Hello World!
]]>
    </screen>
   </example>
  </sect2>
  
  <sect2 xml:id="language.oop5.traits.conflict">
   <title>冲突的解决</title>
   <para>
    两个 Traits 以同样的名称插入到同一个方法中，如果没有明确解决冲突将会产生一个致命错误。
   </para>
   <para>
    为了解决两个 Traits 在同一个类中的命名冲突，需要使用 <literal>insteadof</literal> 操作符来明确指定冲突方法中的一个。
   </para>
   <para>
    由于这仅允许排除一个方法，<literal>as</literal> 操作符可以将冲突的方法以另一个名称来引入。
   </para>
   <example xml:id="language.oop5.traits.conflict.ex1">
    <title>冲突的解决</title>
    <para>
      在这个例子中。Talker 使用了 traits A 和 B。
      由于 A 和 B 有冲突的方法，它从 trait B 中定义使用 smallTalk，并且从 trait A 中定义使用 bigTalk。
    </para>
    <para>
     Aliased_Talker 使用了 <literal>as</literal> 操作符来定义了别名 <literal>talk</literal>，使得能够使用 B 的 bigTalk 实现。
    </para> 
    <programlisting role="php">
<![CDATA[
<?php
trait A {
    public function smallTalk() {
        echo 'a';
    }
    public function bigTalk() {
        echo 'A';
    }
}

trait B {
    public function smallTalk() {
        echo 'b';
    }
    public function bigTalk() {
        echo 'B';
    }
}

class Talker {
    use A, B {
        B::smallTalk insteadof A;
        A::bigTalk insteadof B;
    }
}

class Aliased_Talker {
    use A, B {
        B::smallTalk insteadof A;
        A::bigTalk insteadof B;
        B::bigTalk as talk;
    }
}
?>
]]>
    </programlisting>
   </example>
  </sect2>
  
  <sect2 xml:id="language.oop5.traits.visibility">
   <title>修改方法的可见性</title>
   <para>
    使用的类可以通过 <literal>as</literal> 语法来调整方法的可见性。
   </para>
   <example xml:id="language.oop5.traits.visibility.ex1">
    <title>修改方法的可见性</title>
    <programlisting role="php">
<![CDATA[
<?php
trait HelloWorld {
    public function sayHello() {
        echo 'Hello World!';
    }
}

// 修改 sayHello 的可见性
class MyClass1 {
    use HelloWorld { sayHello as protected; }
}

// 修改了可见性的方法别名
// sayHello 的可见性则没有发生变化
class MyClass2 {
    use HelloWorld { sayHello as private myPrivateHello; }
}
?>
]]>
    </programlisting>
   </example>
  </sect2>
  
  <sect2 xml:id="language.oop5.traits.composition">
   <title>从 traits 来组成 traits</title>
   <para>
    其他 traits 也能够使用 traits，正如类能够使用 traits。
    在 trait 定义时通过使用一个或多个 trait，它能够组合其他 traits 中的部分或全部成员。
   </para>
   <example xml:id="language.oop5.traits.composition.ex1">
    <title>从 traits 来组成 traits</title>
    <programlisting role="php">
<![CDATA[
<?php
trait Hello {
    public function sayHello() {
        echo 'Hello ';
    }
}

trait World {
    public function sayWorld() {
        echo 'World!';
    }
}

trait HelloWorld {
    use Hello, World;
}

class MyHelloWorld {
    use HelloWorld;
}

$o = new MyHelloWorld();
$o->sayHello();
$o->sayWorld();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Hello World!
]]>
    </screen>
   </example>
  </sect2>
  
  <sect2 xml:id="language.oop5.traits.abstract">
   <title>Trait 的抽象成员</title>
   <para>
    为了对使用的类施加强制要求，Trait 支持抽象方法的使用。
   </para>
   <example xml:id="language.oop5.traits.abstract.ex1">
    <title>表示通过抽象方法来进行强制要求</title>
    <programlisting role="php">
<![CDATA[
<?php
trait Hello {
    public function sayHelloWorld() {
        echo 'Hello'.$this->getWorld();
    }
    abstract public function getWorld();
}

class MyHelloWorld {
    private $world;
    use Hello;
    public function getWorld() {
        return $this->world;
    }
    public function setWorld($val) {
        $this->world = $val;
    }
}
?>
]]>
    </programlisting>
   </example>
  </sect2>
  
  <sect2 xml:id="language.oop5.traits.static">
   <title>Trait 的静态成员</title>
   <para>
    静态变量可以被 trait 的方法引用，但不能被 trait 定义。但是 traits 能够为使用的类定义静态方法。
   </para>
   <example xml:id="language.oop5.traits.static.ex1">
    <title>静态变量</title>
    <programlisting role="php">
<![CDATA[
<?php
trait Counter {
    public function inc() {
        static $c = 0;
        $c = $c + 1;
        echo "$c\n";
    }
}

class C1 {
    use Counter;
}

class C2 {
    use Counter;
}

$o = new C1(); $o->inc(); // echo 1
$p = new C2(); $p->inc(); // echo 1
?>
]]>
    </programlisting>
   </example>
   <example xml:id="language.oop5.traits.static.ex2">
    <title>静态方法</title>
    <programlisting role="php">
<![CDATA[
<?php
trait StaticExample {
    public static function doSomething() {
        return 'Doing something';
    }
}

class Example {
    use StaticExample;
}

Example::doSomething();
?>
]]>
    </programlisting>
   </example>
  </sect2>
  
  <sect2 xml:id="language.oop5.traits.properties">
   <title>属性</title>
   <para>
    Traits 同样可以定义属性。
   </para>
   <example xml:id="language.oop5.traits.properties.example">
    <title>定义属性</title>
    <programlisting role="php">
<![CDATA[
<?php
trait PropertiesTrait {
    public $x = 1;
}

class PropertiesExample {
    use PropertiesTrait;
}

$example = new PropertiesExample;
$example->x;
?>
]]>
    </programlisting>
   </example>
   <para>
    如果 trait 定义了一个属性，那类将不能定义同样名称的属性，否则会产生一个错误。
    如果类的定义是兼容的（同样的可见性和初始值）则错误的级别是 <constant>E_STRICT</constant>，否则是一个致命错误。
   </para>
   <example xml:id="language.oop5.traits.properties.conflicts">
    <title>解决冲突</title>
    <programlisting role="php">
<![CDATA[
<?php
trait PropertiesTrait {
    public $same = true;
    public $different = false;
}

class PropertiesExample {
    use PropertiesTrait;
    public $same = true; // Strict Standards
    public $different = true; // 致命错误
}
?>
]]>
    </programlisting>
   </example>
  </sect2>

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
