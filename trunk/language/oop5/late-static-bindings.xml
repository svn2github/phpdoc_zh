<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
 <sect1 xml:id="language.oop5.late-static-bindings" xmlns="http://docbook.org/ns/docbook">
  <title>Late Static Bindings（后期静态绑定）</title>
  <para>
   从PHP 5.3.0开始，PHP增加了一个叫做后期静态绑定的功能，用于在继承范围内引用静态调用的类。
  </para>

  <para>
   该功能从语言内部角度考虑被命名为”后期静态绑定“。”后期绑定“的意思是说，<literal>static::</literal>不再被解析为定义当前方法所在的类，而是在实际运行时计算的。也可以称之为”静态绑定“，因为它可以用于（但不限于）静态方法的调用。
  </para>

  <sect2 xml:id="language.oop5.late-static-bindings.self">
   <title><literal>self::</literal> 的限制</title>
   <para>
    使用<literal>self::</literal> 或者
    <literal>__CLASS__</literal>对当前类的静态引用，取决于定义当前方法所在的类：
   </para>
   <example>
    <title><literal>self::</literal> 用法</title>
    <programlisting role="php">
<![CDATA[
<?php
class A {
    public static function who() {
        echo __CLASS__;
    }
    public static function test() {
        self::who();
    }
}

class B extends A {
    public static function who() {
        echo __CLASS__;
    }
}

B::test();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
A
]]>
    </screen>
   </example>

  </sect2>

  <sect2 xml:id="language.oop5.late-static-bindings.usage">
   <title>后期静态绑定的用法</title>

   <para>
    后期静态绑定试图通过引入一个关键字表示运行时最初调用的类来绕过限制。简单地说，这个关键字能够让你在上述例子中调用<literal>test()</literal>时引用的类是<literal>B</literal>而不是<literal>A</literal>。最终决定不引入新的关键字，而是使用已经预留的<literal>static</literal>关键字。
   </para>

   <example>
    <title><literal>static::</literal> 简单用法</title>
    <programlisting role="php">
<![CDATA[
<?php
class A {
    public static function who() {
        echo __CLASS__;
    }
    public static function test() {
        static::who(); // 后期静态绑定从这里开始
    }
}

class B extends A {
    public static function who() {
        echo __CLASS__;
    }
}

B::test();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
B
]]>
    </screen>
   </example>
   <note>
    <para>
     <literal>static::</literal> 在处理静态方法时与 <literal>$this</literal> 是不同的。 <literal>$this-></literal> 会遵循继承规则，但是 <literal>static::</literal> 不会。该差异将稍后在本手册中详细说明。
    </para>
   </note>
   <example>
    <title><literal>static::</literal> 用于非静态引用</title>
    <programlisting role="php">
<![CDATA[
<?php
class TestChild extends TestParent {
    public function __construct() {
        static::who();
    }

    public function test() {
        $o = new TestParent();
    }

    public static function who() {
        echo __CLASS__."\n";
    }
}

class TestParent {
    public function __construct() {
        static::who();
    }

    public static function who() {
        echo __CLASS__."\n";
    }
}
$o = new TestChild;
$o->test();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
TestChild
TestParent
]]>
    </screen>
   </example>
   <note>
    <para>
后期静态绑定的处理方式解决了以往完全没有办法解决的静态调用。另外一方面，如果静态调用使用
     <literal>parent::</literal> 或者 <literal>self::</literal> 将转发调用信息。
    </para>
    <example>
     <title>转发和非转发调用</title>
     <programlisting role="php">
<![CDATA[
<?php
class A {
    public static function foo() {
        static::who();
    }

    public static function who() {
        echo __CLASS__."\n";
    }
}

class B extends A {
    public static function test() {
        A::foo();
        parent::foo();
        self::foo();
    }

    public static function who() {
        echo __CLASS__."\n";
    }
}
class C extends B {
    public static function who() {
        echo __CLASS__."\n";
    }
}

C::test();
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
A
C
C
]]>
     </screen>
    </example>
   </note>
  </sect2>
  <sect2 xml:id="language.oop5.late-static-bindings.edge-cases">
   <title>特殊情况</title>
   <para>
    在PHP中有很多方式来触发一个方法的调用，例如回调函数或者魔术方法。因为后期静态绑定取决于运行时的信息，因此在特殊情况下可能会得到意想不到的结果。
   </para>
   <example>
    <title>在魔术方法中使用后期静态绑定</title>
    <programlisting role="php">
<![CDATA[
<?php
class A {

   protected static function who() {
        echo __CLASS__."\n";
   }

   public function __get($var) {
       return static::who();
   }
}

class B extends A {

   protected static function who() {
        echo __CLASS__."\n";
   }
}

$b = new B;
$b->foo;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
B
]]>
    </screen>
   </example>
  </sect2>
 </sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
