<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.3 $ -->
<!-- $Author: lm92 $ -->
<!-- EN-Revision: 1.7 Maintainer: lm92 Status: ready -->
 <sect1 id="language.oop5.paamayim-nekudotayim">
  <title>范围解析操作符（::）</title>

  <para>
   范围解析操作符（也可称作 Paamayim Nekudotayim）或者更简单地说是一对冒号，可以用于访问<link
   linkend="language.oop5.static">静态</link>成员、方法和<link
   linkend="language.oop5.constants">常量</link>，还可以用于重写类中的成员和方法。
  </para>

  <para>
   当在类的外部访问这些静态成员、方法和常量时，必须使用类的名字。
  </para>

  <para>
   把 Paamayim Nekudotayim 选作该操作符的名字似乎有些奇怪。然而，这是 Zend
   开发小组在写 Zend Engine 0.5 （被用于 PHP 3
   中）时所作出的决定。事实上这个词在希伯莱文就是双冒号的意思。
  </para>

  <example>
   <title>在类的外部使用 :: 操作符</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyClass {
    const CONST_VALUE = 'A constant value';
}

echo MyClass::CONST_VALUE;
?>
]]>
   </programlisting>
  </example>

  <para>
   <varname>self</varname> 和 <varname>parent</varname>
   这两个特殊的关键字是用于在类的内部对成员或方法进行访问的。
  </para>

  <example>
   <title>:: from inside the class definition</title>
   <programlisting role="php">
<![CDATA[
<?php
class OtherClass extends MyClass
{
    public static $my_static = 'static var';

    public static function doubleColon() {
        echo parent::CONST_VALUE . "\n";
        echo self::$my_static . "\n";
    }
}

OtherClass::doubleColon();
?>
]]>
   </programlisting>
  </example>

  <para>
   When an extending class overrides the parents definition of a method,
   PHP will not call the parent's method. It's up to the extended class
   on whether or not the parent's method is called. This also applies to <link
   linkend="language.oop5.decon">Constructors and Destructors</link>, <link
   linkend="language.oop5.overloading">Overloading</link>, and <link
   linkend="language.oop5.magic">Magic</link> method definitions.
  </para>

  <example>
   <title>Calling a parent's method</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
    protected function myFunc() {
        echo "MyClass::myFunc()\n";
    }
}

class OtherClass extends MyClass
{
    // Override parent's definition
    public function myFunc()
    {
        // But still call the parent function
        parent::myFunc();
        echo "OtherClass::myFunc()\n";
    }
}

$class = new OtherClass();
$class->myFunc();
?>
]]>
   </programlisting>
  </example>

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

