<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.5 $ -->
<!-- $Author: haohappy $ -->
<!-- EN-Revision: 1.32 Maintainer: haohappy Status: ready -->
 <sect1 xml:id="language.oop5.overloading" xmlns="http://docbook.org/ns/docbook">
  <title>重载</title>

  <para>
   PHP所提供的<quote>重载</quote>（overloading）是指动态地<quote>创建</quote>类属性和方法。我们是通过
   魔术方法（magic methods）来实现的。
  </para>

  <para>
   当调用当前环境下未定义或不可见的类属性或方法时，重载方法会被调用。本节后面将使用
   <quote>不可访问成员（inaccessible members）</quote>和<quote>不可访问方法（inaccessible
   methods）</quote>来称呼这些未定义或不可见的类属性或方法。
  </para>

  <para>
   所有的重载方法都必须被声明为<literal>public</literal>。
  </para>

  <note>
   <para>
  	这些魔术方法的参数都不能 <link linkend="functions.arguments.by-reference">通过引用传递</link>。
   </para>
  </note>

  <note>
   <para>
 	PHP中的<quote>重载</quote>与其它绝大多数面向对象语言不同。传统的<quote>重载</quote>是用于提供多个同名的
	类方法，但各方法的参数类型和个数不同。
   </para>
  </note>


  <sect2 xml:id="language.oop5.overloading.changelog">
   &reftitle.changelog;
   <para>
    <informaltable>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>&Version;</entry>
        <entry>&Description;</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>5.1.0</entry>
        <entry>
         新增 <literal>__isset()</literal> 和 <literal>__unset()</literal>两个魔术方法.
        </entry>
       </row>
       <row>
        <entry>5.3.0</entry>
        <entry>
         新增 <literal>__callStatic()</literal>魔术方法.
         可见性未设置为public或未声明为static的时候会产生一个警告
        </entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
   </para>
  </sect2>


  <sect2 xml:id="language.oop5.overloading.members">
   <title>属性重载</title>

   <methodsynopsis>
    <type>void</type><methodname>__set</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
    <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
   </methodsynopsis>
   <methodsynopsis>
    <type>mixed</type><methodname>__get</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
   </methodsynopsis>
   <methodsynopsis>
    <type>bool</type><methodname>__isset</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
   </methodsynopsis>
   <methodsynopsis>
    <type>void</type><methodname>__unset</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
   </methodsynopsis>

   <para>
    在给未定义的变量赋值时，<literal>__set()</literal> 会被调用。
   </para>

   <para>
   读取未定义的变量的值时，<literal>__get()</literal> 会被调用。
   </para>

   <para>    	
	当对未定义的变量调用<function>isset</function> 或 <function>empty</function>时，<literal>__isset()</literal> 
	会被调用。
   </para>

   <para>
    当对未定义的变量调用<function>unset</function>时，<literal>__unset()</literal> 
	会被调用。
   </para>

   <para>
    The <varname>$name</varname> argument is the name of the
    member being interacted with. The <literal>__set()</literal>
    method's <varname>$value</varname> argument specifies the
    value the <varname>$name</varname>'ed member should be set
    to.

	参数<varname>$name</varname>是指要操作的变量名称。<literal>__set()</literal>
    方法的<varname>$value</varname> 参数指定了<varname>$name</varname>变量的值。
   </para>

   <para>
	属性重载只能在对象中进行。在静态方法中，这些魔术方法将不会被调用。所以这些方法都不能被
	声明为<link linkend="language.oop5.static">static</link>。
   </para>

   <example>
    <title>使用__get, __set, __isset 和 __unset 进行重载</title>
    <programlisting role="php">
<![CDATA[
<?php
class MemberTest {
  	/**  被重载的数据保存在此  */
    private $data = array();

 
	/**  重载不能被用在已经定义的属性  */
    public $declared = 1;

   	/**  只有从类外部访问这个属性时，重载才会发生 */
    private $hidden = 2;

    public function __set($name, $value) {
        echo "Setting '$name' to '$value'\n";
        $this->data[$name] = $value;
    }

    public function __get($name) {
        echo "Getting '$name'\n";
        if (array_key_exists($name, $this->data)) {
            return $this->data[$name];
        }

        $trace = debug_backtrace();
        trigger_error(
            'Undefined property via __get(): ' . $name .
            ' in ' . $trace[0]['file'] .
            ' on line ' . $trace[0]['line'],
            E_USER_NOTICE);
        return null;
    }

    /**  PHP 5.1.0之后版本 */
    public function __isset($name) {
        echo "Is '$name' set?\n";
        return isset($this->data[$name]);
    }

    /**  PHP 5.1.0之后版本 */
    public function __unset($name) {
        echo "Unsetting '$name'\n";
        unset($this->data[$name]);
    }

    /**  非魔术方法  */
    public function getHidden() {
        return $this->hidden;
    }
}


echo "<pre>\n";

$obj = new MemberTest;

$obj->a = 1;
echo $obj->a . "\n\n";

var_dump(isset($obj->a));
unset($obj->a);
var_dump(isset($obj->a));
echo "\n";

echo $obj->declared . "\n\n";

echo "Let's experiment with the private property named 'hidden':\n";
echo "Privates are visible inside the class, so __get() not used...\n";
echo $obj->getHidden() . "\n";
echo "Privates not visible outside of class, so __get() is used...\n";
echo $obj->hidden . "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
Setting 'a' to '1'
Getting 'a'
1

Is 'a' set?
bool(true)
Unsetting 'a'
Is 'a' set?
bool(false)

1

Let's experiment with the private property named 'hidden':
Privates are visible inside the class, so __get() not used...
2
Privates not visible outside of class, so __get() is used...
Getting 'hidden'


Notice:  Undefined property via __get(): hidden in <file> on line 70 in <file> on line 29
]]>
    </screen>

   </example>
  </sect2>

  <sect2 xml:id="language.oop5.overloading.methods">
   <title>方法重载</title>

   <methodsynopsis>
    <type>mixed</type><methodname>__call</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
    <methodparam><type>array</type><parameter>arguments</parameter></methodparam>
   </methodsynopsis>
   <methodsynopsis>
    <type>mixed</type><methodname>__callStatic</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
    <methodparam><type>array</type><parameter>arguments</parameter></methodparam>
   </methodsynopsis>

   <para>
    当调用一个不可访问方法（如未定义，或者不可见）时，<literal>__call()</literal> 会被调用。
   </para>

   <para>
	当在静态方法中调用一个不可访问方法（如未定义，或者不可见）时，<literal>__callStatic()</literal> 会被调用。
   </para>

   <para> 
<varname>$name</varname>参数是要调用的方法名称。<varname>$arguments</varname>参数是一个数组，包含着要传递给方法的参数。
   </para>

   <example>
    <title>使用 __call 和 ___callStatic 调用对象中的方法</title>
    <programlisting role="php">
  <![CDATA[
<?php
class MethodTest {
    public function __call($name, $arguments) {
        // 注意: $name 区分大小写
        echo "Calling object method '$name' "
             . implode(', ', $arguments). "\n";
    }

    /**  PHP 5.3.0之后版本  */
    public static function __callStatic($name, $arguments) {
        // Note: value of $name is case sensitive.
        echo "Calling static method '$name' "
             . implode(', ', $arguments). "\n";
    }
}

$obj = new MethodTest;
$obj->runTest('in object context');

MethodTest::runTest('in static context');  // PHP 5.3.0之后版本
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
Calling object method 'runTest' in object context
Calling static method 'runTest' in static context
]]>
    </screen>
   </example>

  </sect2>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
