<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.7 $ -->
<!-- $Author: dallas $ -->
<!-- EN-Revision: 1.10 Maintainer: lm92 Status: ready -->
 <sect1 id="language.oop5.decon">
  <title>构造函数和析构函数</title>

  <sect2 id="language.oop5.decon.constructor">
   <title>构造函数</title>
   <methodsynopsis>
    <type>void</type><methodname>__construct</methodname>
    <methodparam choice="opt"><type>mixed</type><parameter>args</parameter></methodparam>
    <methodparam choice="opt"><parameter>...</parameter></methodparam>
   </methodsynopsis>
   <para>
    PHP 5 允行开发者在一个类中定义一个方法作为构造函数。具有构造函数的类会在每次创建对象时先调用此方法，所以非常适合在使用对象之前做一些初始化工作。
   </para>
   <note>
    <simpara>
     如果子类中定义了构造函数则不会暗中调用其父类的构造函数。要执行父类的构造函数，需要在子类的构造函数中调用
     <function>parent::__construct</function>。
    </simpara>
   </note>
   <example>
    <title>使用新标准的构造函数</title>
    <programlisting role="php">
<![CDATA[
<?php
class BaseClass {
   function __construct() {
       print "In BaseClass constructor\n";
   }
}

class SubClass extends BaseClass {
   function __construct() {
       parent::__construct();
       print "In SubClass constructor\n";
   }
}

$obj = new BaseClass();
$obj = new SubClass();
?>
]]>
    </programlisting>
   </example>
   <para>
    为了实现向后兼容性，如果 PHP 5 在类中找不到 <function>__construct</function>
    函数，它就会尝试寻找旧式的构造函数，也就是和类同名的函数。因此唯一会产生兼容性问题的情况是：类中已有一个名为
    <function>__construct</function> 的方法，但它却又不是构造函数。
   </para>
  </sect2>

  <sect2 id="language.oop5.decon.destructor">
   <title>析构函数</title>
   <methodsynopsis>
    <type>void</type><methodname>__destruct</methodname>
    <void />
   </methodsynopsis>
   <para>
    PHP 5 引入了析构函数的概念，这类似于其它面向对象的语言，如
    C++。析构函数会在到某个对象的所有引用都被删除或者当对象被显式销毁时执行。
   </para>
   <example>
    <title>析构函数示例</title>
    <programlisting role="php">
<![CDATA[
<?php
class MyDestructableClass {
   function __construct() {
       print "In constructor\n";
       $this->name = "MyDestructableClass";
   }

   function __destruct() {
       print "Destroying " . $this->name . "\n";
   }
}

$obj = new MyDestructableClass();
?>
]]>
    </programlisting>
   </example>
   <para>
    和构造函数一样，父类的析构函数不会被引擎暗中调用。要执行父类的析构函数，必须在子类的析构函数体中显式调用
    <function>parent::__destruct</function>。
   </para>
   <note>
    <para>
     析构函数在脚本关闭时调用，此时所有的头信息已经发出。
    </para>
   </note>
   <note>
    <para>
     试图在析构函数中抛出一个异常会导致致命错误。
    </para>
   </note>
  </sect2>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
