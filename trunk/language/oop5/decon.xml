<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.3 $ -->
<!-- $Author: lm92 $ -->
<!-- EN-Revision: 1.9 Maintainer: lm92 Status: ready -->
 <sect1 id="language.oop5.decon">
  <title>构造器和析构器</title>

  <sect2 id="language.oop5.decon.constructor">
   <title>构造器</title>
   <methodsynopsis>
    <type>void</type><methodname>__construct</methodname>
    <methodparam choice="opt"><type>mixed</type><parameter>args</parameter></methodparam>
    <methodparam choice="opt"><parameter>...</parameter></methodparam>
   </methodsynopsis>
   <para>
    PHP 5 允行开发者在一个类中定义构造器。构造器会在每次创建对象时首先被调用，所以非常之适合用于完成初始化工作。
   </para>
   <note>
    <simpara>
     如果子类中定义了构造器，那么当子类被调用时，其父类的构造器不会执行。如果要在子类被调用时执行父类的构造器，可以在子类的构造器中使用 <function>parent::__construct</function>。
    </simpara>
   </note>
   <example>
    <title>使用构造器</title>
    <programlisting role="php">
<![CDATA[
<?php
class BaseClass {
   function __construct() {
       print "In BaseClass constructor\n";
   }
}

class SubClass extends BaseClass {
   function __construct() {
       parent::__construct();
       print "In SubClass constructor\n";
   }
}

$obj = new BaseClass();
$obj = new SubClass();
?> 
]]>
    </programlisting>
   </example>
   <para>
    为了实现向后兼容性，如果 PHP 5 在类中找不到 <function>__construct</function>
    函数。它就会尝试寻找旧式的构造器，也就是和类名称相同的函数作为构造器。但是，当类中有一个名称为 <function>__construct</function> 的方法，但它却不是构造器的时候，就会产生兼容性问题。
   </para>
  </sect2>

  <sect2 id="language.oop5.decon.destructor">
   <title>析构器</title>
   <methodsynopsis>
    <type>void</type><methodname>__destruct</methodname>
    <void />
   </methodsynopsis>
   <para>
    PHP 5 引入了析构器的概念，就像其它面向对象的语言（如
    C++）一样。析构器会在一个对象被移除或被销毁时执行。
   </para>
   <example>
    <title>使用析构器</title>
    <programlisting role="php">
<![CDATA[
<?php
class MyDestructableClass {
   function __construct() {
       print "In constructor\n";
       $this->name = "MyDestructableClass";
   }

   function __destruct() {
       print "Destroying " . $this->name . "\n";
   }
}

$obj = new MyDestructableClass();
?> 
]]>
    </programlisting>
   </example>
   <para>
    和构造器一样，父类的析构器并不会在子类中被调用。如果要执行父类的析构器，可以在子类的析构器中使用
    <function>parent::__destruct</function>。
   </para>
   <note>
    <para>
     析构器只会在代码执行完毕后被调用，这个时候所有的头部信息已被发出。
    </para>
   </note>
  </sect2>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
