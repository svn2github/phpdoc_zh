<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.1 $ -->
 <sect1 id="language.oop5.decon">
  <title>Constructors and Destructors</title>
  <sect2 id="oop5-decon-constructor">
    <title>Constructor</title>
    <para>
     PHP 5 allows developers to declare constructor methods for classes.
     Classes which have a constructor method call this method on each
     newly-created object, so it is suitable for any initialization that the
     object may need before it is used.
    </para>
    <note>
     <simpara>
      Parent constructors are not called implicitly.  In order to run
      a parent constructor, a call to
      <function>parent::__construct</function> is required.
     </simpara>
    </note>
    <example>
     <title>using new unified constructors</title>
     <programlisting role="php">
<![CDATA[
<?php
class BaseClass {
    function __construct() {
        print "In BaseClass constructor\n";
    }
}

class SubClass extends BaseClass {
    function __construct() {
        parent::__construct();
        print "In SubClass constructor\n";
    }
}

$obj = new BaseClass();
$obj = new SubClass();
?> 
]]>
     </programlisting>
    </example>
    <para>
     For backwards compatibility, if PHP 5 cannot find a 
     <function>__construct</function> function for a given class, it will
     search for the old-style constructor function, by the name of the class.
     Effectively, it means that the only case that would have compatibility
     issues is if the class had a method named 
     <function>__construct</function> which was used for different semantics.
    </para>
  </sect2>

  <sect2 id="oop5-decon-destructor">
    <title>Destructor</title>
    <para>
     PHP 5 introduces a destructor concept similar to that of other
     object-oriented languages, such as Java: When the last reference to an
     object is destroyed the object's destructor, which is a class method
     named <function>__destruct</function>  that receives no parameters, is
     called before the object is freed from memory.
    </para>
    <example>
     <title>Destructor Example</title>
     <programlisting role="php">
<![CDATA[
<?php
class MyDestructableClass {
    function __construct() {
        print "In constructor\n";
        $this->name = "MyDestructableClass";
    }

    function __destruct() {
        print "Destroying " . $this->name . "\n";
    }
}

$obj = new MyDestructableClass();
?> 
]]>
     </programlisting>
    </example>
    <para>
     Like constructors, parent destructors will not be called implicitly by
     the engine. In order to run a parent destructor, one would have to
     explicitly call <function>parent::__destruct</function> in the destructor
     body.
    </para>
  </sect2>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
