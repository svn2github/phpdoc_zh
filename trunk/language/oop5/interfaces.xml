<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- $Author$ -->
<!-- EN-Revision: 324459 Maintainer: Haohappy Status: ready -->
<sect1 xml:id="language.oop5.interfaces" xmlns="http://docbook.org/ns/docbook">
 <title>对象接口</title>
 <para>
  使用接口（interface），可以指定某个类必须实现哪些方法，但不需要定义这些方法的具体内容。
 </para>
 <para>
  接口是通过 <literal>interface</literal> 关键字来定义的，就像定义一个标准的类一样，但其中定义所有的方法都是空的。
 </para>
 <para>
  接口中定义的所有方法都必须是公有，这是接口的特性。
 </para>

 <sect2 xml:id="language.oop5.interfaces.implements">
  <title>实现（<literal>implements</literal>）</title>
  <para>   
   要实现一个接口，使用 <literal>implements</literal>
   操作符。类中必须实现接口中定义的所有方法，否则会报一个致命错误。类可以实现多个接口，用逗号来分隔多个接口的名称。
  </para>
  <note>
   <para>
    实现多个接口时，接口中的方法不能有重名。
   </para>
  </note>
  <note>
   <para>
    接口也可以继承，通过使用 <link linkend="language.oop5.inheritance">extends</link> 操作符。
   </para>
  </note>
  <note>
   <para>
    类要实现接口，必须使用和接口中所定义的方法完全一致的方式。否则会导致致命错误。
   </para>
  </note>
 </sect2>

 <sect2 xml:id="language.oop5.interfaces.constants">
  <title><literal>常量</literal></title>
  <para> 
   接口中也可以定义常量。接口常量和<link
   linkend="language.oop5.constants">类常量</link>的使用完全相同，但是不能被子类或子接口所覆盖。
  </para>
 </sect2>

 <sect2 xml:id="language.oop5.interfaces.examples">
  &reftitle.examples;
  <example xml:id="language.oop5.interfaces.examples.ex1">
   <title>接口示例</title>
    <programlisting role="php">
<![CDATA[
<?php

// 声明一个'iTemplate'接口
interface iTemplate
{
    public function setVariable($name, $var);
    public function getHtml($template);
}


// 实现接口
// 下面的写法是正确的
class Template implements iTemplate
{
    private $vars = array();
  
    public function setVariable($name, $var)
    {
        $this->vars[$name] = $var;
    }
  
    public function getHtml($template)
    {
        foreach($this->vars as $name => $value) {
            $template = str_replace('{' . $name . '}', $value, $template);
        }
 
        return $template;
    }
}

// 下面的写法是错误的，会报错，因为没有实现 getHtml()：
// Fatal error: Class BadTemplate contains 1 abstract methods
// and must therefore be declared abstract (iTemplate::getHtml)
class BadTemplate implements iTemplate
{
    private $vars = array();
  
    public function setVariable($name, $var)
    {
        $this->vars[$name] = $var;
    }
}
?>
]]>
   </programlisting>
  </example>
  <example xml:id="language.oop5.interfaces.examples.ex2">
   <title>可扩充的接口</title>
    <programlisting role="php">
<![CDATA[
<?php
interface a
{
    public function foo();
}

interface b extends a
{
    public function baz(Baz $baz);
}

// 正确写法
class c implements b
{
    public function foo()
    {
    }

    public function baz(Baz $baz)
    {
    }
}

// 错误写法会导致一个致命错误
class d implements b
{
    public function foo()
    {
    }

    public function baz(Foo $foo)
    {
    }
}
?>
]]>
    </programlisting>
  </example>
  <example xml:id="language.oop5.interfaces.examples.ex3">
   <title>继承多个接口</title>
    <programlisting role="php">
<![CDATA[
<?php
interface a
{
    public function foo();
}

interface b
{
    public function bar();
}

interface c extends a, b
{
    public function baz();
}

class d implements c
{
    public function foo()
    {
    }

    public function bar()
    {
    }

    public function baz()
    {
    }
}
?>
]]>
    </programlisting>
  </example>
  <example xml:id="language.oop5.interfaces.examples.ex4">
   <title>使用接口常量</title>
    <programlisting role="php">
<![CDATA[
<?php
interface a
{
    const b = 'Interface constant';
}

// 输出接口常量
echo a::b;

// 错误写法，因为常量不能被覆盖。接口常量的概念和类常量是一样的。
class b implements a
{
    const b = 'Class constant';
}
?>
]]>
   </programlisting>
  </example>
  <para>
   接口加上类型约束，提供了一种很好的方式来确保某个对象包含有某些方法。参见
   <link linkend="language.operators.type">instanceof</link> 操作符和<link
   linkend="language.oop5.typehinting">类型约束</link>。
  </para>
 </sect2>

</sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
