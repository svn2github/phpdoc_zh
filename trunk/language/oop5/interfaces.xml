<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.4 $ -->
<!-- $Author: haohappy $ -->
<!-- EN-Revision: 1.14 Maintainer: haohappy Status: ready -->
 <sect1 xml:id="language.oop5.interfaces" xmlns="http://docbook.org/ns/docbook">
  <title>接口</title>
  <para>
  使用接口（interface），你可以指定某个类必须实现哪些方法，但不需要定义这些方法的具体内容。
  </para>
  <para>
    我们可以通过interface来定义一个接口，就像定义一个标准的类一样，但其中定义所有的方法都是空的。
  </para>
  <para>
  接口中定义的所有方法都必须是public，这是接口的特性。
  </para>
  <sect2 xml:id="language.oop5.interfaces.implements">
   <title><literal>实现</literal></title>
   <para>   
	要实现一个接口，可以使用<literal>implements</literal>操作符。类中必须实现接口中定义的所有方法，否则
	会报一个fatal错误。如果要实现多个接口，可以用逗号来分隔多个接口的名称。
   </para>
   <note>
    <para>
	 实现多个接口时，接口中的方法不能有重名。
    </para>
   </note>
   <note>
    <para>
	 接口也可以继承，通过使用<literal>extends</literal>操作符。
    </para>
   </note>
  </sect2>
  <sect2 xml:id="language.oop5.interfaces.constants">
   <title><literal>常量</literal></title>
   <para> 
	接口中也可以定义常量。接口常量和<link linkend="language.oop5.constants">类常量</link>的使用完全相同。
	它们都是定值，不能被子类或子接口修改。
   </para>
  </sect2>
  <sect2 xml:id="language.oop5.interfaces.examples">
   &reftitle.examples;
   <example xml:id="language.oop5.interfaces.examples.ex1">
    <title>接口代码示例</title>
     <programlisting role="php">
<![CDATA[
<?php

// 声明一个'iTemplate'接口
interface iTemplate
{
    public function setVariable($name, $var);
    public function getHtml($template);
}


// 实现接口
// 下面的写法是正确的
class Template implements iTemplate
{
    private $vars = array();
  
    public function setVariable($name, $var)
    {
        $this->vars[$name] = $var;
    }
  
    public function getHtml($template)
    {
        foreach($this->vars as $name => $value) {
            $template = str_replace('{' . $name . '}', $value, $template);
        }
 
        return $template;
    }
}

// 下面的写法是错误的，会报错：
// Fatal error: Class BadTemplate contains 1 abstract methods
// and must therefore be declared abstract (iTemplate::getHtml)
class BadTemplate implements iTemplate
{
    private $vars = array();
  
    public function setVariable($name, $var)
    {
        $this->vars[$name] = $var;
    }
}
?>
]]>
    </programlisting>
   </example>
   <example xml:id="language.oop5.interfaces.examples.ex2">
    <title>Extendable Interfaces</title>
     <programlisting role="php">
<![CDATA[
<?php
interface a
{
    public function foo();
}

interface b extends a
{
    public function baz(Baz $baz);
}

// 正确写法
class c implements b
{
    public function foo()
    {
    }

    public function baz(Baz $baz)
    {
    }
}

// 错误写法会导致一个fatal error
class d implements b
{
    public function foo()
    {
    }

    public function baz(Foo $foo)
    {
    }
}
?>
]]>
     </programlisting>
   </example>
   <example xml:id="language.oop5.interfaces.examples.ex3">
    <title>多个接口间的继承</title>
     <programlisting role="php">
<![CDATA[
<?php
interface a
{
    public function foo();
}

interface b
{
    public function bar();
}

interface c extends a, b
{
    public function baz();
}

class d implements c
{
    public function foo()
    {
    }

    public function bar()
    {
    }

    public function baz()
    {
    }
}
?>
]]>
     </programlisting>
   </example>
   <example xml:id="language.oop5.interfaces.examples.ex4">
    <title>使用接口常量</title>
     <programlisting role="php">
<![CDATA[
<?php
interface a
{
    const b = 'Interface constant';
}

// 输出接口常量
echo a::b;

// 错误写法，因为常量的值不能被修改。接口常量的概念和类常量是一样的。
class b implements a
{
    const b = 'Class constant';
}
?>
]]>
     </programlisting>
   </example>
   <simpara>
 	 你也可以看看<link linkend="language.operators.type">instanceof</link>关键字的文档。
   </simpara>
  </sect2>

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
