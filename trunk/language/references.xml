<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.4 $ -->
<!-- $Author: dallas $ -->
<!-- EN-Revision: 1.25 Maintainer: dallas Status: ready -->
 <chapter id="language.references">
  <title>引用的解释</title>

  <sect1 id="language.references.whatare">
   <title>引用是什么</title>
   <simpara>
    在 PHP 中引用意味着用不同的名字访问同一个变量内容。这并不像 C 的指针，它们是符号表别名。注意在
    PHP 中，变量名和变量内容是不一样的，因此同样的内容可以有不同的名字。最接近的比喻是
    Unix 的文件名和文件本身 － 变量名是目录条目，而变量内容则是文件本身。引用可以被看作是
    Unix 文件系统中的紧密连接。
   </simpara>
  </sect1>

  <sect1 id="language.references.whatdo">
   <title>引用做什么</title>
   <para>
    PHP 的引用允许你用两个变量来指向同一个内容。意思是，当你这样做时：
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$a =& $b
?>
]]>
     </programlisting>
    </informalexample>
    这意味着 <varname>$a</varname> 和 <varname>$b</varname> 指向了同一个变量。
    <note>
     <para>
      <varname>$a</varname> 和 <varname>$b</varname> 在这里是完全相同的，这并不是
      <varname>$a</varname> 指向了 <varname>$b</varname> 或者相反，而是
      <varname>$a</varname> 和 <varname>$b</varname> 指向了同一个地方。
     </para>
    </note>
   </para>
   <para>
   同样的语法可以用在函数中，它返回引用，以及用在 <literal>new</literal>
   运算符中（PHP 4.0.4 以及以后版本）：
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$bar =& new fooclass();
$foo =& find_var ($bar);
?>
]]>
    </programlisting>
    </informalexample>
    </para>
    <note>
     <para>
     不用 <literal>&amp;</literal> 运算符导致对象生成了一个拷贝。如果你在类中用
     <literal>$this</literal>，它将作用于该类当前的实例。没有用 <literal>&amp;</literal>
     的赋值将拷贝这个实例（例如对象）并且 <literal>$this</literal>
     将作用于这个拷贝上，这并不总是想要的结果。由于性能和内存消耗的问题，通常你只想工作在一个实例上面。
     </para>
     <para>
      尽管你可以用 <literal>@</literal> 运算符来<emphasis>关闭</emphasis>构造函数中的任何错误信息，例如用
      <literal>@new</literal>，但用 <literal>&amp;new</literal> 语句时这不起效果。这是
      Zend 引擎的一个限制并且会导致一个解析错误。
     </para>
   </note>
   <para>
    引用做的第二件事是用引用传递变量。这是通过在函数内建立一个本地变量并且该变量在呼叫范围内引用了同一个内容来实现的。例如：
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function foo (&$var)
{
    $var++;
}

$a=5;
foo ($a);
?>
]]>
     </programlisting>
    </informalexample>
    将使 <varname>$a</varname> 变成 6。这是因为在 <varname>foo</varname> 函数中变量
    <varname>$var</varname> 指向了和 <varname>$a</varname> 指向的同一个内容。更多详细解释见<link
    linkend="language.references.pass">引用传递</link>。
   </para>
   <simpara>
    引用做的第三件事是<link linkend="language.references.return">引用返回</link>。
   </simpara>
  </sect1>

  <sect1 id="language.references.arent">
   <title>引用不是什么</title>
   <para>
    如前所述，引用不是指针。这意味着下面的结构不会产生你预期的效果：
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function foo (&$var)
{
    $var =& $GLOBALS["baz"];
}
foo($bar);
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    这将使 <varname>foo</varname> 函数中的 <varname>$var</varname> 变量在函数调用时和
    <varname>$bar</varname> 绑定在一起，但接着又被重新绑定到了
    <varname>$GLOBALS["baz"]</varname> 上面。不可能通过引用机制将 <varname>$bar</varname>
    在函数调用范围内绑定到别的变量上面，因为在函数 <varname>foo</varname> 中并没有变量
    <varname>$bar</varname>（它被表示为 <varname>$var</varname>，但是 <varname>$var</varname>
    只有变量内容而没有调用符号表中的名字到值的绑定）。
   </simpara>
  </sect1>

  <sect1 id="language.references.pass">
   <title>引用传递</title>
   <para>
   你可以将一个变量通过引用传递给函数，这样该函数就可以修改其参数的值。语法如下：
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function foo (&$var)
{
    $var++;
}

$a=5;
foo ($a);
// $a is 6 here
?>
]]>
     </programlisting>
    </informalexample>
  注意在函数调用时没有引用符号 － 只有函数定义中有。光是函数定义就足够使参数通过引用来正确传递了。
  </para>
  <para>
  以下内容可以通过引用传递：
   <itemizedlist>
    <listitem>
     <simpara>
      变量，例如 <literal>foo($a)</literal>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      New 语句，例如 <literal>foo(new foobar())</literal>
     </simpara>
    </listitem>
    <listitem>
     <para>
      从函数中返回的引用，例如：
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function &bar()
{
    $a = 5;
    return $a;
}
foo(bar());
?>
]]>
     </programlisting>
    </informalexample>
    详细解释见<link linkend="language.references.return">引用返回</link>。
     </para>
    </listitem>
  </itemizedlist>
  </para>
  <para>
  任何其它表达式都不能通过引用传递，结果未定义。例如下面引用传递的例子是无效的：
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function bar() // Note the missing &
{
    $a = 5;
    return $a;
}
foo(bar());

foo($a = 5) // 表达式，不是变量
foo(5) // 常量，不是变量
?>
]]>
     </programlisting>
    </informalexample>
   这些条件是 PHP 4.0.4 以及以后版本有的。
  </para>
  </sect1>

  <sect1 id="language.references.return">
   <title>引用返回</title>
   <para>
    引用返回用在当你想用函数找到引用应该被绑定在哪一个变量上面时。当返回引用时，使用此语法：
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function &find_var ($param)
{
    /* ...code... */
    return $found_var;
}

$foo =& find_var ($bar);
$foo->x = 2;
?>
]]>
     </programlisting>
    </informalexample>
    本例中 <varname>find_var</varname> 函数所返回的对象的属性将被设定（译者：指的是 $foo->x = 2; 语句），而不是拷贝，就和没有用引用语法一样。
   </para>
   <note>
    <simpara>
     和参数传递不同，这里必须在两个地方都用 <literal>&amp;</literal> 符号 －
     来指出返回的是一个引用，而不是通常的一个拷贝，同样也指出 <varname>$foo</varname>
     是作为引用的绑定，而不是通常的赋值。
    </simpara>
   </note>
  </sect1>

  <sect1 id="language.references.unset">
   <title>取消引用</title>
   <para>
    当你 unset 一个引用，只是断开了变量名和变量内容之间的绑定。这并不意味着变量内容被销毁了。例如：
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$a = 1;
$b =& $a;
unset ($a);
?>
]]>
     </programlisting>
    </informalexample>
    不会 unset <varname>$b</varname>，只是 <varname>$a</varname>。
   </para>
   <simpara>
    再拿这个和 Unix 的 <command>unlink</command> 调用来类比一下可能有助于理解。
   </simpara>
  </sect1>

  <sect1 id="language.references.spot">
   <title>引用定位</title>
   <simpara>
    许多 PHP 的语法结构是通过引用机制实现的，所以上述有关引用绑定的一切也都适用于这些结构。一些结构，例如引用传递和返回，已经在上面提到了。其它使用引用的结构有：
   </simpara>

   <sect2 id="references.global">
    <title><literal>global</literal> 引用</title>
    <para>
     当用 <command>global $var</command> 声明一个变量时实际上建立了一个到全局变量的引用。也就是说和这样做是相同的：
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
$var =& $GLOBALS["var"];
?>
]]>
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     这意味着，例如，unset <varname>$var</varname> 不会 unset 全局变量。
    </simpara>
   </sect2>

   <sect2 id="references.this">
    <title><literal>$this</literal></title>
    <simpara>
     在一个对象的方法中，<varname>$this</varname> 永远是调用它的对象的引用。
    </simpara>
   </sect2>
  </sect1>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
