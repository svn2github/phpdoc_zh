<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.7 $ -->
<!-- $Author: eniac2008 $ -->
<!-- EN-Revision: 1.8 Maintainer: Altair Status: ready -->
<!-- CREDITS: lm92 -->
 <chapter xml:id="language.exceptions" xmlns="http://docbook.org/ns/docbook">
  <title>异常处理</title>

  <para>
   PHP 5 添加了类似于其它语言的异常处理模块。在 PHP 代码中所产生的异常可被
   <literal>throw</literal> 语句抛出并被 <literal>catch</literal>
   语句捕获。需要进行异常处理的代码都必须放入 <literal>try</literal>
   代码块内，以便捕获可能存在的异常。每一个 <literal>try</literal>
   至少要有一个与之对应的 <literal>catch</literal>。使用多个
   <literal>catch</literal> 可以捕获不同的类所产生的异常。当
   <literal>try</literal> 代码块不再抛出异常或者找不到 <literal>catch</literal>
   能匹配所抛出的异常时，PHP 代码就会在跳转到最后一个 catch
   的后面继续执行。当然，PHP 允许在 <literal>catch</literal>
   代码块内再次抛出（<literal>throw</literal>）异常。
  </para>
  <para>
   当一个异常被抛出时，其后（译者注：指抛出异常时所在的代码块）的代码将不会继续执行，而 PHP
   就会尝试查找第一个能与之匹配的 <literal>catch</literal>。如果一个异常没有被捕获，而且又没用使用
   <function>set_exception_handler</function> 作相应的处理的话，那么 PHP
   将会产生一个严重的错误，并且输出
   <literal>Uncaught Exception ...</literal> （未捕获异常）的提示信息。
  </para>
  <note>
   <para>
    PHP 内部函数主要使用<link 
    linkend="ini.error-reporting">错误报告</link>, 只有现代<link 
    linkend="language.oop5">面向对象</link>的扩展才使用异常。但错误可以很容易的通过<link 
    linkend="class.errorexception">ErrorException</link>转换为异常。
   </para>
  </note>
  <tip>
   <para>
    <link linkend="intro.spl">PHP标准库 (SPL)</link> 提供了许多内建的异常类。
   </para>
  </tip>  
   <example>
    <title>抛出一个异常</title>
    <programlisting role="php">
<![CDATA[
<![CDATA[
<?php
function inverse($x) {
    if (!$x) {
        throw new Exception('Division by zero.');
    }
    else return 1/$x;
}

try {
    echo inverse(5) . "\n";
    echo inverse(0) . "\n";
} catch (Exception $e) {
    echo 'Caught exception: ',  $e->getMessage(), "\n";
}

// Continue execution
echo 'Hello World';
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
0.2
Caught exception: Division by zero.
Hello World
]]>
    </screen>
   </example>

   <example>
    <title>嵌套的异常</title>
    <programlisting role="php">
<![CDATA[
<?php

class MyException extends Exception { }

class Test {
    public function testing() {
        try {
            try {
                throw new MyException('foo!');
            } catch (MyException $e) {
                /* rethrow it */
                throw $e;
            }
        } catch (Exception $e) {
            var_dump($e->getMessage());
        }
    }
}

$foo = new Test;
$foo->testing();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(4) "foo!"
]]>
    </screen>
   </example>

  <sect1 xml:id="language.exceptions.extending">
   <title>扩展 PHP 内置的异常处理类</title>
   <para>
    用户可以用自定义的异常处理类来扩展 PHP
    内置的异常处理类。以下的代码说明了在内置的异常处理类中，哪些属性和方法在子类中是可访问和可继承的。译者注：以下这段代码只为说明内置异常处理类的结构，它并不是一段有实际意义的可用代码。
   </para>
   <example>
    <title>内置的异常处理类</title>
    <programlisting role="php">
<![CDATA[
<?php
class Exception
{
    protected $message = 'Unknown exception';   // 异常信息
    protected $code = 0;                        // 用户自定义异常代码
    protected $file;                            // 发生异常的文件名
    protected $line;                            // 发生异常的代码行号

    function __construct($message = null, $code = 0);

    final function getMessage();                // 返回异常信息
    final function getCode();                   // 返回异常代码
    final function getFile();                   // 返回发生异常的文件名
    final function getLine();                   // 返回发生异常的代码行号
    final function getTrace();                  // backtrace() 数组
    final function getTraceAsString();          // 已格成化成字符串的 getTrace() 信息

    /* 可重载的方法 */
    function __toString();                       // 可输出的字符串
}
?>
]]>
    </programlisting>
   </example>
   <para>
    如果使用自定义的类来扩展内置异常处理类，并且要重新定义<link
    linkend="language.oop5.decon">构造函数</link>的话，建议同时调用
    <link linkend="language.oop5.paamayim-nekudotayim">parent::__construct()</link>
    来检查所有的变量是否已被赋值。当对象要输出字符串的时候，可以重载
    <link linkend="language.oop5.magic">__toString()</link> 并自定义输出的样式。
   </para>
   <example>
    <title>扩展 PHP 内置的异常处理类</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * 自定义一个异常处理类
 */
class MyException extends Exception
{
    // 重定义构造器使 message 变为必须被指定的属性
    public function __construct($message, $code = 0) {
        // 自定义的代码

        // 确保所有变量都被正确赋值
        parent::__construct($message, $code);
    }

    // 自定义字符串输出的样式
    public function __toString() {
        return __CLASS__ . ": [{$this->code}]: {$this->message}\n";
    }

    public function customFunction() {
        echo "A Custom function for this type of exception\n";
    }
}


/**
 * 创建一个用于测试异常处理机制的类
 */
class TestException
{
    public $var;

    const THROW_NONE    = 0;
    const THROW_CUSTOM  = 1;
    const THROW_DEFAULT = 2;

    function __construct($avalue = self::THROW_NONE) {

        switch ($avalue) {
            case self::THROW_CUSTOM:
                // 抛出自定义异常
                throw new MyException('1 is an invalid parameter', 5);
                break;

            case self::THROW_DEFAULT:
                // 抛出默认的异常
                throw new Exception('2 isnt allowed as a parameter', 6);
                break;

            default:
                // 没有异常的情况下，创建一个对象
                $this->var = $avalue;
                break;
        }
    }
}


// 例子 1
try {
    $o = new TestException(TestException::THROW_CUSTOM);
} catch (MyException $e) {      // 捕获异常
    echo "Caught my exception\n", $e;
    $e->customFunction();
} catch (Exception $e) {        // 被忽略
    echo "Caught Default Exception\n", $e;
}

// 执行后续代码
var_dump($o);
echo "\n\n";


// 例子 2
try {
    $o = new TestException(TestException::THROW_DEFAULT);
} catch (MyException $e) {      // 不能匹配异常的种类，被忽略
    echo "Caught my exception\n", $e;
    $e->customFunction();
} catch (Exception $e) {        // 捕获异常
    echo "Caught Default Exception\n", $e;
}

// 执行后续代码
var_dump($o);
echo "\n\n";


// 例子 3
try {
    $o = new TestException(TestException::THROW_CUSTOM);
} catch (Exception $e) {        // 捕获异常
    echo "Default Exception caught\n", $e;
}

// 执行后续代码
var_dump($o);
echo "\n\n";


// 例子 4
try {
    $o = new TestException();
} catch (Exception $e) {        // 没有异常，被忽略
    echo "Default Exception caught\n", $e;
}

// 执行后续代码
var_dump($o);
echo "\n\n";
?>
]]>
    </programlisting>
   </example>
  </sect1>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
