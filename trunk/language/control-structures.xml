<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.1 $ -->
<!-- $Author: dallas $ -->
<!-- EN-Revision: 1.62 Maintainer: dallas Status: partial -->
 <chapter id="control-structures">
  <title>流程控制</title>

  <simpara>
   任何 PHP 脚本都是由一系列语句构成的。一条语句可以是一个赋值语句，一个函数调用，一个循环，甚至一个什么也不做的（空语句）条件语句。语句通常以分号结束。此外，还可以用花括号将一组语句封装成一个语句组。语句组本身可以当作是一行语句。本章讲述了各种语句类型。
  </simpara>

  <sect1 id="control-structures.if">
   <title><literal>if</literal></title>
   <para>
    <literal>if</literal> 结构是很多语言包括 PHP 在内最重要的特性之一，它允许按照条件执行代码片段。PHP 的 <literal>if</literal> 结构和 C 语言相似：
    <informalexample>
     <programlisting>
<![CDATA[
if (expr)
    statement
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    如同在<link linkend="language.expressions">表达式</link>一章中定义的，<replaceable>expr</replaceable> 按照布尔求值。如果 <replaceable>expr</replaceable> 的值为 &true;，PHP 将执行 <replaceable>statement</replaceable>，如果值为 &false; － 将忽略 <replaceable>statement</replaceable>。有关哪些值被视为 &false; 的更多信息参见<link linkend="language.types.boolean.casting">“转换为布尔值”</link>一节。
   </simpara>
   <para>
    如果 <replaceable>$a</replaceable> 大于 <replaceable>$b</replaceable>，则以下例子将显示 <computeroutput>a is bigger
    than b</computeroutput>：
    <informalexample>
     <programlisting role="php">
<![CDATA[
if ($a > $b)
    print "a is bigger than b";
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    经常需要按照条件执行不止一条语句，当然并不需要给每条语句都加上一个 <literal>if</literal> 子句。可以将这些语句放入语句组中。例如，如果 <replaceable>$a</replaceable> 大于 <replaceable>$b</replaceable>，以下代码将显示 <computeroutput>a 
is bigger than b</computeroutput> 并且将 <replaceable>$a</replaceable> 的值赋给 <replaceable>$b</replaceable>：
    <informalexample>
     <programlisting role="php">
<![CDATA[
if ($a > $b) {
    print "a is bigger than b";
    $b = $a;
}
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    <literal>if</literal> 语句可以无限层地嵌套在其它 <literal>if</literal> 语句中，这给程序的不同部分的条件执行提供了充分的弹性。
   </simpara>
  </sect1>

  <sect1 id="control-structures.else">
   <title><literal>else</literal></title>
   <para>
    经常需要在满足某个条件时执行一条语句，而在不满足该条件时执行其它语句，这正是 <literal>else</literal> 的功能。<literal>else</literal> 延伸了 <literal>if</literal> 语句，可以在 <literal>if</literal> 语句中的表达式的值为 &false; 时执行语句。例如以下代码在 <replaceable>$a</replaceable> 大于 <replaceable>$b</replaceable> 时显示 <computeroutput>a
    is bigger than b</computeroutput>，反之则显示 <computeroutput>a is NOT bigger than b</computeroutput>：
    <informalexample>
     <programlisting role="php">
<![CDATA[
if ($a > $b) {
    print "a is bigger than b";
} else {
    print "a is NOT bigger than b";
}
]]>
     </programlisting>
    </informalexample>

    <literal>else</literal> 语句仅在 <literal>if</literal> 以及 <literal>elseif</literal>（如果有的话）语句中的表达式的值为 &false; 时执行（参见 <link
    linkend="control-structures.elseif">elseif</link>）。

   </para>
  </sect1>

  <sect1 id="control-structures.elseif">
   <title><literal>elseif</literal></title>
   <para>
    <literal>elseif</literal>，和此名称暗示的一样，是 <literal>if</literal> 和 <literal>else</literal> 的组合。和 <literal>else</literal> 一样，它延伸了 <literal>if</literal> 语句，可以在原来的 <literal>if</literal> 表达式值为 &false; 时执行不同语句。但是和 <literal>else</literal> 不一样的是，它仅在 <literal>elseif</literal> 的条件表达式值为 &true; 时执行语句。例如以下代码将根据条件分别显示 <computeroutput>a
    is bigger than b</computeroutput>，<computeroutput>a equal to b</computeroutput> 或者 <computeroutput>a
    is smaller than b</computeroutput>：
    <informalexample>
     <programlisting role="php">
<![CDATA[
if ($a > $b) {
    print "a is bigger than b";
} elseif ($a == $b) {
    print "a is equal to b";
} else {
    print "a is smaller than b";
}
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    在同一个 <literal>if</literal> 语句中可以有多个 <literal>elseif</literal> 语句。第一个表达式值为 &true; 的 <literal>elseif</literal> 语句（如果有的话）将会执行。在 PHP 中，也可以写成“else if”（两个单词），它和“elseif”（一个单词）的行为完全一样。句法分析的含义有少许区别（如果你熟悉 C 语言的话，这是同样的行为），但是底线是两者会产生完全一样的行为。
   </simpara>
   <simpara>
    <literal>elseif</literal> 的语句仅在之前的 <literal>if</literal> 或 <literal>elseif</literal> 的表达式值为 &false;，而当前的 <literal>elseif</literal> 表达式值为 &true; 时执行。
   </simpara>
  </sect1>

  <sect1 id="control-structures.alternative-syntax">
   <title>流程控制的替代语法</title>
   <para>
    PHP 提供了一些流程控制的替代语法，包括 <literal>if</literal>，<literal>while</literal>，<literal>for</literal>，<literal>foreach</literal> 和 <literal>switch</literal>。替代语法的基本形式是把左花括号（{）换成冒号（:），把右花括号（}）分别换成 <literal>endif;</literal>，<literal>endwhile;</literal>，<literal>endfor;</literal>，<literal>endforeach;</literal> 以及 <literal>endswitch;</literal>。
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php if ($a == 5): ?>
A is equal to 5
<?php endif; ?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    在上面的例子中，HTML 内容“A is equal to 5”用替代语法嵌套在 <literal>if</literal> 语句中。该 HTML 的内容仅在 $a 等与 5 时显示。
   </simpara>
   <para>
    替代语法同样可以用在 <literal>else</literal> 和 <literal>elseif</literal> 中。下面是一个包括 <literal>elseif</literal> 和 <literal>else</literal> 的 <literal>if</literal> 结构用替代语法格式写的例子：
    <informalexample>
     <programlisting role="php">
<![CDATA[
if ($a == 5):
    print "a equals 5";
    print "...";
elseif ($a == 6):
    print "a equals 6";
    print "!!!";
else:
    print "a is neither 5 nor 6";
endif;
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    更多例子参见 <link linkend="control-structures.while">while</link>，<link
    linkend="control-structures.for">for</link> 和 <link linkend="control-structures.if">if</link>。
   </para>
  </sect1>

  <sect1 id="control-structures.while">
   <title><literal>while</literal></title>
   <para>
    <literal>while</literal> 循环是 PHP 中最简单的循环类型。它和 C 语言中的 <literal>while</literal> 表现得一样。<literal>while</literal> 语句的基本格式是：
    <informalexample>
     <programlisting>
<![CDATA[
while (expr) statement
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    <literal>while</literal> 语句的含意很简单，它告诉 PHP 只要<literal>while</literal> 表达式的值为 &true; 就重复执行嵌套中的循环语句。表达式的值在每次开始循环时检查，所以即使这个值在循环语句中改变了，语句也不会停止执行，直到本次循环结束。有时候如果 <literal>while</literal> 表达式的值一开始就是 &false;，则循环语句一次都不会执行。
   </simpara>
   <para>
    和 <literal>if</literal> 语句一样，可以在 <literal>while</literal> 循环中用花括号括起一个语句组，或者用替代语法：
    <informalexample>
     <programlisting>
<![CDATA[
while (expr): statement ... endwhile;
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    下面两个例子完全一样，都显示数字 1 到 10：
    <informalexample>
     <programlisting role="php">
<![CDATA[
/* example 1 */

$i = 1;
while ($i <= 10) {
    print $i++;  /* the printed value would be
                    $i before the increment
                    (post-increment) */
}

/* example 2 */

$i = 1;
while ($i <= 10):
    print $i;
    $i++;
endwhile;
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect1>

  <sect1 id="control-structures.do.while">
   <title><literal>do..while</literal></title>
   <simpara>
    <literal>do..while</literal> 和 <literal>while</literal> 循环非常相似，区别在于表达式的值是在每次循环结束时检查而不是开始时。和正规的 <literal>while</literal> 循环主要的区别是 <literal>do..while</literal> 的循环语句保证会执行一次（表达式的真值在每次循环结束后检查），然而在正规的 <literal>while</literal> 循环中就不一定了（表达式真值在循环开始时检查，如果一开始就为 &false; 则整个循环立即终止）。
   </simpara>
   <para>
    <literal>do..while</literal> 循环只有一种语法：

    <informalexample>
     <programlisting role="php">
<![CDATA[
$i = 0;
do {
   print $i;
} while ($i>0);
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
     以上循环将正好运行一次，因为经过第一次循环后，当检查表达式的真值时，其值为 &false;（$i 不大于 0）而导致循环终止。
   </simpara>
   <para>
    资深的 C 语言用户可能熟悉另一种不同的 <literal>do..while</literal> 循环用法，把语句放在 <literal>do..while</literal>(0) 之中，在循环内部用 <link linkend="control-structures.break"><literal>break</literal></link> 语句来结束执行循环。以下代码片段示范了此方法：
    <informalexample>
     <programlisting role="php">
<![CDATA[
do {
    if ($i < 5) {
        print "i is not big enough";
        break;
    }
    $i *= $factor;
    if ($i < $minimum_limit) {
        break;
    }
    print "i is ok";

     ...process i...

} while(0);
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    如果你还不能立刻理解也不用担心。即使不用此“特性”你也照样可以写出强大的代码来。
   </simpara>
  </sect1>

  <sect1 id="control-structures.for">
   <title><literal>for</literal></title>
   <para>
    <literal>for</literal> loops are the most complex loops in PHP.
    They behave like their C counterparts.  The syntax of a
    <literal>for</literal> loop is:
    <informalexample>
     <programlisting>
<![CDATA[
for (expr1; expr2; expr3) statement
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    The first expression (<replaceable>expr1</replaceable>) is
    evaluated (executed) once unconditionally at the beginning of the
    loop.
   </simpara>
   <simpara>
    In the beginning of each iteration,
    <replaceable>expr2</replaceable> is evaluated.  If it evaluates to
    &true;, the loop continues and the nested
    statement(s) are executed.  If it evaluates to
    &false;, the execution of the loop ends.
   </simpara>
   <simpara>
    At the end of each iteration, <replaceable>expr3</replaceable> is
    evaluated (executed).
   </simpara>
   <simpara>
    Each of the expressions can be empty.
    <replaceable>expr2</replaceable> being empty means the loop should
    be run indefinitely (PHP implicitly considers it as
    &true;, like C).  This may not be as useless as
    you might think, since often you'd want to end the loop using a
    conditional <link
    linkend="control-structures.break"><literal>break</literal></link>
    statement instead of using the <literal>for</literal> truth
    expression.
   </simpara>
   <para>
    Consider the following examples.  All of them display numbers from
    1 to 10:
    <informalexample>
     <programlisting role="php">
<![CDATA[
/* example 1 */

for ($i = 1; $i <= 10; $i++) {
    print $i;
}

/* example 2 */

for ($i = 1;;$i++) {
    if ($i > 10) {
        break;
    }
    print $i;
}

/* example 3 */

$i = 1;
for (;;) {
    if ($i > 10) {
        break;
    }
    print $i;
    $i++;
}

/* example 4 */

for ($i = 1; $i <= 10; print $i, $i++);
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    Of course, the first example appears to be the nicest one (or
    perhaps the fourth), but you may find that being able to use empty
    expressions in <literal>for</literal> loops comes in handy in many
    occasions.
   </simpara>
   <para>
    PHP also supports the alternate "colon syntax" for
    <literal>for</literal> loops.
    <informalexample>
     <programlisting>
<![CDATA[
for (expr1; expr2; expr3): statement; ...; endfor;
]]>
     </programlisting>
     </informalexample>
   </para>
   <para>
    Other languages have a <literal>foreach</literal> statement to
    traverse an array or hash. PHP 3 has no such construct; PHP 4 does
    (see <link
    linkend="control-structures.foreach">foreach</link>). In PHP 3, you
    can combine <link linkend="control-structures.while">while</link>
    with the <function>list</function> and <function>each</function>
    functions to achieve the same effect. See the documentation for
    these functions for an example.
   </para>

  </sect1>

  <sect1 id="control-structures.foreach">
   <title><literal>foreach</literal></title>
   <para>
    PHP 4 (not PHP 3) includes a <literal>foreach</literal> construct,
    much like Perl and some other languages. This simply gives an easy
    way to iterate over arrays. There are two syntaxes; the second is
    a minor but useful extension of the first:
    <informalexample>
     <programlisting>
<![CDATA[
foreach(array_expression as $value) statement
foreach(array_expression as $key => $value) statement
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    The first form loops over the array given by
    <literal>array_expression</literal>. On each loop, the value of
    the current element is assigned to <literal>$value</literal> and
    the internal array pointer is advanced by one (so on the next
    loop, you'll be looking at the next element).
   </simpara>
   <simpara>
    The second form does the same thing, except that the current
    element's key will be assigned to the variable
    <literal>$key</literal> on each loop.
   </simpara>
   <para>
    <note>
     <para>
      When <literal>foreach</literal> first starts executing, the
      internal array pointer is automatically reset to the first element
      of the array. This means that you do not need to call
      <function>reset</function> before a <literal>foreach</literal>
      loop.
     </para>
    </note>
   </para>
   <para>
    <note>
     <para>
      Also note that <literal>foreach</literal> operates on a copy of
      the specified array, not the array itself, therefore the array
      pointer is not modified as with the <function>each</function>
      construct and changes to the array element returned are not
      reflected in the original array.
     </para>
    </note>
   </para>
   <note>
    <para>
     <literal>foreach</literal> does not support the ability to
     suppress error messages using '@'.
    </para>
   </note>
   <para>
    You may have noticed that the following are functionally
    identical:
    <informalexample>
     <programlisting role="php">
<![CDATA[
reset ($arr);
while (list(, $value) = each ($arr)) {
    echo "Value: $value<br>\n";
}

foreach ($arr as $value) {
    echo "Value: $value<br>\n";
}
]]>
     </programlisting>
    </informalexample>
    The following are also functionally identical:
    <informalexample>
     <programlisting role="php">
<![CDATA[
reset ($arr);
while (list($key, $value) = each ($arr)) {
    echo "Key: $key; Value: $value<br>\n";
}

foreach ($arr as $key => $value) {
    echo "Key: $key; Value: $value<br>\n";
}
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    Some more examples to demonstrate usages:
    <informalexample>
     <programlisting role="php">
<![CDATA[
/* foreach example 1: value only */

$a = array (1, 2, 3, 17);

foreach ($a as $v) {
   print "Current value of \$a: $v.\n";
}

/* foreach example 2: value (with key printed for illustration) */

$a = array (1, 2, 3, 17);

$i = 0; /* for illustrative purposes only */

foreach($a as $v) {
    print "\$a[$i] => $v.\n";
    $i++;
}

/* foreach example 3: key and value */

$a = array (
    "one" => 1,
    "two" => 2,
    "three" => 3,
    "seventeen" => 17
);

foreach($a as $k => $v) {
    print "\$a[$k] => $v.\n";
}

/* foreach example 4: multi-dimensional arrays */

$a[0][0] = "a";
$a[0][1] = "b";
$a[1][0] = "y";
$a[1][1] = "z";

foreach($a as $v1) {
    foreach ($v1 as $v2) {
        print "$v2\n";
    }
}

/* foreach example 5: dynamic arrays */

foreach(array(1, 2, 3, 4, 5) as $v) {
    print "$v\n";
}
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect1>

  <sect1 id="control-structures.break">
   <title><literal>break</literal></title>
   <simpara>
    <literal>break</literal> ends execution of the current
    <literal>for</literal>, <literal>foreach</literal>
    <literal>while</literal>, <literal>do..while</literal> or
    <literal>switch</literal> structure.
   </simpara>
   <simpara>
    <literal>break</literal> accepts an optional numeric argument
    which tells it how many nested enclosing structures are to be
    broken out of.
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
$arr = array ('one', 'two', 'three', 'four', 'stop', 'five');
while (list (, $val) = each ($arr)) {
    if ($val == 'stop') {
        break;    /* You could also write 'break 1;' here. */
    }
    echo "$val<br>\n";
}

/* Using the optional argument. */

$i = 0;
while (++$i) {
    switch ($i) {
    case 5:
        echo "At 5<br>\n";
        break 1;  /* Exit only the switch. */
    case 10:
        echo "At 10; quitting<br>\n";
        break 2;  /* Exit the switch and the while. */
    default:
        break;
    }
}
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect1>

  <sect1 id="control-structures.continue">
   <title><literal>continue</literal></title>
   <simpara>
    <literal>continue</literal> is used within looping structures to
    skip the rest of the current loop iteration and continue execution
    at the beginning of the next iteration.
   </simpara>
   <simpara>
    <literal>continue</literal> accepts an optional numeric argument
    which tells it how many levels of enclosing loops it should skip
    to the end of.
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
while (list ($key, $value) = each ($arr)) {
    if (!($key % 2)) { // skip odd members
        continue;
    }
    do_something_odd ($value);
}

$i = 0;
while ($i++ < 5) {
    echo "Outer<br>\n";
    while (1) {
        echo "&nbsp;&nbsp;Middle<br>\n";
        while (1) {
            echo "&nbsp;&nbsp;Inner<br>\n";
            continue 3;
        }
        echo "This never gets output.<br>\n";
    }
    echo "Neither does this.<br>\n";
}
]]>
     </programlisting>
     </informalexample>
    </para>
  </sect1>

  <sect1 id="control-structures.switch">
   <title><literal>switch</literal></title>
   <simpara>
    The <literal>switch</literal> statement is similar to a series of
    IF statements on the same expression.  In many occasions, you may
    want to compare the same variable (or expression) with many
    different values, and execute a different piece of code depending
    on which value it equals to.  This is exactly what the
    <literal>switch</literal> statement is for.
   </simpara>
   <para>
    The following two examples are two different ways to write the
    same thing, one using a series of <literal>if</literal>
    statements, and the other using the <literal>switch</literal>
    statement:
    <informalexample>
     <programlisting role="php">
<![CDATA[
if ($i == 0) {
    print "i equals 0";
}
if ($i == 1) {
    print "i equals 1";
}
if ($i == 2) {
    print "i equals 2";
}

switch ($i) {
    case 0:
        print "i equals 0";
        break;
    case 1:
        print "i equals 1";
        break;
    case 2:
        print "i equals 2";
        break;
}
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    It is important to understand how the <literal>switch</literal>
    statement is executed in order to avoid mistakes.  The
    <literal>switch</literal> statement executes line by line
    (actually, statement by statement).  In the beginning, no code is
    executed.  Only when a <literal>case</literal> statement is found
    with a value that matches the value of the
    <literal>switch</literal> expression does PHP begin to execute the
    statements.  PHP continues to execute the statements until the end
    of the <literal>switch</literal> block, or the first time it sees
    a <literal>break</literal> statement.  If you don't write a
    <literal>break</literal> statement at the end of a case's
    statement list, PHP will go on executing the statements of the
    following case.  For example:
    <informalexample>
     <programlisting role="php">
<![CDATA[
switch ($i) {
    case 0:
        print "i equals 0";
    case 1:
        print "i equals 1";
    case 2:
        print "i equals 2";
}
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    Here, if $i equals to 0, PHP would execute all of the print
    statements!  If $i equals to 1, PHP would execute the last two
    print statements, and only if $i equals to 2, you'd get the
    'expected' behavior and only 'i equals 2' would be displayed.  So,
    it's important not to forget <literal>break</literal> statements
    (even though you may want to avoid supplying them on purpose under
    certain circumstances).
   </simpara>
   <simpara>
    In a <literal>switch</literal> statement, the condition is
    evaluated only once and the result is compared to each
    <literal>case</literal> statement. In an <literal>elseif</literal>
    statement, the condition is evaluated again. If your condition is
    more complicated than a simple compare and/or is in a tight loop,
    a <literal>switch</literal> may be faster.
   </simpara>
   <para>
    The statement list for a case can also be empty, which simply
    passes control into the statement list for the next case.
    <informalexample>
     <programlisting role="php">
<![CDATA[
switch ($i) {
    case 0:
    case 1:
    case 2:
        print "i is less than 3 but not negative";
        break;
    case 3:
        print "i is 3";
}
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    A special case is the default case.  This case matches anything
    that wasn't matched by the other cases, and should be the last
    <literal>case</literal> statement.  For example:
    <informalexample>
     <programlisting role="php">
<![CDATA[
switch ($i) {
    case 0:
        print "i equals 0";
        break;
    case 1:
        print "i equals 1";
        break;
    case 2:
        print "i equals 2";
        break;
    default:
        print "i is not equal to 0, 1 or 2";
}
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    The <literal>case</literal> expression may be any expression that
    evaluates to a simple type, that is, integer or floating-point
    numbers and strings.  Arrays or objects cannot be used here unless
    they are dereferenced to a simple type.
   </para>
   <para>
    The alternative syntax for control structures is supported with
    switches. For more information, see <link
    linkend="control-structures.alternative-syntax">Alternative syntax
    for control structures</link> .
    <informalexample>
     <programlisting role="php">
<![CDATA[
switch ($i):
    case 0:
        print "i equals 0";
        break;
    case 1:
        print "i equals 1";
        break;
    case 2:
        print "i equals 2";
        break;
    default:
        print "i is not equal to 0, 1 or 2";
endswitch;
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect1>

  <sect1 id="control-structures.declare">
   <title><literal>declare</literal></title>
   <para>
    The <literal>declare</literal> construct is used to
    set execution directives for a block of code.
    The syntax of <literal>declare</literal> is similar to
    the syntax of other flow control constructs:
    <informalexample>
     <programlisting>
<![CDATA[
declare (directive) statement
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    The <literal>directive</literal> section allows the
    behavior of the <literal>declare</literal> block to
    be set.
    Currently only one directive is recognized: the
    <literal>ticks</literal> directive. (See below for more
    information on the
    <link linkend="control-structures.declare.ticks">ticks</link>
    directive)
   </para>
   <para>
    The <literal>statement</literal> part of the
    <literal>declare</literal> block will be executed - how
    it is executed and what side-effects occur during execution
    may depend on the directive set in the
    <literal>directive</literal> block.
   </para>
   <sect2 id="control-structures.declare.ticks">
    <title>Ticks</title>
    <para>A tick is an event that occurs for every
    <replaceable>N</replaceable> low-level statements executed
    by the parser within the <literal>declare</literal> block.
    The value for <replaceable>N</replaceable> is specified
    using <literal>ticks=<replaceable>N</replaceable></literal>
    within the <literal>declare</literal> blocks's
    <literal>directive</literal> section.
   </para>
   <para>
    The event(s) that occurs on each tick is specified using the
    <function>register_tick_function</function>. See the example 
    below for more details. Note that more than one event can occur
    for each tick.
   </para>
   <para>
    <example>
     <title>Profile a section of PHP code</title>
     <programlisting role="php">
<![CDATA[
<?php
// A function that records the time when it is called
function profile ($dump = FALSE)
{
    static $profile;

    // Return the times stored in profile, then erase it
    if ($dump) {
        $temp = $profile;
        unset ($profile);
        return ($temp);
    }

    $profile[] = microtime ();
}

// Set up a tick handler
register_tick_function("profile");

// Initialize the function before the declare block
profile ();

// Run a block of code, throw a tick every 2nd statement
declare (ticks=2) {
    for ($x = 1; $x < 50; ++$x) {
        echo similar_text (md5($x), md5($x*$x)), "<br />;";
    }
}

// Display the data stored in the profiler
print_r (profile (TRUE));
?>
]]>
     </programlisting>
    </example>
    The example profiles the PHP code within the 'declare'
    block, recording the time at which every second low-level
    statement in the block was executed. This information can
    then be used to find the slow areas within particular
    segments of code. This process can be performed using other
    methods: using ticks is more convenient and easier to
    implement.
   </para>
   <simpara>
    Ticks are well suited for debugging, implementing simple
    multitasking, backgrounded I/O and many other tasks.
   </simpara>
   <simpara>
    See also <function>register_tick_function</function> and
    <function>unregister_tick_function</function>.
   </simpara>
   </sect2>
  </sect1>

  <sect1 id="function.return">
   <title>return</title>
   <simpara>
    If called from within a function, the <function>return</function>
    statement immediately ends execution of the current function, and
    returns its argument as the value of the function
    call. <function>return</function> will also end the execution of
    an <function>eval</function> statement or script file.
   </simpara>
   <simpara>
    If called from the global scope, then execution of the current
    script file is ended. If the current script file was
    <function>include</function>ed or <function>require</function>ed,
    then control is passed back to the calling file. Furthermore, if
    the current script file was <function>include</function>ed, then
    the value given to <function>return</function> will be returned as
    the value of the <function>include</function> call. If
    <function>return</function> is called from within the main script
    file, then script execution ends. If the current script file was
    named by the <link
    linkend="ini.auto-prepend-file">auto_prepend_file</link> or <link
    linkend="ini.auto-append-file">auto_append_file</link>
    configuration options in <link linkend="configuration.file">the
    configuration file</link>, then that script file's execution is
    ended.
   </simpara>
   <simpara>For more information, see <link
   linkend="functions.returning-values">Returning values</link>.
   </simpara>
   <note>
    <simpara>
     Note that since <function>return</function> is a language
     construct and not a function, the parentheses surrounding its
     arguments are <emphasis>not</emphasis> required--in fact, it is
     more common to leave them out than to use them, although it
     doesn't matter one way or the other.
    </simpara>
   </note>
  </sect1>


 <sect1 id="function.require">
   <title><function>require</function></title>

   <simpara>
    The <function>require</function> statement includes and evaluates
    the specific file.
   </simpara>
   <simpara>
     <function>require</function> includes and evaluates a specific file.  
     Detailed information on how this inclusion works is described in the 
     documentation for <function>include</function>.
   </simpara>
   <simpara>
     <function>require</function> and <function>include</function> 
     are identical in every way except how they handle failure.  
     <function>include</function> produces a 
     <link linkend="internal.e-warning">Warning</link> while 
     <function>require</function> results in a <link linkend="internal.e-error">
     Fatal Error</link>.  In other words, don't hesitate to use 
     <function>require</function> if you want a missing file to halt processing 
     of the page.  <function>include</function> does not behave this way, the
     script will continue regardless.  Be sure to have an appropriate
     <link linkend="ini.include-path">include_path</link> setting as well.
   </simpara>
   <para>
    <example>
     <title>Basic <function>require</function> examples</title>
     <programlisting role="php">
<![CDATA[
<?php

require 'prepend.php';

require $somefile;

require ('somefile.txt');

?>
]]>
     </programlisting>
   </example>
   </para>
   <simpara>
    See the <function>include</function> documentation for more examples.
   </simpara>
   <note>
    <simpara>
     Prior to PHP 4.0.2, the following applies: <function>require</function> will 
     always attempt to read the target file, even if the line it's on never executes.
     The conditional statement won't affect <function>require</function>. However, 
     if the line on which the <function>require</function> occurs is not executed, 
     neither will any of the code in the target file be executed.  Similarly, looping 
     structures do not affect the behaviour of <function>require</function>. Although 
     the code contained in the target file is still subject to the loop, the 
     <function>require</function> itself happens only once.
    </simpara>
   </note>
   &warn.no-win32-fopen-wrapper;
   <simpara>
    See also <function>include</function>, <function>require_once</function>,
    <function>include_once</function>, <function>eval</function>, 
    <function>file</function>, <function>readfile</function>, 
    <function>virtual</function> and <link linkend="ini.include-path">include_path</link>.
   </simpara>
  </sect1>

 <sect1 id="function.include">
   <title><function>include</function></title>
   <simpara>
    The <function>include</function> statement includes and evaluates
    the specified file.
   </simpara>
   <simpara>
     The documentation below also applies to <function>require</function>.
     The two constructs are identical in every way except how they handle
     failure.  <function>include</function> produces a 
     <link linkend="internal.e-warning">Warning</link> while <function>require</function>
     results in a <link linkend="internal.e-error">Fatal Error</link>.
     In other words, use <function>require</function> if you want 
     a missing file to halt processing of the page.  <function>include</function> does 
     not behave this way, the script will continue regardless.  Be sure to have an 
     appropriate <link linkend="ini.include-path">include_path</link> setting as well.
   </simpara>
   <simpara>
     When a file is included, the code it contains inherits the
     <link linkend="language.variables.scope">variable scope</link> of the
     line on which the include occurs.  Any variables available at that line
     in the calling file will be available within the called file, from that
     point forward.
   </simpara>
   <para>
     <example>
      <title>Basic <function>include</function> example</title>
      <programlisting role="php">
<![CDATA[
vars.php
<?php

$color = 'green';
$fruit = 'apple';

?>

test.php
<?php

echo "A $color $fruit"; // A

include 'vars.php';

echo "A $color $fruit"; // A green apple

?>
]]>
      </programlisting>
     </example>
   </para>
   <simpara>
     If the include occurs inside a function within the calling file,
     then all of the code contained in the called file will behave as
     though it had been defined inside that function.  So, it will follow
     the variable scope of that function.
   </simpara>
   <para>
     <example>
     <title>Including within functions</title>
      <programlisting role="php">
<![CDATA[
<?php

function foo()
{
global $color;

    include 'vars.php';

    echo "A $color $fruit";
}

/* vars.php is in the scope of foo() so     *
 * $fruit is NOT available outside of this  *
 * scope.  $color is because we declared it *
 * as global.                               */

foo();                    // A green apple
echo "A $color $fruit";   // A green

?>
]]>
     </programlisting>
    </example>
   </para>
   <simpara>
     When a file is included, parsing drops out of PHP mode and
     into HTML mode at the beginning of the target file, and resumes
     again at the end.  For this reason, any code inside the target
     file which should be executed as PHP code must be enclosed within
     <link linkend="language.basic-syntax.phpmode">valid PHP start
     and end tags</link>.
   </simpara>
   <simpara>
     If "<link linkend="ini.allow-url-fopen">URL fopen wrappers</link>"
     are enabled in PHP (which they are in the default configuration),
     you can specify the file to be included using an URL (via HTTP)
     instead of a local pathname.  If the target server interprets
     the target file as PHP code, variables may be passed to the included
     file using an URL request string as used with HTTP GET.  This is
     not strictly speaking the same thing as including the file and having
     it inherit the parent file's variable scope; the script is actually
     being run on the remote server and the result is then being
     included into the local script.
   </simpara>
   &warn.no-win32-fopen-wrapper;
   <para>
    <example>
     <title><function>include</function> through HTTP</title>
     <programlisting role="php">
<![CDATA[
<?php

/* This example assumes that www.example.com is configured to parse .php *
 * files and not .txt files. Also, 'Works' here means that the variables *
 * $foo and $bar are available within the included file.                 */

// Won't work; file.txt wasn't handled by www.example.com as PHP
include 'http://www.example.com/file.txt?foo=1&bar=2';

// Won't work; looks for a file named 'file.php?foo=1&bar=2' on the
// local filesystem.
include 'file.php?foo=1&bar=2';

// Works.
include 'http://www.example.com/file.php?foo=1&bar=2';

$foo = 1;
$bar = 2;
include 'file.txt';  // Works.
include 'file.php';  // Works.

?>
]]>
     </programlisting>
    </example>
     See also <link linkend="features.remote-files">Remote files</link>,
     <function>fopen</function> and <function>file</function> for related 
     information.
   </para>
   <para>
     Because <function>include</function> and <function>require</function>
     are special language constructs, you must enclose them within a statement
     block if it's inside a conditional block.
   </para>
   <para>
    <example>
     <title>include() and conditional blocks</title>
     <programlisting role="php">
<![CDATA[
<?php

// This is WRONG and will not work as desired.
if ($condition)
    include $file;
else
    include $other;


// This is CORRECT.
if ($condition) {
    include $file;
} else {
    include $other;
}

?>
]]>
     </programlisting>
    </example>
   </para>
   <simpara>
    Handling Returns: It is possible to execute a <function>return</function> 
    statement inside an included file in order to terminate processing in that 
    file and return to the script which called it.  Also, it's possible to return 
    values from included files.  You can take the value of the include call as 
    you would a normal function.
   </simpara>
   <note>
    <simpara>
     In PHP 3, the return may not appear inside a block unless it's
     a function block, in which case the <function>return</function> applies 
     to that function and not the whole file.
    </simpara>
   </note>
   <para>
    <example>
     <title><function>include</function> and the <function>return</function> statement</title>
      <programlisting role="php">
<![CDATA[
return.php
<?php

$var = 'PHP';

return $var;

?>

noreturn.php
<?php

$var = 'PHP';

?>

testreturns.php
<?php

$foo = include 'return.php';

echo $foo; // prints 'PHP'

$bar = include 'noreturn.php';

echo $bar; // prints 1

?>
]]>
      </programlisting>
    </example>
   </para>
   <simpara>
    <literal>$bar</literal> is the value <literal>1</literal> because the include 
    was successful.  Notice the difference between the above examples.  The first uses 
    <function>return</function> within the included file while the other does not.  
    A few other ways to "include" files into variables are with 
    <function>fopen</function>, <function>file</function> or by using 
    <function>include</function> along with 
    <link linkend="ref.outcontrol">Output Control Functions</link>.
   </simpara>

   <simpara>
    See also <function>require</function>, <function>require_once</function>,
    <function>include_once</function>, <function>readfile</function>,
    <function>virtual</function>, and
    <link linkend="ini.include-path">include_path</link>.
   </simpara>

</sect1>

 <sect1 id="function.require-once">
   <title><function>require_once</function></title>
   <para>
    The <function>require_once</function> statement includes and evaluates
    the specified file during the execution of the script.
    This is a behavior similar to the <function>require</function> statement,
    with the only difference being that if the code from a file has already
    been included, it will not be included again.  See the documentation for
    <function>require</function> for more information on how this statement 
    works.
   </para>
   <para>
    <function>require_once</function> should be used in cases where
    the same file might be included and evaluated more than once during a
    particular execution of a script, and you want to be sure that it is
    included exactly once to avoid problems with function redefinitions,
    variable value reassignments, etc.
   </para>
   <para>
     For examples on using <function>require_once</function> and
     <function>include_once</function>, look at the 
     <ulink url="&url.php.pear;">PEAR</ulink> code included in the 
     latest PHP source code distributions.
   </para>
   <note>
    <para>
     <function>require_once</function> was added in PHP 4.0.1pl2
    </para>
   </note>
   <note>
    <para>
     Be aware, that the behaviour of <function>require_once</function>
     and <function>include_once</function> may not be what you expect
     on a non case sensitive operating system (such as Windows).
     <example>
      <title><function>require_once</function> is case sensitive</title>
      <programlisting role="php">
<![CDATA[
require_once("a.php"); // this will include a.php
require_once("A.php"); // this will include a.php again on Windows!
]]>
       </programlisting>
     </example>
    </para>
   </note>
   &warn.no-win32-fopen-wrapper;
   <para>
    See also: <function>require</function>,
    <function>include</function>, <function>include_once</function>,
    <function>get_required_files</function>,
    <function>get_included_files</function>, <function>readfile</function>,
    and <function>virtual</function>.
   </para>
  </sect1>

 <sect1 id="function.include-once">
   <title><function>include_once</function></title>
   <para>
    The <function>include_once</function> statement includes and evaluates
    the specified file during the execution of the script.
    This is a behavior similar to the <function>include</function> statement,
    with the only difference being that if the code from a file has already
    been included, it will not be included again.  As the name suggests, 
    it will be included just once.
   </para>
   <para>
    <function>include_once</function> should be used in cases where 
    the same file might be included and evaluated more than once during a
    particular execution of a script, and you want to be sure that it is
    included exactly once to avoid problems with function redefinitions,
    variable value reassignments, etc.
   </para>
   <para>
     For more examples on using <function>require_once</function> and
     <function>include_once</function>, look at the
     <ulink url="&url.php.pear;">PEAR</ulink> code included in the latest
     PHP source code distributions.
   </para>
   <note>
    <para>
     <function>include_once</function> was added in PHP 4.0.1pl2
    </para>
   </note>
   <note>
    <para>
     Be aware, that the behaviour of <function>include_once</function>
     and <function>require_once</function> may not be what you expect
     on a non case sensitive operating system (such as Windows).
     <example>
      <title><function>include_once</function> is case sensitive</title>
      <programlisting role="php">
<![CDATA[
include_once("a.php"); // this will include a.php
include_once("A.php"); // this will include a.php again on Windows!
]]>
       </programlisting>
     </example>
    </para>
   </note>
   &warn.no-win32-fopen-wrapper;
   <para>
    See also <function>include</function>,
    <function>require</function>, <function>require_once</function>,
    <function>get_required_files</function>,
    <function>get_included_files</function>, <function>readfile</function>,
    and <function>virtual</function>.
   </para>
  </sect1>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
