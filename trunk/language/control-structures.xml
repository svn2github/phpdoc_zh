<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.11 $ -->
<!-- $Author: dallas $ -->
<!-- EN-Revision: 1.66 Maintainer: dallas Status: ready -->
 <chapter id="control-structures">
  <title>流程控制</title>

  <simpara>
   任何 PHP 脚本都是由一系列语句构成的。一条语句可以是一个赋值语句，一个函数调用，一个循环，甚至一个什么也不做的（空语句）条件语句。语句通常以分号结束。此外，还可以用花括号将一组语句封装成一个语句组。语句组本身可以当作是一行语句。本章讲述了各种语句类型。
  </simpara>

  <sect1 id="control-structures.if">
   <title><literal>if</literal></title>
   <para>
    <literal>if</literal> 结构是很多语言包括 PHP 在内最重要的特性之一，它允许按照条件执行代码片段。PHP 的 <literal>if</literal> 结构和 C 语言相似：
    <informalexample>
     <programlisting>
<![CDATA[
if (expr)
    statement
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    如同在<link linkend="language.expressions">表达式</link>一章中定义的，<replaceable>expr</replaceable> 按照布尔求值。如果 <replaceable>expr</replaceable> 的值为 &true;，PHP 将执行 <replaceable>statement</replaceable>，如果值为 &false; － 将忽略 <replaceable>statement</replaceable>。有关哪些值被视为 &false; 的更多信息参见<link linkend="language.types.boolean.casting">“转换为布尔值”</link>一节。
   </simpara>
   <para>
    如果 <replaceable>$a</replaceable> 大于 <replaceable>$b</replaceable>，则以下例子将显示 <computeroutput>a is bigger
    than b</computeroutput>：
    <informalexample>
     <programlisting role="php">
<![CDATA[
if ($a > $b)
    print "a is bigger than b";
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    经常需要按照条件执行不止一条语句，当然并不需要给每条语句都加上一个 <literal>if</literal> 子句。可以将这些语句放入语句组中。例如，如果 <replaceable>$a</replaceable> 大于 <replaceable>$b</replaceable>，以下代码将显示 <computeroutput>a 
is bigger than b</computeroutput> 并且将 <replaceable>$a</replaceable> 的值赋给 <replaceable>$b</replaceable>：
    <informalexample>
     <programlisting role="php">
<![CDATA[
if ($a > $b) {
    print "a is bigger than b";
    $b = $a;
}
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    <literal>if</literal> 语句可以无限层地嵌套在其它 <literal>if</literal> 语句中，这给程序的不同部分的条件执行提供了充分的弹性。
   </simpara>
  </sect1>

  <sect1 id="control-structures.else">
   <title><literal>else</literal></title>
   <para>
    经常需要在满足某个条件时执行一条语句，而在不满足该条件时执行其它语句，这正是 <literal>else</literal> 的功能。<literal>else</literal> 延伸了 <literal>if</literal> 语句，可以在 <literal>if</literal> 语句中的表达式的值为 &false; 时执行语句。例如以下代码在 <replaceable>$a</replaceable> 大于 <replaceable>$b</replaceable> 时显示 <computeroutput>a
    is bigger than b</computeroutput>，反之则显示 <computeroutput>a is NOT bigger than b</computeroutput>：
    <informalexample>
     <programlisting role="php">
<![CDATA[
if ($a > $b) {
    print "a is bigger than b";
} else {
    print "a is NOT bigger than b";
}
]]>
     </programlisting>
    </informalexample>

    <literal>else</literal> 语句仅在 <literal>if</literal> 以及 <literal>elseif</literal>（如果有的话）语句中的表达式的值为 &false; 时执行（参见 <link
    linkend="control-structures.elseif">elseif</link>）。

   </para>
  </sect1>

  <sect1 id="control-structures.elseif">
   <title><literal>elseif</literal></title>
   <para>
    <literal>elseif</literal>，和此名称暗示的一样，是 <literal>if</literal> 和 <literal>else</literal> 的组合。和 <literal>else</literal> 一样，它延伸了 <literal>if</literal> 语句，可以在原来的 <literal>if</literal> 表达式值为 &false; 时执行不同语句。但是和 <literal>else</literal> 不一样的是，它仅在 <literal>elseif</literal> 的条件表达式值为 &true; 时执行语句。例如以下代码将根据条件分别显示 <computeroutput>a
    is bigger than b</computeroutput>，<computeroutput>a equal to b</computeroutput> 或者 <computeroutput>a
    is smaller than b</computeroutput>：
    <informalexample>
     <programlisting role="php">
<![CDATA[
if ($a > $b) {
    print "a is bigger than b";
} elseif ($a == $b) {
    print "a is equal to b";
} else {
    print "a is smaller than b";
}
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    在同一个 <literal>if</literal> 结构中可以有多个 <literal>elseif</literal> 语句。第一个表达式值为 &true; 的 <literal>elseif</literal> 语句（如果有的话）将会执行。在 PHP 中，也可以写成“else if”（两个单词），它和“elseif”（一个单词）的行为完全一样。句法分析的含义有少许区别（如果你熟悉 C 语言的话，这是同样的行为），但是底线是两者会产生完全一样的行为。
   </simpara>
   <simpara>
    <literal>elseif</literal> 的语句仅在之前的 <literal>if</literal> 或 <literal>elseif</literal> 的表达式值为 &false;，而当前的 <literal>elseif</literal> 表达式值为 &true; 时执行。
   </simpara>
  </sect1>

  <sect1 id="control-structures.alternative-syntax">
   <title>流程控制的替代语法</title>
   <para>
    PHP 提供了一些流程控制的替代语法，包括 <literal>if</literal>，<literal>while</literal>，<literal>for</literal>，<literal>foreach</literal> 和 <literal>switch</literal>。替代语法的基本形式是把左花括号（{）换成冒号（:），把右花括号（}）分别换成 <literal>endif;</literal>，<literal>endwhile;</literal>，<literal>endfor;</literal>，<literal>endforeach;</literal> 以及 <literal>endswitch;</literal>。
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php if ($a == 5): ?>
A is equal to 5
<?php endif; ?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    在上面的例子中，HTML 内容“A is equal to 5”用替代语法嵌套在 <literal>if</literal> 语句中。该 HTML 的内容仅在 $a 等与 5 时显示。
   </simpara>
   <para>
    替代语法同样可以用在 <literal>else</literal> 和 <literal>elseif</literal> 中。下面是一个包括 <literal>elseif</literal> 和 <literal>else</literal> 的 <literal>if</literal> 结构用替代语法格式写的例子：
    <informalexample>
     <programlisting role="php">
<![CDATA[
if ($a == 5):
    print "a equals 5";
    print "...";
elseif ($a == 6):
    print "a equals 6";
    print "!!!";
else:
    print "a is neither 5 nor 6";
endif;
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    更多例子参见 <link linkend="control-structures.while">while</link>，<link
    linkend="control-structures.for">for</link> 和 <link linkend="control-structures.if">if</link>。
   </para>
  </sect1>

  <sect1 id="control-structures.while">
   <title><literal>while</literal></title>
   <para>
    <literal>while</literal> 循环是 PHP 中最简单的循环类型。它和 C 语言中的 <literal>while</literal> 表现得一样。<literal>while</literal> 语句的基本格式是：
    <informalexample>
     <programlisting>
<![CDATA[
while (expr) statement
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    <literal>while</literal> 语句的含意很简单，它告诉 PHP 只要<literal>while</literal> 表达式的值为 &true; 就重复执行嵌套中的循环语句。表达式的值在每次开始循环时检查，所以即使这个值在循环语句中改变了，语句也不会停止执行，直到本次循环结束。有时候如果 <literal>while</literal> 表达式的值一开始就是 &false;，则循环语句一次都不会执行。
   </simpara>
   <para>
    和 <literal>if</literal> 语句一样，可以在 <literal>while</literal> 循环中用花括号括起一个语句组，或者用替代语法：
    <informalexample>
     <programlisting>
<![CDATA[
while (expr): statement ... endwhile;
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    下面两个例子完全一样，都显示数字 1 到 10：
    <informalexample>
     <programlisting role="php">
<![CDATA[
/* example 1 */

$i = 1;
while ($i <= 10) {
    print $i++;  /* the printed value would be
                    $i before the increment
                    (post-increment) */
}

/* example 2 */

$i = 1;
while ($i <= 10):
    print $i;
    $i++;
endwhile;
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect1>

  <sect1 id="control-structures.do.while">
   <title><literal>do..while</literal></title>
   <simpara>
    <literal>do..while</literal> 和 <literal>while</literal> 循环非常相似，区别在于表达式的值是在每次循环结束时检查而不是开始时。和正规的 <literal>while</literal> 循环主要的区别是 <literal>do..while</literal> 的循环语句保证会执行一次（表达式的真值在每次循环结束后检查），然而在正规的 <literal>while</literal> 循环中就不一定了（表达式真值在循环开始时检查，如果一开始就为 &false; 则整个循环立即终止）。
   </simpara>
   <para>
    <literal>do..while</literal> 循环只有一种语法：

    <informalexample>
     <programlisting role="php">
<![CDATA[
$i = 0;
do {
   print $i;
} while ($i>0);
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
     以上循环将正好运行一次，因为经过第一次循环后，当检查表达式的真值时，其值为 &false;（$i 不大于 0）而导致循环终止。
   </simpara>
   <para>
    资深的 C 语言用户可能熟悉另一种不同的 <literal>do..while</literal> 循环用法，把语句放在 <literal>do..while</literal>(0) 之中，在循环内部用 <link linkend="control-structures.break"><literal>break</literal></link> 语句来结束执行循环。以下代码片段示范了此方法：
    <informalexample>
     <programlisting role="php">
<![CDATA[
do {
    if ($i < 5) {
        print "i is not big enough";
        break;
    }
    $i *= $factor;
    if ($i < $minimum_limit) {
        break;
    }
    print "i is ok";

     ...process i...

} while(0);
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    如果你还不能立刻理解也不用担心。即使不用此“特性”你也照样可以写出强大的代码来。
   </simpara>
  </sect1>

  <sect1 id="control-structures.for">
   <title><literal>for</literal></title>
   <para>
    <literal>for</literal> 循环是 PHP 中最复杂的循环结构。它的行为和 C 语言的相似。 <literal>for</literal> 循环的语法是：
    <informalexample>
     <programlisting>
<![CDATA[
for (expr1; expr2; expr3) statement
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    第一个表达式（<replaceable>expr1</replaceable>）在循环开始前无条件求值一次。
   </simpara>
   <simpara>
    <replaceable>expr2</replaceable> 在每次循环开始前求值。如果值为 &true;，则继续循环，执行嵌套的循环语句。如果值为 &false;，则终止循环。
   </simpara>
   <simpara>
    <replaceable>expr3</replaceable> 在每次循环之后被求值（执行）。
   </simpara>
   <simpara>
    每个表达式都可以为空。<replaceable>expr2</replaceable> 为空意味着将无限循环下去（和 C 一样，PHP 认为其值为 &true;）。这可能不想你想象中那样没有用，因为你经常会希望用 <link
    linkend="control-structures.break"><literal>break</literal></link> 语句来结束循环而不是用 <literal>for</literal> 的表达式真值判断。
   </simpara>
   <para>
    考虑以下的例子。它们都显示数字 1 到 10：
    <informalexample>
     <programlisting role="php">
<![CDATA[
/* example 1 */

for ($i = 1; $i <= 10; $i++) {
    print $i;
}

/* example 2 */

for ($i = 1;;$i++) {
    if ($i > 10) {
        break;
    }
    print $i;
}

/* example 3 */

$i = 1;
for (;;) {
    if ($i > 10) {
        break;
    }
    print $i;
    $i++;
}

/* example 4 */

for ($i = 1; $i <= 10; print $i, $i++);
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    当然，第一个例子看上去最正常（或者第四个），但你可能会发现在 <literal>for</literal> 循环中用空的表达式在很多场合下会很方便。
   </simpara>
   <para>
    PHP 也支持用冒号的 <literal>for</literal> 循环的替代语法。
    <informalexample>
     <programlisting>
<![CDATA[
for (expr1; expr2; expr3): statement; ...; endfor;
]]>
     </programlisting>
     </informalexample>
   </para>
   <para>
    其它语言具有 <literal>foreach</literal> 语句来遍历数组或散列表，PHP 也行（见 <link
    linkend="control-structures.foreach">foreach</link>）。在 PHP 3 中，可以结合 <function>list</function> 和 <function>each</function> 函数用 <link linkend="control-structures.while">while</link> 循环来达到同样效果。例子见这些函数的文档。
   </para>

  </sect1>

  <sect1 id="control-structures.foreach">
   <title><literal>foreach</literal></title>
   <para>
    PHP 4（不是 PHP 3）包括了 <literal>foreach</literal> 结构，和 Perl 以及其他语言很像。这只是一种遍历数组简便方法。<literal>foreach</literal> 仅能用于数组，当试图将其用于其它数据类型或者一个未初始化的变量时会产生错误。有两种语法，第二种比较次要但却是第一种的有用的扩展。
    <informalexample>
     <programlisting>
<![CDATA[
foreach(array_expression as $value) statement
foreach(array_expression as $key => $value) statement
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    第一种格式遍历给定的 <literal>array_expression</literal> 数组。每次循环中，当前单元的值被赋给 <literal>$value</literal> 并且数组内部的指针向前移一步（因此下一次循环中将会得到下一个单元）。
   </simpara>
   <simpara>
    第二种格式做同样的事，只除了当前单元的键值也会在每次循环中被赋给变量 <literal>$key</literal>。
   </simpara>
   <para>
    <note>
     <para>
      当 <literal>foreach</literal> 开始执行时，数组内部的指针会自动指向第一个单元。这意味着不需要在 <literal>foreach</literal> 循环之前调用 <function>reset</function>。
     </para>
    </note>
   </para>
   <para>
    <note>
     <para>
      此外注意 <literal>foreach</literal> 所操作的是指定数组的一个拷贝，而不是该数组本身。因此即使有
      <function>each</function> 的构造，原数组指针也没有变，数组单元的值也不受影响。
     </para>
    </note>
   </para>
   <note>
    <para>
     <literal>foreach</literal> 不支持用“@”来禁止错误信息的能力。
    </para>
   </note>
   <para>
    你可能注意到了以下的代码功能完全相同：
    <informalexample>
     <programlisting role="php">
<![CDATA[
reset ($arr);
while (list(, $value) = each ($arr)) {
    echo "Value: $value<br>\n";
}

foreach ($arr as $value) {
    echo "Value: $value<br>\n";
}
]]>
     </programlisting>
    </informalexample>
    以下代码功能也完全相同：
    <informalexample>
     <programlisting role="php">
<![CDATA[
reset ($arr);
while (list($key, $value) = each ($arr)) {
    echo "Key: $key; Value: $value<br>\n";
}

foreach ($arr as $key => $value) {
    echo "Key: $key; Value: $value<br>\n";
}
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    示范用法的更多例子：
    <informalexample>
     <programlisting role="php">
<![CDATA[
/* foreach example 1: value only */

$a = array (1, 2, 3, 17);

foreach ($a as $v) {
   print "Current value of \$a: $v.\n";
}

/* foreach example 2: value (with key printed for illustration) */

$a = array (1, 2, 3, 17);

$i = 0; /* for illustrative purposes only */

foreach($a as $v) {
    print "\$a[$i] => $v.\n";
    $i++;
}

/* foreach example 3: key and value */

$a = array (
    "one" => 1,
    "two" => 2,
    "three" => 3,
    "seventeen" => 17
);

foreach($a as $k => $v) {
    print "\$a[$k] => $v.\n";
}

/* foreach example 4: multi-dimensional arrays */

$a[0][0] = "a";
$a[0][1] = "b";
$a[1][0] = "y";
$a[1][1] = "z";

foreach($a as $v1) {
    foreach ($v1 as $v2) {
        print "$v2\n";
    }
}

/* foreach example 5: dynamic arrays */

foreach(array(1, 2, 3, 4, 5) as $v) {
    print "$v\n";
}
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect1>

  <sect1 id="control-structures.break">
   <title><literal>break</literal></title>
   <simpara>
    <literal>break</literal> 结束当前 <literal>for</literal>，<literal>foreach</literal>，<literal>while</literal>，<literal>do..while</literal> 或者 <literal>switch</literal> 结构的执行。
   </simpara>
   <simpara>
    <literal>break</literal> 可以接受一个可选的数字参数来决定跳出几重循环。
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
$arr = array ('one', 'two', 'three', 'four', 'stop', 'five');
while (list (, $val) = each ($arr)) {
    if ($val == 'stop') {
        break;    /* You could also write 'break 1;' here. */
    }
    echo "$val<br>\n";
}

/* Using the optional argument. */

$i = 0;
while (++$i) {
    switch ($i) {
    case 5:
        echo "At 5<br>\n";
        break 1;  /* Exit only the switch. */
    case 10:
        echo "At 10; quitting<br>\n";
        break 2;  /* Exit the switch and the while. */
    default:
        break;
    }
}
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect1>

  <sect1 id="control-structures.continue">
   <title><literal>continue</literal></title>
   <simpara>
    <literal>continue</literal> 在循环结构用用来跳过本次循环中剩余的代码并开始执行下一次循环。
   </simpara>
   <simpara>
    <literal>continue</literal> 接受一个可选的数字参数来决定跳过几重循环到循环结尾。
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
while (list ($key, $value) = each ($arr)) {
    if (!($key % 2)) { // skip odd members
        continue;
    }
    do_something_odd ($value);
}

$i = 0;
while ($i++ < 5) {
    echo "Outer<br>\n";
    while (1) {
        echo "&nbsp;&nbsp;Middle<br>\n";
        while (1) {
            echo "&nbsp;&nbsp;Inner<br>\n";
            continue 3;
        }
        echo "This never gets output.<br>\n";
    }
    echo "Neither does this.<br>\n";
}
]]>
     </programlisting>
     </informalexample>
    </para>
  </sect1>

  <sect1 id="control-structures.switch">
   <title><literal>switch</literal></title>
   <simpara>
    <literal>switch</literal> 语句和具有同样表达式的一系列的 IF 语句相似。很多场合下需要把同一个变量（或表达式）与很多不同的值比较，并根据它等于哪个值来执行不同的代码。这正是 <literal>switch</literal> 语句的用途。
   </simpara>
   <para>
    下面两个例子使用两种不同方法实现同样的事，一个用一系列 <literal>if</literal> 语句，另一个用 <literal>switch</literal> 语句：
    <informalexample>
     <programlisting role="php">
<![CDATA[
if ($i == 0) {
    print "i equals 0";
}
if ($i == 1) {
    print "i equals 1";
}
if ($i == 2) {
    print "i equals 2";
}

switch ($i) {
    case 0:
        print "i equals 0";
        break;
    case 1:
        print "i equals 1";
        break;
    case 2:
        print "i equals 2";
        break;
}
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    为避免错误，理解 <literal>switch</literal> 是怎样执行的非常重要。<literal>switch</literal> 语句一行接一行地执行（实际上是语句接语句）。开始时没有代码被执行。仅当一个 <literal>case</literal> 语句中的值和 <literal>switch</literal> 表达式的值匹配时 PHP 才开始执行语句，直到 <literal>switch</literal> 的程序段结束或者遇到第一个 <literal>break</literal> 语句为止。如果不在 case 的语句段最后写上 <literal>break</literal> 的话，PHP 将继续执行下一个 case 中的语句段。例如：
    <informalexample>
     <programlisting role="php">
<![CDATA[
switch ($i) {
    case 0:
        print "i equals 0";
    case 1:
        print "i equals 1";
    case 2:
        print "i equals 2";
}
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    这里如果 $i 等于 0，PHP 将执行所有的 print 语句！如果 $i 等于 1，PHP 将执行后面两条 print 语句。只有当 $i 等于 2 时，你才得到“预期”的结果 － 只显示“i equals 2”。所以，别忘了 <literal>break</literal> 语句就很重要（即使在某些情况下你故意想避免提供它们时）。
   </simpara>
   <simpara>
    在 <literal>switch</literal> 语句中条件只求值一次并用来和每个 <literal>case</literal> 语句比较。在 <literal>elseif</literal> 语句中条件会再次求值。如果条件比一个简单的比较要复杂得多或者在一个很多次的循环中，那么用 <literal>switch</literal> 语句可能会快一些。
   </simpara>
   <para>
    在一个 case 中的语句也可以为空，这样只不过将控制转移到了下一个 case 中的语句。
    <informalexample>
     <programlisting role="php">
<![CDATA[
switch ($i) {
    case 0:
    case 1:
    case 2:
        print "i is less than 3 but not negative";
        break;
    case 3:
        print "i is 3";
}
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    一个 case 的特例是 default。它匹配了任何和其它 case 都不匹配的情况，并且应该是最后一条 <literal>case</literal> 语句。例如：
    <informalexample>
     <programlisting role="php">
<![CDATA[
switch ($i) {
    case 0:
        print "i equals 0";
        break;
    case 1:
        print "i equals 1";
        break;
    case 2:
        print "i equals 2";
        break;
    default:
        print "i is not equal to 0, 1 or 2";
}
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    <literal>case</literal> 表达式可以是任何求值为简单类型的表达式，即整型或浮点数以及字符串。不能用数组或对象，除非它们被解除了到简单类型的引用。
   </para>
   <para>
    <literal>switch</literal> 支持替代语法的流程控制。更多信息见<link
    linkend="control-structures.alternative-syntax">流程控制的替代语法</link>一节。
    <informalexample>
     <programlisting role="php">
<![CDATA[
switch ($i):
    case 0:
        print "i equals 0";
        break;
    case 1:
        print "i equals 1";
        break;
    case 2:
        print "i equals 2";
        break;
    default:
        print "i is not equal to 0, 1 or 2";
endswitch;
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect1>

  <sect1 id="control-structures.declare">
   <title><literal>declare</literal></title>
   <para>
    The <literal>declare</literal> 结构用来设定一段代码的执行指令。<literal>declare</literal> 的语法和其它流程控制结构相似：
    <informalexample>
     <programlisting>
<![CDATA[
declare (directive) statement
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    <literal>directive</literal> 部分允许设定 <literal>declare</literal> 代码段的行为。目前只认识一个指令：<literal>ticks</literal>（更多信息见下面 <link linkend="control-structures.declare.ticks">ticks</link> 指令）。
   </para>
   <para>
    <literal>declare</literal> 代码段中的 <literal>statement</literal> 部分将被执行 － 怎样执行以及执行中有什么副作用出现取决于 <literal>directive</literal> 中设定的指令。
   </para>
   <sect2 id="control-structures.declare.ticks">
    <title>Ticks</title>
    <para>Tick 是一个在 <literal>declare</literal> 代码段中解释器每执行 <replaceable>N</replaceable> 条低级语句就会发生的事件。<replaceable>N</replaceable> 的值是在 <literal>declare</literal> 中的 <literal>directive</literal> 部分用 <literal>ticks=<replaceable>N</replaceable></literal> 来指定的。
   </para>
   <para>
    在每个 tick 中出现的事件是由 <function>register_tick_function</function> 来指定的。更多细节见下面的例子。注意每个 tick 中可以出现多个事件。
   </para>
   <para>
    <example>
     <title>评估一段 PHP 代码的执行时间</title>
     <programlisting role="php">
<![CDATA[
<?php
// A function that records the time when it is called
function profile ($dump = FALSE)
{
    static $profile;

    // Return the times stored in profile, then erase it
    if ($dump) {
        $temp = $profile;
        unset ($profile);
        return ($temp);
    }

    $profile[] = microtime ();
}

// Set up a tick handler
register_tick_function("profile");

// Initialize the function before the declare block
profile ();

// Run a block of code, throw a tick every 2nd statement
declare (ticks=2) {
    for ($x = 1; $x < 50; ++$x) {
        echo similar_text (md5($x), md5($x*$x)), "<br />;";
    }
}

// Display the data stored in the profiler
print_r (profile (TRUE));
?>
]]>
     </programlisting>
    </example>
    这个例子评估“declare”中的 PHP 代码，每执行两条低级语句就记录下时间。此信息可以用来找到一段特定代码中速度慢的部分。这个过程也可以用其它方法完成，但用 tick 更方便也更容易实现。
   </para>
   <simpara>
    Ticks 很适合用来做调试，以及实现简单的多任务，后台 I/O 和很多其它任务。
   </simpara>
   <simpara>
    参见 <function>register_tick_function</function> 和 <function>unregister_tick_function</function>。
   </simpara>
   </sect2>
  </sect1>

  <sect1 id="function.return">
   <title>return</title>
   <simpara>
    如果在一个函数中调用，<function>return</function> 语句立即结束此函数的执行并将它的参数作为函数的值返回。<function>return</function> 也会终止 <function>eval</function> 语句或者脚本文件的执行。
   </simpara>
   <simpara>
    如果在全局范围中调用，则当前脚本文件中止运行。如果当前脚本文件是被 <function>include</function> 的或者 <function>require</function> 的，则控制交回调用文件。此外，如果当前脚本是被 <function>include</function> 的，则 <function>return</function> 的值会被当作 <function>include</function> 调用的返回值。如果在主脚本文件中调用 <function>return</function>，则脚本中止运行。如果当前脚本文件是在<link 
    linkend="configuration.file">配置文件</link>中的 <link
    linkend="ini.auto-prepend-file">auto_prepend_file</link> 或者 <link
    linkend="ini.auto-append-file">auto_append_file</link> 所指定的，则此脚本文件中止运行。
   </simpara>
   <simpara>更多信息见<link linkend="functions.returning-values">返回值</link>。
   </simpara>
   <note>
    <simpara>
     注意既然 <function>return</function> 是语言结构而不是函数，并<emphasis>不</emphasis>需要用括号将参数括起来。事实上不用括号比用括号更常见，尽管用哪一种并无所谓。
    </simpara>
   </note>
  </sect1>


 <sect1 id="function.require">
   <title><function>require</function></title>

   <simpara>
    <function>require</function> 语句包括并运行指定文件。
   </simpara>
   <simpara>
     <function>require</function> 语句包括并运行指定文件。有关包括如何工作的详细信息见 <function>include</function> 的文档。
   </simpara>
   <simpara>
     <function>require</function> 和 <function>include</function> 除了怎样处理失败之外在各方面都完全一样。<function>include</function> 产生一个<link
     linkend="internal.e-warning">警告</link>而 <function>require</function> 则导致一个<link
     linkend="internal.e-error">致命错误</link>。换句话说，如果你想在丢失文件时停止处理页面，那就别犹豫了，用 <function>require</function> 吧。<function>include</function> 就不是这样，脚本会继续运行。同时也要确认设置了合适的<link
     linkend="ini.include-path">include_path</link>。
   </simpara>
   <para>
    <example>
     <title>基本的 <function>require</function> 例子</title>
     <programlisting role="php">
<![CDATA[
<?php

require 'prepend.php';

require $somefile;

require ('somefile.txt');

?>
]]>
     </programlisting>
   </example>
   </para>
   <simpara>
    更多例子参见 <function>include</function> 文档。
   </simpara>
   <note>
    <simpara>
     在 PHP 4.0.2 之前适用以下规则：<function>require</function> 总是会尝试读取目标文件，即使它所在的行根本就不会执行。条件语句不会影响 <function>require</function>。不过如果 <function>require</function> 所在的行没有执行，则目标文件中的代码也不会执行。同样，循环结构也不影响 <function>require</function> 的行为。尽管目标文件中包含的代码仍然是循环的主体，但 <function>require</function> 本身只会运行一次。
    </simpara>
   </note>
   &warn.no-win32-fopen-wrapper;
   <simpara>
    参见 <function>include</function>，<function>require_once</function>，<function>include_once</function>，<function>eval</function>，<function>file</function>，<function>readfile</function>，<function>virtual</function> 和 <link linkend="ini.include-path">include_path</link>。
   </simpara>
  </sect1>

 <sect1 id="function.include">
   <title><function>include</function></title>
   <simpara>
    The <function>include</function> 语句包括并运行指定文件。
   </simpara>
   <simpara>
     以下文档也适用于 <function>require</function>。这两种结构除了在如何处理失败之外完全一样。<function>include</function> 产生一个<link
     linkend="internal.e-warning">警告</link>而 <function>require</function> 则导致一个<link
     linkend="internal.e-error">致命错误</link>。换句话说，如果你想在遇到丢失文件时停止处理页面就用 <function>require</function>。<function>include</function> 就不是这样，脚本会继续运行。同时也要确认设置了合适的 <link
     linkend="ini.include-path">include_path</link>。
   </simpara>
   <simpara>
     当一个文件被包括时，其中所包含的代码继承了 include 所在行的<link
     linkend="language.variables.scope">变量范围</link>。从该处开始，调用文件在该行处可用的任何变量在被调用的文件中也都可用。
   </simpara>
   <para>
     <example>
      <title>基本的 <function>include</function> 例子</title>
      <programlisting role="php">
<![CDATA[
vars.php
<?php

$color = 'green';
$fruit = 'apple';

?>

test.php
<?php

echo "A $color $fruit"; // A

include 'vars.php';

echo "A $color $fruit"; // A green apple

?>
]]>
      </programlisting>
     </example>
   </para>
   <simpara>
     如果 include 出现于调用文件中的一个函数里，则被调用的文件中所包含的所有代码将表现得如同它们是在该函数内部定义的一样。所以它将遵循该函数的变量范围。
   </simpara>
   <para>
     <example>
     <title>函数中的包括</title>
      <programlisting role="php">
<![CDATA[
<?php

function foo()
{
global $color;

    include 'vars.php';

    echo "A $color $fruit";
}

/* vars.php is in the scope of foo() so     *
 * $fruit is NOT available outside of this  *
 * scope.  $color is because we declared it *
 * as global.                               */

foo();                    // A green apple
echo "A $color $fruit";   // A green

?>
]]>
     </programlisting>
    </example>
   </para>
   <simpara>
     当一个文件被包括时，语法解析器在目标文件的开头脱离 PHP 模式并进入 HTML 模式，到文件结尾处恢复。由于此原因，目标文件中应被当作 PHP 代码执行的任何代码都必须被包括在<link
     linkend="language.basic-syntax.phpmode">有效的 PHP 起始和结束标记</link>之中。
   </simpara>
   <simpara>
    如果“<link linkend="ini.allow-url-fopen">URL fopen wrappers</link>”在
    PHP 中被激活（默认配置），可以用 URL（通过 HTTP 或者其它支持的封装协议 －
    所支持的协议见 <xref linkend="wrappers"/>）而不是本地文件来指定要被包括的文件。如果目标服务器将目标文件作为 PHP 代码解释，则可以用适用于 HTTP GET 的 URL 请求字符串来向被包括的文件传递变量。严格的说这和包括一个文件并继承父文件的变量空间并不是一回事；该脚本文件实际上已经在远程服务器上运行了，而本地脚本则包括了其结果。
   </simpara>
   &warn.no-win32-fopen-wrapper;
   <para>
    <example>
     <title>通过 HTTP 进行的 <function>include</function></title>
     <programlisting role="php">
<![CDATA[
<?php

/* This example assumes that www.example.com is configured to parse .php *
 * files and not .txt files. Also, 'Works' here means that the variables *
 * $foo and $bar are available within the included file.                 */

// Won't work; file.txt wasn't handled by www.example.com as PHP
include 'http://www.example.com/file.txt?foo=1&bar=2';

// Won't work; looks for a file named 'file.php?foo=1&bar=2' on the
// local filesystem.
include 'file.php?foo=1&bar=2';

// Works.
include 'http://www.example.com/file.php?foo=1&bar=2';

$foo = 1;
$bar = 2;
include 'file.txt';  // Works.
include 'file.php';  // Works.

?>
]]>
     </programlisting>
    </example>
     相关信息参见<link linkend="features.remote-files">使用远程文件</link>，<function>fopen</function> 和 <function>file</function>。
   </para>
   <para>
     因为 <function>include</function> 和 <function>require</function> 是特殊的语言结构，在条件语句中使用必须将其放在语句组中（花括号中）。
   </para>
   <para>
    <example>
     <title>include() 与条件语句组</title>
     <programlisting role="php">
<![CDATA[
<?php

// This is WRONG and will not work as desired.
if ($condition)
    include $file;
else
    include $other;


// This is CORRECT.
if ($condition) {
    include $file;
} else {
    include $other;
}

?>
]]>
     </programlisting>
    </example>
   </para>
   <simpara>
    处理返回值：可以在被包括的文件中使用 <function>return</function> 语句来终止该文件中程序的执行并返回调用它的脚本。同样也可以从被包括的文件中返回值。可以像普通函数一样获得 include 呼叫的返回值。
   </simpara>
   <note>
    <simpara>
     在 PHP 3 中，除非是在函数中调用否则被包括的文件中不能出现 return。在此情况下 <function>return</function> 作用于该函数而不是整个文件。
    </simpara>
   </note>
   <para>
    <example>
     <title><function>include</function> 和 <function>return</function> 语句</title>
      <programlisting role="php">
<![CDATA[
return.php
<?php

$var = 'PHP';

return $var;

?>

noreturn.php
<?php

$var = 'PHP';

?>

testreturns.php
<?php

$foo = include 'return.php';

echo $foo; // prints 'PHP'

$bar = include 'noreturn.php';

echo $bar; // prints 1

?>
]]>
      </programlisting>
    </example>
   </para>
   <simpara>
    <literal>$bar</literal> 的值为 <literal>1</literal> 是因为 include 成功运行了。注意以上例子中的区别。第一个在被包括的文件中用了 <function>return</function> 而另一个没有。其它几种把文件“包括”到变量的方法是用 <function>fopen</function>，<function>file</function> 或者 <function>include</function> 连同<link
    linkend="ref.outcontrol">输出控制函数</link>一起使用。
   </simpara>

   <simpara>
    参见 <function>require</function>，<function>require_once</function>，<function>include_once</function>，<function>readfile</function>，<function>virtual</function> 和 <link linkend="ini.include-path">include_path</link>。
   </simpara>

</sect1>

 <sect1 id="function.require-once">
   <title><function>require_once</function></title>
   <para>
    <function>require_once</function> 语句在脚本执行期间包括并运行指定文件。此行为和 <function>require</function> 语句类似，唯一区别是如果该文件中的代码已经被包括了，则不会再次包括。有关此语句怎样工作参见 <function>require</function> 的文档。
   </para>
   <para>
    <function>require_once</function> 应该用于在脚本执行期间同一个文件有可能被包括超过一次的情况下，你想确保它只被包括一次以避免函数重定义，变量重新赋值等问题。
   </para>
   <para>
     使用 <function>require_once</function> 和 <function>include_once</function> 的例子见最新的 PHP 源程序发行包中的 <ulink url="&url.php.pear;">PEAR</ulink> 代码。 
   </para>
   <note>
    <para>
     <function>require_once</function> 是 PHP 4.0.1pl2 中新加入的。
    </para>
   </note>
   <note>
    <para>
     要注意 <function>require_once</function> 和 <function>include_once</function> 在大小写不敏感的操作系统中（例如 Windows）的行为可能不是你所期望的。
     <example>
      <title><function>require_once</function> 是大小写敏感的</title>
      <programlisting role="php">
<![CDATA[
require_once("a.php"); // this will include a.php
require_once("A.php"); // this will include a.php again on Windows!
]]>
       </programlisting>
     </example>
    </para>
   </note>
   &warn.no-win32-fopen-wrapper;
   <para>
    参见: <function>require</function>，<function>include</function>，<function>include_once</function>，<function>get_required_files</function>，<function>get_included_files</function>，<function>readfile</function> 和 <function>virtual</function>。
   </para>
  </sect1>

 <sect1 id="function.include-once">
   <title><function>include_once</function></title>
   <para>
    The <function>include_once</function> 语句在脚本执行期间包括并运行指定文件。此行为和 <function>include</function> 语句类似，唯一区别是如果该文件中的代码已经被包括了，则不会再次包括。如同此语句名字暗示的那样，只会包括一次。
   </para>
   <para>
    <function>include_once</function> 应该用于在脚本执行期间同一个文件有可能被包括超过一次的情况下，你想确保它只被包括一次以避免函数重定义，变量重新赋值等问题。
   </para>
   <para>
     使用 <function>require_once</function> 和 <function>include_once</function> 的更多例子见最新的 PHP 源程序发行包中的 <ulink url="&url.php.pear;">PEAR</ulink> 代码。 
   </para>
   <note>
    <para>
     <function>include_once</function> 是 PHP 4.0.1pl2 中新加入的。
    </para>
   </note>
   <note>
    <para>
     要注意 <function>include_once</function> 和 <function>require_once</function> 在大小写不敏感的操作系统中（例如 Windows）的行为可能不是你所期望的。
     <example>
      <title><function>include_once</function> 是大小写敏感的</title>
      <programlisting role="php">
<![CDATA[
include_once("a.php"); // this will include a.php
include_once("A.php"); // this will include a.php again on Windows!
]]>
       </programlisting>
     </example>
    </para>
   </note>
   &warn.no-win32-fopen-wrapper;
   <para>
    参见 <function>include</function>，<function>require</function>，<function>require_once</function>，<function>get_required_files</function>，<function>get_included_files</function>，<function>readfile</function> 和 <function>virtual</function>。
   </para>
  </sect1>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
