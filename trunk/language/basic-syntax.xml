<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.6 $ -->
<!-- $Author: dallas $ -->
<!-- EN-Revision: 1.45 Maintainer: verdana  Status:ready -->
<!-- CREDITS: dallas -->
 <chapter id="language.basic-syntax">
  <title>基本语法</title>

  <sect1 id="language.basic-syntax.phpmode">
   <title>从 HTML 中分离</title>

   <para>
    当 PHP 解析一个文件时，会寻找开始和结束标记，标记告诉
    PHP 开始和停止解释其中的代码。此种方式的解析可以使
    PHP 嵌入到各种不同的文档中，凡是在一对开始和结束标记之外的内容都会被
    PHP 解析器忽略。大多数情况下 PHP 都是嵌入在 HTML 文档中的，如下例所示。
    <informalexample>
     <programlisting role="php">
<![CDATA[
<p>This is going to be ignored.</p>
<?php echo 'While this is going to be parsed.'; ?>
<p>This will also be ignored.</p>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    还可以用更高级的结构：
    <example>
     <title>高级分离术</title>
     <programlisting role="php">
<![CDATA[
<?php
if ($expression) {
    ?>
    <strong>This is true.</strong>
    <?php
} else {
    ?>
    <strong>This is false.</strong>
    <?php
}
?>
]]>
     </programlisting>
    </example>
    上例可正常工作，因为当 PHP 碰到结束标记 ?&gt;
    时，就简单地将其后的内容原样输出直到碰到下一个开始标记为止。当然，上面的例子很做作，但是对输出大块的文本而言，脱离
    PHP 解析模式通常比将所有内容用 <function>echo</function>
    或者 <function>print</function> 输出更有效率。
   </para>
   <para>
    可以在 PHP 中使用四对不同的开始和结束标记。其中两种，&lt;?php ?&gt;
    和 &lt;script language="php"&gt; &lt;/script&gt; 总是可用的。另两种是短标记和
    <productname>ASP</productname> 风格标记，可以在 &php.ini;
    配置文件中打开或关闭。尽管有些人觉得短标记和
    <productname>ASP</productname> 风格标记很方便，但移植性较差，通常不推荐。
    <note>
     <para>
      此外注意如果将 PHP 嵌入到 XML 或 XHTML
      中则需要使用 &lt;?php ?&gt; 以保持符合标准。
     </para>
    </note>
   </para>
   <para>
    <example>
     <title>PHP 开始和结束标记</title>
     <programlisting role="php">
<![CDATA[
1.  <?php echo 'if you want to serve XHTML or XML documents, do like this'; ?>

2.  <script language="php">
        echo 'some editors (like FrontPage) don\'t
              like processing instructions';
    </script>

3.  <? echo 'this is the simplest, an SGML processing instruction'; ?>
    <?= expression ?> This is a shortcut for "<? echo expression ?>"

4.  <% echo 'You may optionally use ASP-style tags'; %>
    <%= $variable; # This is a shortcut for "<% echo . . ." %>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    上例中的 1 和 2 总是可用的，其中 1 是最常用，并建议使用的。
   </para>
   <para>
    短标记（上例 3）仅在通过 &php.ini; 配置文件中的指令
    <link linkend="ini.short-open-tag">short_open_tag</link>
    打开后才可用，或者在 PHP 编译时加入了
    <option>--enable-short-tags</option> 选项。
    <note>
     <para>
      如果用 PHP 3 还可以通过 <function>short_tags</function>
      函数激活使用短标记。<emphasis>此方法只适用于 PHP 3！</emphasis>
     </para>
    </note>
   </para>
   <para>
    <productname>ASP</productname> 风格标记（上例 4）仅在通过 &php.ini;
    配置文件中的指令
    <link linkend="ini.asp-tags">asp_tags</link> 打开后才可用。
    <note>
     <para>
      对 <productname>ASP</productname> 风格标记的支持是 3.0.4 版添加的。
     </para>
    </note>
   </para>
   <para>
    <note>
     <para>
      在以下情况应避免使用短标记：开发需要发行的程序或者库，或者在用户不能控制的服务器上开发。因为目标服务器可能不支持短标记。为了代码的移植及发行，确保不要使用短标记。
     </para>
    </note>
   </para>
  </sect1>

  <sect1 id="language.basic-syntax.instruction-separation">
   <title>指令分隔符</title>

   <para>
    同 C 或 Perl 一样，PHP 需要在每个语句后用分号结束指令。一段 PHP
    代码中的结束标记隐含表示了一个分号；在一个 PHP
    代码段中的最后一行可以不用分号结束。如果后面还有新行，则代码段的结束标记包含了行结束。
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
    echo "This is a test";
?>

<?php echo "This is a test" ?>
]]>
     </programlisting>
    </informalexample>
    <note>
     <para>
      文件末尾的 PHP 代码段结束标记可以不要，有些情况下当使用输出缓冲和
      <function>include</function> 或者 <function>require</function>
      时不要更好些。
     </para>
    </note>
   </para>
  </sect1>

  <sect1 id="language.basic-syntax.comments">
   <title>注释</title>

   <para>
    PHP 支持“C”，“C++”和 Unix Shell 风格（Perl 风格）的注释。例如:

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
    echo "This is a test"; // This is a one-line c++ style comment
    /* This is a multi line comment
       yet another line of comment */
    echo "This is yet another test";
    echo "One Final Test"; # This is shell-style style comment
?>
]]>
     </programlisting>
    </informalexample>
   </para>

   <simpara>
    “单行”注释仅仅注释到行末或者当前的 PHP 代码块，视乎哪个首先出现。这意味着在
    <literal>// ?&gt;</literal> 之后的 HTML 代码将被显示出来：?&gt;
    跳出了 PHP 模式并返回了 HTML 模式，<literal>//</literal>
    并不能影响到这一点。如果启用了
    <link linkend="ini.asp-tags">asp_tags</link> 配置选项，其行为和
    <literal>// %&gt;</literal> 相同。不过，<literal>&lt;/script&gt;</literal>
    标记在单行注释中不会跳出 PHP 模式。
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<h1>This is an <?php # echo "simple";?> example.</h1>
<p>The header above will say 'This is an example'.
]]>
     </programlisting>
    </informalexample>
   </para>

   <simpara>
    “C”风格的注释在碰到第一个 <literal>*/</literal>
    时结束。小心不要嵌套“C”风格的注释，当注释大量代码时，可能犯该错误。
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
 /*
    echo "This is a test"; /* This comment will cause a problem */
 */
?>
]]>
     </programlisting>
    </informalexample>
   </para>

  </sect1>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
