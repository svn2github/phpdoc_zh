<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 315183 Maintainer: HonestQiao Status: ready -->
<!-- Reviewed: no Maintainer: HonestQiao -->
<chapter xml:id="install.pecl" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>PECL 扩展库安装</title>

 <sect1 xml:id="install.pecl.intro">
  <title>PECL 安装介绍</title>
  <simpara>
   <link xlink:href="&url.pecl;">PECL</link>
   是通过 <link xlink:href="&url.php.pear;">PEAR</link> 打包系统来的
   PHP 扩展库仓库，本章内容示范了怎样取得并安装 PECL 扩展。
  </simpara>
  <simpara>
   以下指南中假定 <literal>/your/phpsrcdir/</literal> 是 PHP
   源程序的路径，<literal>extname</literal> 是 PECL
   扩展库的名字。自己根据实际情况调整。此外还假定用户熟悉
   <link xlink:href="&url.php.pear.cli;">pear 命令</link>。
  </simpara>
  <simpara>
   要使用共享扩展库，必须经过编译，安装，然后加载。以下说明的方法提供了怎样编译和安装扩展库德各种指导，但并不会自动加载它们。可以通过将其包括在
   &php.ini; 中用
   <link linkend="ini.extension">extension</link> PHP 指令加载，或者
   用 <function>dl</function> 函数。
  </simpara>
  <simpara>
   当编译 PHP 模块时，拥有各种工具（autoconf，automake，libtool
   等）的已知好使的版本很重要。所需工具和所需版本的详情见<link
   xlink:href="&url.php.anonsvn;">匿名 SVN 说明</link>。
  </simpara>
 </sect1>

 <sect1 xml:id="install.pecl.downloads">
  <title>下载 PECL 扩展库</title>
  <simpara>
   下载 PECL 扩展库有几种方法，如：
  </simpara>
  <itemizedlist>
   <listitem>
    <simpara>
     <link xlink:href="&url.pecl;">&url.pecl;</link>
    </simpara>
    <simpara>
     PECL 网站包括有 PHP
     开发组提供的不同扩展库的信息。这里的信息包括：更新记录，版本说明，需求，以及其它信息。
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <literal>pear download extname</literal>
    </simpara>
    <simpara>
     PECL 网站中列出的 PECL 扩展库的发行版本可以用
     <link xlink:href="&url.php.pear.cli;">pear
     命令</link>来下载和安装。也可以指明具体的修正版。
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <acronym>SVN</acronym>
    </simpara>
    <simpara>
     大多数 PECL 扩展库也在 <acronym>SVN</acronym> 中。其 web 页面见
     <link xlink:href="&url.php.svn;pecl/">&url.php.svn;pecl/</link>。要直接从
     <acronym>SVN</acronym> 中下载，用以下命令：
    </simpara>
    <para>
     <screen>
$ svn checkout http://svn.php.net/repository/pecl/extname/trunk extname
     </screen>
    </para>
   </listitem>
   <listitem>
    <simpara>
     Windows 下载
    </simpara>
    <simpara>
     目前PHP项目没有编译Windows下的二进制PECl扩展。要在
     Windows 下编译 PHP，请阅读<link linkend="install.windows.building">有关章节</link>。
    </simpara>
   </listitem>
  </itemizedlist>
 </sect1>
 <sect1 xml:id="install.pecl.windows">
  <title>Installing a PHP extension on Windows</title>
  <para>
   On Windows, you have two ways to load a PHP extension: either compile it into PHP, or 
   load the DLL. Loading a pre-compiled extension is the easiest and preferred way.
  </para>
  <para>
   To load an extension, you need to have it available as a ".dll" file on your system. 
   All the extensions are automatically and periodically compiled by the PHP Group 
   (see next section for the download).
  </para>
  <para>
   To compile an extension into PHP, please refer to <link linkend="install.windows.building">
   building from source</link> documentation.
  </para>
  <para>
   To compile a standalone extension (aka a DLL file), please refer to <link linkend="install.windows.building">
   building from source</link> documentation. If the DLL file is available neither with your 
   PHP distribution nor in PECL, you may have to compile it before you can start using the 
   extension.
  </para>

  <sect2 xml:id="install.pecl.windows.find">
   <title>Where to find an extension?</title>
   <para>
    PHP extensions are usually called "php_*.dll" (where the star represents the name of 
    the extension) and   they are located under the "PHP\ext" ("PHP\extensions" in PHP 4) 
    folder.
   </para>
   <para>
    PHP ships with the extensions most useful to the majority of developers. They are 
    called "core" extensions.
   </para>
   <para>
    However, if you need functionality not provided by any core extension, you may still be 
    able to find one in PECL. The PHP Extension Community Library (PECL) is a repository for 
    PHP Extensions, providing a directory of all known extensions and hosting facilities for 
    downloading and development of PHP extensions.
   </para>
   <para>
    If you have developed an extension for your own uses, you might want to think about hosting 
    it on PECL so that others with the same needs can benefit from your time. A nice side effect 
    is that you give them a good chance to give you feedback, (hopefully) thanks, bug reports 
    and even fixes/patches. Before you submit your extension for hosting on PECL, please read 
    &url.pecl.submit;.
   </para>
  </sect2>

  <sect2 xml:id="install.pecl.windows.which">
   <title>Which extension to download?</title>
   <para>
    <emphasis>Many times, you will find several versions of each DLL:</emphasis>
    <itemizedlist>
     <listitem>
      <simpara>
       Different version numbers (at least the first two numbers should match)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Different thread safety settings
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Different processor architecture (x86, x64, ...)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Different debugging settings
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>etc.</literal>
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
   <para>
    You should keep in mind that your extension settings should match all the 
    settings of the PHP executable you are using. The following PHP script will 
    tell you <emphasis>all</emphasis> about your PHP settings:
   </para>
   <para>
    <example>
     <title><function>phpinfo</function> call</title>
     <programlisting role="php">
<![CDATA[
<?php
phpinfo();
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Or from the command line, run:
    <screen>
<![CDATA[
drive:\\path\to\php\executable\php.exe -i
]]>
    </screen>
   </para>
  </sect2>

  <sect2 xml:id="install.pecl.windows.loading">
   <title>Loading an extension</title>
   <para>
    The most common way to load a PHP extension is to include it in your <filename>php.ini</filename> 
    configuration file. Please note that many extensions are already present in your 
    <filename>php.ini</filename> and that you only need to remove the semicolon to activate them.
    <screen>
<![CDATA[
;extension=php_extname.dll
]]>
    </screen>
    <screen>
<![CDATA[
extension=php_extname.dll
]]>
    </screen>
   </para>
   <para>
    However, some web servers are confusing because they do not use the <filename>php.ini</filename> located alongside 
    your PHP executable. To find out where your actual <filename>php.ini</filename> resides, look 
    for its path in <function>phpinfo</function>:
    <screen>
<![CDATA[
Configuration File (php.ini) Path  C:\WINDOWS
]]>
    </screen>
    <screen>
<![CDATA[
Loaded Configuration File   C:\Program Files\PHP\5.2\php.ini
]]>
    </screen>
   </para>
   <para>
    After activating an extension, save <filename>php.ini</filename>, restart the web server and check 
    <function>phpinfo</function> again. The new extension should now have its own section.
   </para>
  </sect2>

  <sect2 xml:id="install.pecl.windows.problemsolving">
   <title>Resolving problems</title>
   <para>
    If the extension does not appear in <function>phpinfo</function>, you should check your logs to 
    learn where the problem comes from.
   </para>
   <para>
    If you are using PHP from the command line (CLI), the extension loading error can be read 
    directly on screen.
   </para>
   <para>
    If you are using PHP with a web server, the location and format of the logs vary depending on 
    your software. Please read your web server documentation to locate the logs, as it does not 
    have anything to do with PHP itself.
   </para>
   <para>
    Common problems are the location of the DLL, the value of the "<link linkend="ini.extension-dir">
    extension_dir</link>" setting inside <filename>php.ini</filename> and compile-time setting mismatches.
   </para>
   <para>
    If the problem lies in a compile-time setting mismatch, you probably didn't download the right DLL. 
    Try downloading again the extension with the right settings. Again, <function>phpinfo</function> 
    can be of great help.
   </para>
  </sect2>

 </sect1>

 <sect1 xml:id="install.pecl.pear">
  <title>用 PEAR 编译共享 PECL 扩展库</title>
  <simpara>
   PEAR 使建立共享 PHP 扩展库更容易。用
   <link xlink:href="&url.php.pear.cli;">pear 命令</link>这样做：
  </simpara>
  <para>
   <screen>
$ pear install extname
   </screen>
  </para>
  <simpara>
   这将下载 <emphasis>extname</emphasis> 的源代码，编译之，并将
   <filename>extname.so</filename> 安装到 <link
   linkend="ini.extension-dir">extension_dir</link>
   中。然后 <filename>extname.so</filename> 就可以通过 &php.ini; 加载了。
  </simpara>
  <simpara>
   默认情况下，<literal>pear</literal> 命令不会安装标记为
   <literal>alpha</literal> 或
   <literal>beta</literal> 状态的包。如果没有 <literal>stable</literal>
   包可用，也可以用以下命令安装一个 <literal>beta</literal> 包：
  </simpara>
  <para>
   <screen>
$ pear install extname-beta
   </screen>
  </para>
  <para>
   也可以用此命令安装一个指定的版本：
  </para>
  <para>
   <screen>
$ pear install extname-0.1
   </screen>
  </para>
 </sect1>

 <sect1 xml:id="install.pecl.phpize">
  <title>用 phpize 编译共享 PECL 扩展库</title>
  <simpara>
   有时候不能用 <literal>pear</literal>
   安装命令。这可能是因为在防火墙后面，或者是因为想要安装的扩展库还没有
   PEAR 兼容的包，例如 SVN 中尚未发布的扩展库。如果要编译这种扩展库，可以用更底层的编译工具来手工进行编译。
  </simpara>
  <simpara>
   <literal>phpize</literal> 命令是用来准备 PHP
   扩展库的编译环境的。下面例子中，扩展库的源程序位于
   <filename>extname</filename> 目录中：
  </simpara>
  <para>
   <screen>
<![CDATA[
$ cd extname
$ phpize
$ ./configure
$ make
# make install
]]>
   </screen>
  </para>
  <simpara>
   成功的安装将创建 <filename>extname.so</filename> 并放置于
   PHP 的<link linkend="ini.extension-dir">扩展库目录</link>中。需要调整
   &php.ini;，加入 <literal>extension=extname.so</literal>
   这一行之后才能使用此扩展库。
  </simpara>
 </sect1>

 <sect1 xml:id="install.pecl.static">
  <title>将 PECL 扩展库静态编译入 PHP</title>
  <simpara>
   有时可能需要将扩展库静态编译到 PHP 中。这需要将扩展库源程序放入
   <filename>php-src/ext/</filename> 目录中去并告诉 PHP
   编译系统来生成其配置脚本。
  </simpara>
  <para>
   <screen>
<![CDATA[
$ cd /your/phpsrcdir/ext
$ pear download extname
$ gzip -d < extname.tgz | tar -xvf -
$ mv extname-x.x.x extname
]]>
   </screen>
  </para>
  <simpara>
   这将产生以下目录：
  </simpara>
  <para>
   <screen>
    /your/phpsrcdir/ext/extname
   </screen>
  </para>
  <simpara>
   此时强制 PHP 重新生成配置脚本，然后正常编译 PHP：
  </simpara>
  <para>
   <screen>
$ cd /your/phpsrcdir
$ rm configure
$ ./buildconf --force
$ ./configure --help
$ ./configure --with-extname --enable-someotherext --with-foobar
$ make
$ make install
   </screen>
  </para>
  <note>
   <simpara>
    要运行“buildconf”脚本，需要 autoconf 2.13 和 automake 1.4+（更新版本的
    autoconf 也许能工作，但不被支持）。
   </simpara>
  </note>
  <simpara>
   是否用 <literal>--enable-extname</literal> 或 <literal>--with-extname</literal>
   取决于扩展库。通常不需要外部库文件的扩展库使用
   <literal>--enable</literal>。要确认的话，在 buildconf 之后运行：
  </simpara>
  <para>
   <screen>
$ ./configure --help | grep extname
   </screen>
  </para>
 </sect1>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
