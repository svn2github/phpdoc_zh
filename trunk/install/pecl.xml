<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.3 $ -->
<!-- $Author: dallas $ -->
<!-- EN-Revision: 1.11 Maintainer: dallas Status: ready -->

<chapter id="install.pecl">
 <title>PECL 扩展库安装</title>

 <sect1 id="install.pecl.intro">
  <title>PECL 安装介绍</title>
  <simpara>
   <ulink url="&url.pecl;">PECL</ulink>
   是通过 <ulink url="&url.php.pear;">PEAR</ulink> 打包系统来的
   PHP 扩展库仓库，本章内容示范了怎样取得并安装 PECL 扩展。
  </simpara>
  <simpara>
   以下指南中假定 <literal>/your/phpsrcdir/</literal> 是 PHP
   源程序的路径，<literal>extname</literal> 是 PECL
   扩展库的名字。自己根据实际情况调整。此外还假定用户熟悉
   <ulink url="&url.php.pear.cli;">pear 命令</ulink>。
  </simpara>
  <simpara>
   要使用共享扩展库，必须经过编译，安装，然后加载。以下说明的方法提供了怎样编译和安装扩展库德各种指导，但并不会自动加载它们。可以通过将其包括在
   &php.ini; 中用
   <link linkend="ini.extension">extension</link> PHP 指令加载，或者
   用 <function>dl</function> 函数。
  </simpara>
  <simpara>
   当编译 PHP 模块时，拥有各种工具（autoconf，automake，libtool
   等）的已知好使的版本很重要。所需工具和所需版本的详情见<ulink
   url="&url.php.anoncvs;">匿名 CVS 说明</ulink>。
  </simpara>
 </sect1>

 <sect1 id="install.pecl.downloads">
  <title>下载 PECL 扩展库</title>
  <simpara>
   下载 PECL 扩展库有几种方法，如：
  </simpara>
  <itemizedlist>
   <listitem>
    <simpara>
     <ulink url="&url.pecl;">&url.pecl;</ulink>
    </simpara>
    <simpara>
     PECL 网站包括有 PHP
     开发组提供的不同扩展库的信息。这里的信息包括：更新记录，版本说明，需求，以及其它信息。
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <literal>pear download extname</literal>
    </simpara>
    <simpara>
     PECL 网站中列出的 PECL 扩展库的发行版本可以用
     <ulink url="&url.php.pear.cli;">pear
     命令</ulink>来下载和安装。也可以指明具体的修正版。
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <acronym>CVS</acronym>
    </simpara>
    <simpara>
     大多数 PECL 扩展库也在 <acronym>CVS</acronym> 中。其 web 页面见
     <ulink url="&url.php.cvs;pecl/">&url.php.cvs;pecl/</ulink>。要直接从
     <acronym>CVS</acronym> 中下载，用以下命令，其中用户
     <emphasis>cvsread</emphasis> 的密码是 <emphasis>phpfi</emphasis>：
    </simpara>
    <para>
     <screen>
$ cvs -d:pserver:cvsread@cvs.php.net:/repository login
$ cvs -d:pserver:cvsread@cvs.php.net:/repository co pecl/extname
     </screen>
    </para>
   </listitem>
   <listitem>
    <simpara>
     Windows 下载
    </simpara>
    <simpara>
     Windows 用户可以通过在 <ulink url="&url.php.downloads;">PHP
     下载</ulink>页面下载 <emphasis>Collection of PECL modules</emphasis>
     来找到已编译的 PECL 可执行程序，或下载
     <ulink url="&url.php.snapshots;">PECL Snapshot</ulink>。要在
     Windows 下编译 PHP，请阅读<link linkend="install.windows.building">有关章节</link>。
    </simpara>
   </listitem>
  </itemizedlist>
 </sect1>

 <sect1 id="install.pecl.windows">
  <title>Windows 用户的 PECL</title>
  <simpara>
   和其它任何 PHP 扩展库的 <acronym>DLL</acronym> 一样，把
   PECL 扩展库的 DLL 移动到 <link linkend="ini.extension-dir">extension_dir</link>
   目录并将其包括入 &php.ini; 来安装。例如：
  </simpara>
  <para>
   <screen>
extension=php_extname.dll
   </screen>
  </para>
  <simpara>
   然后重新启动 web 服务器。
  </simpara>
 </sect1>

 <sect1 id="install.pecl.pear">
  <title>用 PEAR 编译共享 PECL 扩展库</title>
  <simpara>
   PEAR 使建立共享 PHP 扩展库更容易。用
   <ulink url="&url.php.pear.cli;">pear 命令</ulink>这样做：
  </simpara>
  <para>
   <screen>
$ pear install extname
   </screen>
  </para>
  <simpara>
   这将下载 <emphasis>extname</emphasis> 的源代码，编译之，并将
   <filename>extname.so</filename> 安装到 <link
   linkend="ini.extension-dir">extension_dir</link>
   中。然后 <filename>extname.so</filename> 就可以通过 &php.ini; 加载了。
  </simpara>
  <simpara>
   默认情况下，<literal>pear</literal> 命令不会安装标记为
   <literal>alpha</literal> 或
   <literal>beta</literal> 状态的包。如果没有 <literal>stable</literal>
   包可用，也可以用以下命令安装一个 <literal>beta</literal> 包：
  </simpara>
  <para>
   <screen>
$ pear install extname-beta
   </screen>
  </para>
  <para>
   也可以用此命令安装一个指定的版本：
  </para>
  <para>
   <screen>
$ pear install extname-0.1
   </screen>
  </para>
 </sect1>

 <sect1 id="install.pecl.phpize">
  <title>用 phpize 编译共享 PECL 扩展库</title>
  <simpara>
   有时候不能用 <literal>pear</literal>
   安装命令。这可能是因为在防火墙后面，或者是因为想要安装的扩展库还没有
   PEAR 兼容的包，例如 CVS 中尚未发布的扩展库。如果要编译这种扩展库，可以用更底层的编译工具来手工进行编译。
  </simpara>
  <simpara>
   <literal>phpize</literal> 命令是用来准备 PHP
   扩展库的编译环境的。下面例子中，扩展库的源程序位于
   <filename>extname</filename> 目录中：
  </simpara>
  <para>
   <screen>
<![CDATA[
$ cd extname
$ phpize
$ ./configure
$ make
# make install
]]>
   </screen>
  </para>
  <simpara>
   成功的安装将创建 <filename>extname.so</filename> 并放置于
   PHP 的<link linkend="ini.extension-dir">扩展库目录</link>中。需要调整
   &php.ini;，加入 <literal>extension=extname.so</literal>
   这一行之后才能使用此扩展库。
  </simpara>
 </sect1>

 <sect1 id="install.pecl.static">
  <title>将 PECL 扩展库静态编译入 PHP</title>
  <simpara>
   有时可能需要将扩展库静态编译到 PHP 中。这需要将扩展库源程序放入
   <filename>php-src/ext/</filename> 目录中去并告诉 PHP
   编译系统来生成其配置脚本。
  </simpara>
  <para>
   <screen>
<![CDATA[
$ cd /your/phpsrcdir/ext
$ pear download extname
$ gzip -d < extname.tgz | tar -xvf -
$ mv extname-x.x.x extname
]]>
   </screen>
  </para>
  <simpara>
   这将产生以下目录：
  </simpara>
  <para>
   <screen>
    /your/phpsrcdir/ext/extname
   </screen>
  </para>
  <simpara>
   此时强制 PHP 重新生成配置脚本，然后正常编译 PHP：
  </simpara>
  <para>
   <screen>
$ cd /your/phpsrcdir
$ rm configure
$ ./buildconf --force
$ ./configure --help
$ ./configure --with-extname --enable-someotherext --with-foobar
$ make
$ make install
   </screen>
  </para>
  <note>
   <simpara>
    要运行“buildconf”脚本，需要 autoconf 2.13 和 automake 1.4+（更新版本的
    autoconf 也许能工作，但不被支持）。
   </simpara>
  </note>
  <simpara>
   是否用 <literal>--enable-extname</literal> 或 <literal>--with-extname</literal>
   取决于扩展库。通常不需要外部库文件的扩展库使用
   <literal>--enable</literal>。要确认的话，在 buildconf 之后运行：
  </simpara>
  <para>
   <screen>
$ ./configure --help | grep extname
   </screen>
  </para>
 </sect1>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
