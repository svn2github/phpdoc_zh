<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.4 $ -->
<!-- $AUTHOR$ -->
<!-- EN-Revision: 1.1 Maintainer: class007 Status: working -->
<appendix id="migration">
 <title>从 PHP/FI 2 移植到 PHP 3</title>

 <section id="migration.about">
  <title>关于 PHP 3.0 的不兼容性</title>

  <simpara>
   PHP 3.0 从底层重写了代码。它有着比 2.0 更健壮和统一的解析器。3.0 也更快、占用更少的内存。但是，这些改进难以避免兼容性的削弱，包括语法和功能上兼容性的削弱。
  </simpara>

  <simpara>
   另外，PHP 的开发者尝试在版本 3.0 中使得 PHP 的语法和语义更加简洁，这也导致了一些不兼容。最后，我们相信这些改变是值得的。  </simpara>

  <simpara>
   本章将会指导你认识从 PHP/FI 2.0 到 PHP 3.0 升级所带来的的障碍并帮助你解决它。这里没有提到 3.0 的新功能，除非必要。
  </simpara>

  <simpara>
   一个转换程序可以帮助您自动转换旧有的 PHP/FI 2.0 脚本。这个程序可以在 PHP 3.0 发布包中的 <filename class="directory">convertor</filename> 子目录中找到。可是，该程序只能转换语法的改变，因此，您仍然需要仔细阅读下面的部分。  </simpara>
 </section>

 <section id="migration.startendtags">
  <title>开始/结束标记</title>

  <para>
   首先您应该注意 PHP 的开始/结束标记已经改变。老的 <literal>&lt;? &gt;</literal> 已经被三种新的形式所替换：
   <example>
    <title>移植：旧有的开始/结束标记</title>
    <programlisting role="php">
<![CDATA[
<? echo "This is PHP/FI 2.0 code.\n"; ?>
]]>
    </programlisting>
   </example>
   PHP/FI 2.0 支持这种变化：
   <example>
    <title>移植：第一种开始/结束标记</title>
    <programlisting role="php">
<![CDATA[
<? echo "This is PHP 3.0 code!\n"; ?>
]]>
    </programlisting>
   </example>

   请注意，结束标记现在由一个问号和一个大于号组成而不仅是一个大于号。但是，您如果计划在您的服务器上使用 XML，您会发现错误。这是因为 PHP 可能会把 XML 文档中的标记当作 PHP 代码执行。因此，建议使用以下方法：
   <example>
    <title>移植：第二种开始/结束标记</title>
    <programlisting role="php">
<![CDATA[
<?php echo "This is PHP 3.0 code!\n"; ?>
]]>
    </programlisting>
   </example>

   一些编辑器并不能识别并处理指示标记，Microsoft FrontPage 就是其中之一。为了使之正常工作，您可以使用下面的方法：
   <example>
    <title>移植：第三种开始/结束标记</title>
    <programlisting role="php">
<![CDATA[
<script language="php">

  echo "This is PHP 3.0 code!\n";

</script>
]]>
    </programlisting>
   </example>
  </para>
 </section>

 <section id="migration.if-endif">
  <title>if..endif 语法</title>

  <para>
   使用 if(); elseif(); else; endif; 这一系列复杂的语句无助于 PHP 3.0 解析器的效率。因此，语法改变为：
   <example>
    <title>移植：旧有 if..endif 语法</title>
    <programlisting role="php">
<![CDATA[
if ($foo);
    echo "yep\n";
elseif ($bar);
    echo "almost\n";
else;
    echo "nope\n";
endif;
]]>
    </programlisting>
   </example>
   <example>
    <title>移植：新的 if..endif 语法</title>
    <programlisting role="php">
<![CDATA[
if ($foo):
    echo "yep\n";
elseif ($bar):
    echo "almost\n";
else:
    echo "nope\n";
endif;
]]>
    </programlisting>
   </example>

   注意，在所有的声明中分号均改为冒号，除了末尾的 endif 以外。
  </para>
 </section>

 <section id="migration-while">
  <title>while 语法</title>
  <para>
   如 if..endif 一样，while..endwhile 的语法也进行了改变：
   <example>
    <title>移植：旧有 while..endwhile 语法</title>
    <programlisting role="php">
<![CDATA[
while ($more_to_come);
    ...
endwhile;
]]>
    </programlisting>
   </example>
   <example>
    <title>移植：新的 new while..endwhile 语法</title>
    <programlisting role="php">
<![CDATA[
while ($more_to_come):
    ...
endwhile;
]]>
    </programlisting>
   </example>
  </para>
  <warning>
   <simpara>
    如果您在 PHP 3.0 中使用旧的 while..endwhile 语法，您的程序会进入死循环.
   </simpara>
  </warning>
 </section>

 <section id="migration.expr">
  <title>表达式类型</title>
  <simpara>
   PHP/FI 2.0 根据表达式左边判断表达式的类型，而 PHP 3.0 则根据表达式两边进行判断。这便可能导致 2.0 下运行正常的脚本在 3.0 下导致异常。
  </simpara>
  <para>
   考虑一下例子：
   <informalexample>
    <programlisting role="php">
<![CDATA[
$a[0]=5;
$a[1]=7;

$key = key($a);
while ("" != $key) {
    echo "$keyn";
    next($a);
}
]]>
    </programlisting>
   </informalexample>

   在 PHP/FI 2.0 中，这段程序将显示所有 $a 的索引，而在 PHP 3.0 中，这个程序什么都不会现实。原因是，在 PHP 2.0 中，因为左边参数的类型是 string，于是，一个 string 的关系便建立起来。当然 <literal>""</literal> 并不等于 <literal>"0"</literal>，循环从头到尾。而在 PHP 3.0 中，当一个 string 和一个 integer 比较时，将 string 转换为 integer 并比较。结果是比较值为 <literal>0</literal> 的 <literal>atoi("")</literal>，和同样是值为 <literal>0</literal> 的 <literal>variablelist</literal>，也就是 <literal>0==0</literal>。所以循环根本没有执行。
  </para>
  <para>
   很容易修正它。把 while 声明替换为：
   <informalexample>
    <programlisting role="php">
<![CDATA[
while ((string)$key != "") {
]]>
    </programlisting>
   </informalexample>
  </para>
 </section>

 <section id="migration.errors">
  <title>错误消息已经改变</title>
  <simpara>
   PHP 3.0 的错误消息通常比 2.0 的更加精确，但是您不会像 2.0 那样得到错误代码的片断。您会获得一个文件名和错误所在的行号。
  </simpara>
 </section>

 <section id="migration.booleval">
  <title>Short-circuited boolean evaluation</title>
  <simpara>
   In PHP 3.0 boolean evaluation is short-circuited.  This means that
   in an expression like <literal>(1 || test_me())</literal>, the
   function <function>test_me</function> would not be executed since
   nothing can change the result of the expression after the
   <literal>1</literal>. 
  </simpara>

  <simpara>
   This is a minor compatibility issue, but may cause unexpected
   side-effects.(TODO)
  </simpara>
 </section>

 <section id="migration.truefalse">
  <title>函数 &true;/&false; 返回值</title>
  <simpara>
   大量的内部函数被重写，使之在成功执行时返回 &true;，而在失败时返回 &false;。这就如同 PHP/FI 2.0 分别返回 0 和 -1 一样。这种改变使得更多的逻辑代码得以执行，比如 <literal>$fp = fopen("/your/file") or fail("darn!");</literal>。因为 PHP/FI 2.0 对函数执行失败的返回值没有明确的规定，所以在使用 2.0 到 3.0 转换器时必须手工检查函数返回值带来的影响。
  </simpara>
  <para>
   <example>
    <title>从 2.0 移植：返回值，旧有代码</title>
    <programlisting role="php">
<![CDATA[
$fp = fopen($file, "r");
if ($fp == -1);
    echo("Could not open $file for reading<br>\n");
endif;
]]>
    </programlisting>
   </example>
   <example>
    <title>从 2.0 移植：返回值，新的代码</title>
    <programlisting role="php">
<![CDATA[
$fp = @fopen($file, "r") or print("Could not open $file for reading<br>\n");
]]>
    </programlisting>
   </example>
  </para>
 </section>

 <section id="migration-other">
  <title>其它不兼容</title>

  <itemizedlist>
   <listitem><simpara>
    PHP 3.0 的 Apache 模块不再支持 Apache 1.2 以前的版本。PHP 3.0 需要 Apache 1.2 或更高版本。
   </simpara></listitem>

   <listitem><simpara>
    <function>echo</function> 不再支持格式化字符串。如果想格式化字符串，使用 <function>printf</function> 函数。
   </simpara></listitem>

   <listitem><simpara>
    在 PHP/FI 2.0 中，<literal>$foo[0]</literal> 和 <literal>$foo</literal>有着同样的效果。而 3.0 则不是这样的。
   </simpara></listitem>

   <listitem>
    <simpara>
     不再支持使用 <literal>$array[]</literal> 读取数组。
    </simpara>
    <simpara>
     也就是说，您不可以通过作 <literal>$data = $array[]</literal> 的循环来遍历一个数组。使用 <function>current</function> 和 <function>next</function> 函数来代替。
    </simpara>
    <simpara>
     同样的，<literal>$array1[] = $array2</literal> 并没有把 <literal>$array2</literal> 的值赋给 <literal>$array1</literal>，而是把 <literal>$array2</literal> 这个数组赋给 <literal>$array1</literal> 的最后一项。这种情况也发生在多维数组上。
    </simpara>
   </listitem>

   <listitem>
    <simpara>
     <literal>"+"</literal> 不再重载为字符串串连的运算符，它的作用是把字符串转换为数字并将它们相加。如果想串连字符串，使用 <literal>"."</literal> 代替。
    </simpara>
   </listitem>
  </itemizedlist>

  <example>
   <title>从 2.0 移植：串连字符串</title>
   <programlisting role="php">
<![CDATA[
echo "1" + "1";
]]>
   </programlisting>
   <para> 
    在 PHP 2.0 中该程序会显示 11，而在 PHP 3.0 中会显示 2。如果要在 PHP 3.0 中达到同样的效果，应该使用：
    <programlisting role="php">
<![CDATA[
echo "1"."1";
]]>
    </programlisting>
    <programlisting role="php">
<![CDATA[
$a = 1;
$b = 1;
echo $a + $b;
]]>
    </programlisting>
   </para>
   <para>
    上面的程序在 PHP 2.0 和 3.0 中都会显示 2。
    <programlisting role="php">
<![CDATA[
$a = 1;
$b = 1;
echo $a.$b;
]]>
    </programlisting>
    面的程序在 PHP 3.0 中会显示 11。
   </para>
  </example>
 </section>

</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
