<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: XX Maintainer: Ernest Too Status: ready -->
<!-- EN-Revision: 337375 Maintainer: Ernest Too Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="migration70.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>新特性</title>

 <sect2 xml:id="migration70.new-features.scalar-type-declarations">
  <title>标量类型声明</title>

  <para>
   标量<link linkend="functions.arguments.type-declaration">类型声明</link>
   有两种模式: 强制 (默认) 和 严格模式。 现在可以使用下列类型参数（无论用强制模式还是严格模式）：
   字符串(<type>string</type>), 整数 (<literal>int</literal>), 浮点数 (<type>float</type>), 
   以及布尔值 (<literal>bool</literal>)。它们扩充了PHP5中引入的其他类型：类名，接口，<type>数组</type>和
   <type>回调类型</type>。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// Coercive mode
function sumOfInts(int ...$ints)
{
    return array_sum($ints);
}

var_dump(sumOfInts(2, '3', 4.1));
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
int(9)
]]>
   </screen>
  </informalexample>

  <para>
   要使用严格模式，一个 &declare; 声明指令必须放在文件的顶部。这意味着严格声明标量是基于文件可配的。
   这个指令不仅影响参数的类型声明，也影响到函数的返回值声明（参见
   <link linkend="functions.returning-values.type-declaration">返回值类型声明</link>,
   内置的PHP函数以及扩展中加载的PHP函数）
  </para>

  <para>
   完整的标量类型声明文档和示例参见<link linkend="functions.arguments.type-declaration">类型声明</link>章节。
   
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.return-type-declarations">
  <title>返回值类型声明</title>

  <para>
   PHP 7 增加了对<link linkend="functions.returning-values.type-declaration">返回类型声明</link>的支持。
   类似于<link linkend="functions.arguments.type-declaration">参数类型声明</link>，返回类型声明指明了函数返回值的类型。可用的<link linkend="functions.arguments.type-declaration.types">类型</link>与参数声明中可用的类型相同。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

function arraysSum(array ...$arrays): array
{
    return array_map(function(array $array): int {
        return array_sum($array);
    }, $arrays);
}

print_r(arraysSum([1,2,3], [4,5,6], [7,8,9]));
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Array
(
    [0] => 6
    [1] => 15
    [2] => 24
)
]]>
   </screen>
  </informalexample>

  <para>
   完整的标量类型声明文档和示例可参见 
   <link linkend="functions.returning-values.type-declaration">返回值类型声明</link>.
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.null-coalesce-op">
  <title>null合并运算符</title>

  <para>
   由于日常使用中存在大量同时使用三元表达式和 <function>isset</function>的情况，
   我们添加了null合并运算符 (<literal>??</literal>) 这个语法糖。如果变量存在且值不为&null;，
   它就会返回自身的值，否则返回它的第二个操作数。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// Fetches the value of $_GET['user'] and returns 'nobody'
// if it does not exist.
$username = $_GET['user'] ?? 'nobody';
// This is equivalent to:
$username = isset($_GET['user']) ? $_GET['user'] : 'nobody';

// Coalesces can be chained: this will return the first
// defined value out of $_GET['user'], $_POST['user'], and
// 'nobody'.
$username = $_GET['user'] ?? $_POST['user'] ?? 'nobody';
?>
]]>
   </programlisting>
  </informalexample>

  <!-- TODO: we don't need further details here, but this still has to be
       added to the operator precedence table -->
 </sect2>

 <sect2 xml:id="migration70.new-features.spaceship-op">
  <title>Spaceship operator</title>
  <para>
   The spaceship operator is used for comparing two expressions. It returns an
   <type>integer</type> less than, equal to, or greater than zero when
   <varname>$a</varname> is respectively less than, equal to, or greater than
   <varname>$b</varname>. Comparisons are performed according to PHP's usual
   <link linkend="types.comparisons">type comparison rules</link>.
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// Integers
echo 1 <=> 1; // 0
echo 1 <=> 2; // -1
echo 2 <=> 1; // 1

// Floats
echo 1.5 <=> 1.5; // 0
echo 1.5 <=> 2.5; // -1
echo 2.5 <=> 1.5; // 1
 
// Strings
echo "a" <=> "a"; // 0
echo "a" <=> "b"; // -1
echo "b" <=> "a"; // 1
?>
]]>
   </programlisting>
  </informalexample>

  <!-- TODO: we don't need further details here, but this still has to be
       added to the operator precedence table -->
 </sect2>

 <sect2 xml:id="migration70.new-features.define-array">
  <title>Constant arrays using <function>define</function></title>

  <para>
   <type>Array</type> constants can now be defined with
   <function>define</function>. In PHP 5.6, they could only be defined with
   &const;.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
define('ANIMALS', [
    'dog',
    'cat',
    'bird'
]);

echo ANIMALS[1]; // outputs "cat"
?>
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration70.new-features.anonymous-classes">
  <title>Anonymous classes</title>

  <para>
   Support for anonymous classes has been added via <literal>new
   class</literal>. These can be used in place of full class definitions for
   throwaway objects:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
interface Logger {
    public function log(string $msg);
}

class Application {
    private $logger;

    public function getLogger(): Logger {
         return $this->logger;
    }

    public function setLogger(Logger $logger) {
         $this->logger = $logger;
    }
}

$app = new Application;
$app->setLogger(new class implements Logger {
    public function log(string $msg) {
        echo $msg;
    }
});

var_dump($app->getLogger());
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
object(class@anonymous)#2 (0) {
}
]]>
   </screen>
  </informalexample>

  <para>
   Full documentation can be found in the 
   <link linkend="language.oop5.anonymous">anonymous class reference</link>.
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.unicode-codepoint-escape-syntax">
  <title>Unicode codepoint escape syntax</title>

  <para>
   This takes a Unicode codepoint in hexadecimal form, and outputs that
   codepoint in UTF-8 to a double-quoted string or a heredoc. Any valid
   codepoint is accepted, with leading 0's being optional.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
echo "\u{aa}";
echo "\u{0000aa}";
echo "\u{9999}";
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
ª
ª (same as before but with optional leading 0's)
香
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration70.new-features.closure-call-method">
  <title><methodname>Closure::call</methodname></title>

  <para>
   <methodname>Closure::call</methodname> is a more performant, shorthand way
   of temporarily binding an object scope to a closure and invoking it.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class A {private $x = 1;}

// Pre PHP 7 code
$getXCB = function() {return $this->x;};
$getX = $getXCB->bindTo(new A, 'A'); // intermediate closure
echo $getX();

// PHP 7+ code
$getX = function() {return $this->x;};
echo $getX->call(new A);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
1
1
]]>
   </screen>
  </informalexample>
 </sect2>
 <sect2 xml:id="migration70.new-features.filtered-unserialize">
  <title>Filtered <function>unserialize</function></title>

  <para>
   This feature seeks to provide better security when unserializing objects on
   untrusted data. It prevents possible code injections by enabling the
   developer to whitelist classes that can be unserialized.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

// converts all objects into __PHP_Incomplete_Class object
$data = unserialize($foo, ["allowed_classes" => false]);

// converts all objects into __PHP_Incomplete_Class object except those of MyClass and MyClass2
$data = unserialize($foo, ["allowed_classes" => ["MyClass", "MyClass2"]);

// default behaviour (same as omitting the second argument) that accepts all classes
$data = unserialize($foo, ["allowed_classes" => true]);
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration70.new-features.intlchar">
  <title><classname>IntlChar</classname></title>

  <para>
   The new <classname>IntlChar</classname> class seeks to expose additional
   ICU functionality. The class itself defines a number of static methods and
   constants that can be used to manipulate unicode characters.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

printf('%x', IntlChar::CODEPOINT_MAX);
echo IntlChar::charName('@');
var_dump(IntlChar::ispunct('!'));
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
10ffff
COMMERCIAL AT
bool(true)
]]>
   </screen>
  </informalexample>

  <para>
   In order to use this class, the <link linkend="book.intl">Intl</link> extension must be installed.
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.expectations">
  <title>Expectations</title>

  <para>
   Expectations are backwards compatible enhancement to the older
   <function>assert</function> function. They enable for zero-cost assertions
   in production code, and provide the ability to throw custom exceptions on
   error.
  </para>

  <para>
   <function>assert</function> has the following prototype:
  </para>

  <informalexample>
   <programlisting>
<![CDATA[
void assert (mixed $expression [, mixed $message]);
]]>
   </programlisting>
  </informalexample>

  <para>
   As with the old API, if <varname>$expression</varname> is a string, then it will be
   evaluated. If the first argument is falsy, then the assertion fails. The
   second argument can either be a plain string (causing an AssertionException
   to be triggered), or a custom exception object containing an error message.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

ini_set('assert.exception', 1);

class CustomError extends AssertionError {}

assert(false, new CustomError('Some error message'));
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Fatal error: Uncaught CustomError: Some error message
]]>
   </screen>
  </informalexample>

  <para>
   With this feature comes two PHP.ini settings (along with their default values):
    - zend.assertions = 1
    - assert.exception = 0
  </para>

  <para>
   zend.assertions has three values:
    - 1 = generate and execute code (development mode)
    - 0 = generate code and jump around at it at runtime
    - -1 = don't generate any code (zero-cost, production mode)
  </para>

  <para>
   assert.exception means that an exception is thrown when an assertion fails.
   This is switched off by default to remain compatible with the old
   <function>assert</function> function.
  </para>
 </sect2>
 <sect2 xml:id="migration70.new-features.group-use-declarations">
  <title>Group <literal>use</literal> Declarations</title>

  <para>
   This gives the ability to group multiple <literal>use</literal> declarations
   according to the parent namespace. This seeks to remove code verbosity when
   importing multiple classes, functions, or constants that come under the same
   namespace.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

// Pre PHP 7 code
use some\namespace\ClassA;
use some\namespace\ClassB;
use some\namespace\ClassC as C;

use function some\namespace\fn_a;
use function some\namespace\fn_b;
use function some\namespace\fn_c;

use const some\namespace\ConstA;
use const some\namespace\ConstB;
use const some\namespace\ConstC;

// PHP 7+ code
use some\namespace\{ClassA, ClassB, ClassC as C};
use function some\namespace\{fn_a, fn_b, fn_c};
use const some\namespace\{ConstA, ConstB, ConstC};
]]>
   </programlisting>
  </informalexample>
 </sect2>
 <sect2 xml:id="migration70.new-features.generator-return-expressions">
  <title>Generator Return Expressions</title>

  <para>
   This feature builds upon the generator functionality introduced into PHP 5.5.
   It enables for a <literal>return</literal> statement to be used within a
   generator to enable for a final expression to be returned (return by
   reference is not allowed). This value can be fetched using the new 
   <literal>Generator::getReturn()</literal> method, which may only be used
   once the generator has finishing yielding values.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

$gen = (function() {
    yield 1;
    yield 2;

    return 3;
})();

foreach ($gen as $val) {
    echo $val, PHP_EOL;
}

echo $gen->getReturn(), PHP_EOL;
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
1
2
3
]]>
   </screen>
  </informalexample>

  <para>
   Being able to explicitly return a final value from a generator is a handy
   ability to have. This is because it enables for a final value to be returned
   by a generator (from perhaps some form of coroutine computation) that can be
   specifically handled by the client code executing the generator. This is far
   simpler than forcing the client code to firstly check whether the final
   value has been yielded, and then if so, to handle that value specifically.
  </para>
 </sect2>
 <sect2 xml:id="migration70.new-features.generator-delegation">
  <title>Generator Delegation</title>

  <para>
   Generator delegation builds upon the ability of being able to return
   expressions from generators. It does this by using an new syntax of
   <literal>yield from &lt;expr&gt;</literal>, where &lt;expr&gt; can be any
   <literal>Traversable</literal> <type>object</type> or <type>array</type>.
   This &lt;expr&gt; will be advanced until no longer valid, and then execution
   will continue in the calling generator. This feature enables
   <literal>yield</literal> statements to be broken down into smaller
   operations, thereby promoting cleaner code that has greater reusability.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

function gen()
{
    yield 1;
    yield 2;

    return yield from gen2();
}

function gen2()
{
    yield 3;

    return 4;
}

$gen = gen();

foreach ($gen as $val)
{
    echo $val, PHP_EOL;
}

echo $gen->getReturn();
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
1
2
3
4
]]>
   </screen>
  </informalexample>
 </sect2>
 <sect2 xml:id="migration70.new-features.intdiv">
  <title>Integer Division with <function>intdiv</function></title>

  <para>
   The <function>intdiv</function> function has been introduced to handle
   division where an integer is to be returned.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

var_dump(intdiv(10, 3));
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
int(3)
]]>
   </screen>
  </informalexample>
 </sect2>
 <sect2 xml:id="migration70.new-features.session-start-options">
  <title><function>session_start</function> Options</title>

  <para>
   This feature gives the ability to pass in an array of options to the
   <function>session_start</function> function. This is used to set
   session-based php.ini options:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

session_start(['cache_limiter' => 'private']); // sets the session.cache_limiter option to private
]]>
   </programlisting>
  </informalexample>

  <para>
   This feature also introduces a new php.ini setting (session.lazy_write)
   that is, by default, set to true and means that session data is only
   rewritten if it changes.
  </para>
 </sect2>
 <sect2 xml:id="migration70.new-features.preg-repace-callback-array-function">
  <title><function>preg_replace_callback_array</function> Function</title>

  <para>
   This new function enables code to be written more cleanly when using the
   <function>preg_replace_callback</function> function. Prior to PHP 7,
   callbacks that needed to be executed per regular expression required the
   callback function (second parameter of
   <function>preg_replace_callback</function>) to be polluted with lots of
   branching (a hacky method at best).
  </para>

  <para>
   Now, callbacks can be registered to each regular expression using an
   associative array, where the key is a regular expression and the value is a
   callback.
  </para>

  <para>
   Function Signature:
  </para>

  <programlisting>
<![CDATA[
string preg_replace_callback_array(array $regexesAndCallbacks, string $input);
]]>
  </programlisting>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

$tokenStream = []; // [tokenName, lexeme] pairs

$input = <<<'end'
$a = 3; // variable initialisation
end;

// Pre PHP 7 code
preg_replace_callback(
    [
        '~\$[a-z_][a-z\d_]*~i',
        '~=~',
        '~[\d]+~',
        '~;~',
        '~//.*~'
    ],
    function ($match) use (&$tokenStream) {
        if (strpos($match[0], '$') === 0) {
            $tokenStream[] = ['T_VARIABLE', $match[0]];
        } elseif (strpos($match[0], '=') === 0) {
            $tokenStream[] = ['T_ASSIGN', $match[0]];
        } elseif (ctype_digit($match[0])) {
            $tokenStream[] = ['T_NUM', $match[0]];
        } elseif (strpos($match[0], ';') === 0) {
            $tokenStream[] = ['T_TERMINATE_STMT', $match[0]];
        } elseif (strpos($match[0], '//') === 0) {
            $tokenStream[] = ['T_COMMENT', $match[0]];
        }
    },
    $input
);

// PHP 7+ code
preg_replace_callback_array(
    [
        '~\$[a-z_][a-z\d_]*~i' => function ($match) use (&$tokenStream) {
            $tokenStream[] = ['T_VARIABLE', $match[0]];
        },
        '~=~' => function ($match) use (&$tokenStream) {
            $tokenStream[] = ['T_ASSIGN', $match[0]];
        },
        '~[\d]+~' => function ($match) use (&$tokenStream) {
            $tokenStream[] = ['T_NUM', $match[0]];
        },
        '~;~' => function ($match) use (&$tokenStream) {
            $tokenStream[] = ['T_TERMINATE_STMT', $match[0]];
        },
        '~//.*~' => function ($match) use (&$tokenStream) {
            $tokenStream[] = ['T_COMMENT', $match[0]];
        }
    ],
    $input
);
]]>
   </programlisting>
  </informalexample>
 </sect2>
 <sect2 xml:id="migration70.new-features.csprng-functions">
  <title><link linkend="book.csprng">CSPRNG</link> Functions</title>

  <para>
   This feature introduces two new functions for generating cryptographically
   secure integers and strings. They expose simple APIs and are
   platform-independent.
  </para>

  <para>
   Function Signatures:
  </para>

  <programlisting>
<![CDATA[
string random_bytes(int length);
int random_int(int min, int max);
]]>
  </programlisting>

  <para>
   Both functions will emit an E_WARNING and return <literal>false</literal> if
   a source of sufficient randomness cannot be found.
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.list-arrayaccess">
  <title>
   <function>list</function> can always unpack objects implementing
   <classname>ArrayAccess</classname>
  </title>

  <para>
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
