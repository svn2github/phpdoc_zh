<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.2 $ -->
<!-- $Author: class007 $ -->
<!-- EN-Revision: 1.23 Maintainer: class007 Status: ready -->

 <appendix id="reserved">
  <title>保留字列表</title>
  <para>
   下面是 PHP 中预定义标识符的列表。没有列在后面的标识符可以在您的脚本中作为自定义标识符使用。这些列表包括关键字和预定义变量、常量和类名。这些列表可能有遗漏，它是不完整的。
  </para>

  <sect1 id="reserved.keywords">
  <title>关键词列表</title>
   <simpara>
    这些词语在 PHP 中有着特殊的意义。它们中有些像是函数，有些像是常量……但是它们不是的，它们只是语言结构的一部分。您不能使用它们的任何一个作为常量、函数名或是类名。但是可以将它们作为变量名使用，不过这样会导致混淆。
   </simpara>

   <table>
    <title>PHP 关键词</title>
    <tgroup cols="4">
     <tbody>
      <row>
       <entry>
        <link linkend="language.operators.logical">and</link>
       </entry>
       <entry>
        <link linkend="language.operators.logical">or</link>
       </entry>
       <entry>
        <link linkend="language.operators.logical">xor</link>
       </entry>
       <entry>
        __FILE__
       </entry>
      </row>
      <row>
       <entry>
        __LINE__
       </entry>
       <entry>
        <function>array</function>
       </entry>
       <entry>
        <link linkend="control-structures.foreach">as</link>
       </entry>
       <entry>
        <link linkend="control-structures.break">break</link>
       </entry>
       <entry>
        <link linkend="control-structures.switch">case</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="functions.old-syntax">cfunction</link>
       </entry>
       <entry>
        <link linkend="keyword.class">class</link>
       </entry>
       <entry>
        const
       </entry>
       <entry>
        <link linkend="control-structures.continue">continue</link>
       </entry>
       <entry>
        <link linkend="control-structures.declare">declare</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.switch">default</link>
       </entry>
       <entry>
        <function>die</function>
       </entry>
       <entry>
        <link linkend="control-structures.do.while">do</link>
       </entry>
       <entry>
        <function>echo</function>
       </entry>
       <entry>
        <link linkend="control-structures.else">else</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.elseif">elseif</link>
       </entry>
       <entry>
        <function>empty</function>
       </entry>
       <entry>
        <link linkend="control-structures.declare">enddeclare</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endfor</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endforeach</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.alternative-syntax">endif</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endswitch</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endwhile</link>
       </entry>
       <entry>
        <link linkend="function.eval">eval</link>
       </entry>
       <entry>
        <function>exit</function>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="keyword.class">extends</link>
       </entry>
       <entry>
        <link linkend="control-structures.for">for</link>
       </entry>
       <entry>
        <link linkend="control-structures.foreach">foreach</link>
       </entry>
       <entry>
        <link linkend="functions.user-defined">function</link>
       </entry>
       <entry>
        <link linkend="language.variables.scope">global</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.if">if</link>
       </entry>
       <entry>
        <function>include</function>
       </entry>
       <entry>
        <function>include_once</function>
       </entry>
       <entry>
        <function>isset</function>
       </entry>
       <entry>
        <function>list</function>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="keyword.class">new</link>
       </entry>
       <entry>
        <link linkend="functions.old-syntax">old_function</link>
       </entry>
       <entry>
        <function>print</function>
       </entry>
       <entry>
        <function>require</function>
       </entry>
       <entry>
        <function>require_once</function>
       </entry>
      </row>
      <row>
       <entry>
        <function>return</function>
       </entry>
       <entry>
        <link linkend="language.variables.scope">static</link>
       </entry>
       <entry>
        <link linkend="control-structures.switch">switch</link>
       </entry>
       <entry>
        <function>unset</function>
       </entry>
       <entry>
        use
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="keyword.class">var</link>
       </entry>
       <entry>
        <link linkend="control-structures.while">while</link>
       </entry>
       <entry>
        <constant>__FUNCTION__</constant>
       </entry>
       <entry>
        <constant>__CLASS__</constant>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </sect1>

  <sect1 id="reserved.variables">
   <title>预定义变量</title>

   <sect2 id="reserved.variables.server">
    <title>服务器变量：<varname>$_SERVER</varname></title>
    <note>
     <simpara>
      在 PHP 4.1.0 及以后版本使用。之前的版本，使用 <varname>$HTTP_SERVER_VARS</varname>。
     </simpara>
    </note>
    
    <simpara>
     <varname>$_SERVER</varname> 是一个包含诸如头部(headers)、路径(paths)和脚本位置(script locations)的数组。数组的实体由 web 服务器创建。不能保证所有的服务器都能产生所有的信息；服务器可能忽略了一些信息，或者产生了一些未在下面列出的新的信息。这意味着，大量的这些变量在 <ulink url="&url.cgispec;">CGI 1.1 specification</ulink> 中说明，所以您应该仔细研究它。
    </simpara>

    <simpara>
     这是一个“superglobal”，或者可以描述为自动全局变量。这只不过意味这它在所有的脚本中都有效。在函数或方法中您不需要使用 <command>global $_SERVER;</command> 访问它，就如同使用 <varname>$HTTP_SERVER_VARS</varname> 一样。
    </simpara>

    <simpara>
     <varname>$HTTP_SERVER_VARS</varname> 包含者同样的信息，但是不是一个自动全局变量。（注意： <varname>HTTP_SERVER_VARS</varname> 和 <varname>$_SERVER</varname> 是不同的变量，PHP 处理它们的方式不同。）
    </simpara>

    <simpara>
     如果设置了 <link linkend="ini.register-globals">register_globals</link> 指令，这些变量也在所有脚本中可用；也就是，分离了 <varname>$_SERVER</varname> 和 <varname>$HTTP_SERVER_VARS</varname> 数组。相关信息，请参阅安全的相关章节 <link linkend="security.registerglobals">使用 Register Globals</link>。这些单独的全局变量不是自动全局变量。
    </simpara>

    <simpara>
     您或许会发现下面列出的某些 $_SERVER 元素并不可用。注意，如果以命令行方式运行 PHP，下面列出的元素几乎没有有效的（或是没有任何实际意义的）。
    </simpara>

    <para>
     <variablelist>
      <varlistentry>
       <term>“<varname>PHP_SELF</varname>”</term>
       <listitem>
        <simpara>
         当前正在执行脚本的文件名，与 document root相关。举例来说，在URL地址为 <filename>http://example.com/test.php/foo.bar</filename> 的脚本中使用 <varname>$_SERVER['PHP_SELF']</varname> 将会得到 <filename>/test.php/foo.bar</filename> 这个结果。
        </simpara>
        <simpara>
         如果 PHP 以命令行方式运行，该变量无效。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>“<varname>argv</varname>”</term>
       <listitem>
        <simpara>
         传递给该脚本的参数。当脚本运行在命令行方式时，argv 变量传递给程序 C 语言样式的命令行参数。当调用 GET 方法时，该变量包含请求的数据。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>“<varname>argc</varname>”</term>
       <listitem>
        <simpara>
         包含传递给程序的命令行参数的个数（如果运行在命令行模式）。
        </simpara>
       </listitem>
      </varlistentry>
	  
      <varlistentry>
       <term>“<varname>GATEWAY_INTERFACE</varname>”</term>
       <listitem>
        <simpara>
         服务器使用的 CGI 规范的版本。例如，“<literal>CGI/1.1</literal>”。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_NAME</varname>'</term>
       <listitem>
        <simpara>
         当前运行脚本所在服务器主机的名称。如果该脚本运行在一个虚拟主机上，该名称是由那个虚拟主机所设置的值决定。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_SOFTWARE</varname>'</term>
       <listitem>
        <simpara>
         服务器标识的字串，在响应请求时的头部中给出。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>“<varname>SERVER_PROTOCOL</varname>”</term>
       <listitem>
        <simpara>
         请求页面时通信协议的名称和版本。例如，“<literal>HTTP/1.0</literal>”。
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>“<varname>REQUEST_METHOD</varname>”</term>
       <listitem>
        <simpara>
        访问页面时的请求方法。例如：“<literal>GET</literal>”、“<literal>HEAD</literal>”，“<literal>POST</literal>”，“<literal>PUT</literal>”。
        </simpara>
       </listitem>
      </varlistentry>
	  
      <varlistentry>
       <term>“<varname>QUERY_STRING</varname>”</term>
       <listitem>
        <simpara>
         查询(query)的字符串。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>“<varname>DOCUMENT_ROOT</varname>”</term>
       <listitem>
        <simpara>
         当前运行脚本所在的文档根目录。在服务器配置文件中定义。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>“<varname>HTTP_ACCEPT</varname>”</term>
       <listitem>
        <simpara>
         当前请求的 <literal>Accept:</literal> 头部的内容。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>“<varname>HTTP_ACCEPT_CHARSET</varname>”</term>
       <listitem>
        <simpara>
         当前请求的 <literal>Accept-Charset:</literal> 头部的内容。例如：“<literal>iso-8859-1,*,utf-8</literal>”。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>“<varname>HTTP_ACCEPT_ENCODING</varname>”</term>
       <listitem>
        <simpara>
         当前请求的 <literal>Accept-Encoding:</literal> 头部的内容。例如：“<literal>gzip</literal>”。
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>“<varname>HTTP_ACCEPT_LANGUAGE</varname>”</term>
       <listitem>
        <simpara>
         当前请求的 <literal>Accept-Language:</literal> 头部的内容。例如：“<literal>en</literal>”。
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>“<varname>HTTP_CONNECTION</varname>”</term>
       <listitem>
        <simpara>
         当前请求的 <literal>Connection:</literal> 头部的内容。例如：“<literal>Keep-Alive</literal>”。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>“<varname>HTTP_HOST</varname>”</term>
       <listitem>
        <simpara>
         当前请求的 <literal>Host:</literal> 头部的内容。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>“<varname>HTTP_REFERER</varname>”</term>
       <listitem>
        <simpara>
         链接到当前页面的前一页面的 URL 地址。不是所有的用户代理（浏览器）都会设置这个变量，而且有的还可以手工修改 <varname>HTTP_REFERER</varname>。因此，这个变量不总是正确真实的。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>“<varname>HTTP_USER_AGENT</varname>”</term>
       <listitem>
        <simpara>
         当前请求的 <literal>User_Agent:</literal> 头部的内容。该字符串表明了访问该页面的用户代理的信息。一个典型的例子是：<computeroutput>Mozilla/4.5 [en] (X11; U; Linux 2.2.9 i586)</computeroutput>。您也可以使用 <function>get_browser</function> 得到这个信息。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>“<varname>REMOTE_ADDR</varname>”</term>
       <listitem>
        <simpara>
         正在浏览当前页面用户的 IP 地址。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>“<varname>REMOTE_PORT</varname>”</term>
       <listitem>
        <simpara>
         用户连接到服务器时所使用的端口。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>“<varname>SCRIPT_FILENAME</varname>”</term>
       <listitem>
        <simpara>
         当前执行脚本的绝对路径名。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>“<varname>SERVER_ADMIN</varname>”</term>
       <listitem>
        <simpara>
         该值指明了 Apache 服务器配置文件中的 SERVER_ADMIN 参数。如果脚本运行在一个虚拟主机上，则该值是那个虚拟主机的值。        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>“<varname>SERVER_PORT</varname>”</term>
       <listitem>
        <simpara>
         服务器所使用的端口。默认为“<literal>80</literal>”。如果你使用 SSL 安全连接，则这个值为您所设置的 HTTP 端口。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>“<varname>SERVER_SIGNATURE</varname>”</term>
       <listitem>
        <simpara>
         包含服务器版本和虚拟主机名的字符串。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>“<varname>PATH_TRANSLATED</varname>”</term>
       <listitem>
        <simpara>
         当前脚本所在文件系统（不是文档根目录）的基本路径。这是在服务器进行虚拟到真实路径的映像后的结果。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>“<varname>SCRIPT_NAME</varname>”</term>
       <listitem>
        <simpara>
         包含当前脚本的路径。这在页面需要指向自己时非常有用。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>“<varname>REQUEST_URI</varname>”</term>
       <listitem>
        <simpara>
         访问此页面所需的 URI。例如，“<literal>/index.html</literal>”。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>“<varname>PHP_AUTH_USER</varname>”</term>
       <listitem>
        <simpara>
         当 PHP 运行在 Apache 模块方式下，并且正在使用 HTTP 认证功能，这个变量便是用户输入的用户名。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>“<varname>PHP_AUTH_PW</varname>”</term>
       <listitem>
        <simpara>
         当 PHP 运行在 Apache 模块方式下，并且正在使用 HTTP 认证功能，这个变量便是用户输入的密码。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>“<varname>PHP_AUTH_TYPE</varname>”</term>
       <listitem>
        <simpara>
         当 PHP 运行在 Apache 模块方式下，并且正在使用 HTTP 认证功能，这个变量便是认证的类型。
        </simpara>
       </listitem>
      </varlistentry>

     </variablelist>
    </para>

   </sect2>

   <sect2 id="reserved.variables.environment">
    <title>环境变量：<varname>$_ENV</varname></title>

    <note>
     <simpara>
      在 PHP 4.1.0 及以后版本使用。之前的版本，使用 <varname>$HTTP_ENV_VARS</varname>。
     </simpara>
    </note>
    
    <simpara>
     These variables are imported into PHP's global namespace from the
     environment under which the PHP parser is running. Many are
     provided by the shell under which PHP is running and different
     systems are likely running different kinds of shells, a
     definitive list is impossible. Please see your shell's
     documentation for a list of defined environment variables.
    </simpara>

    <simpara>
     Other environment variables include the CGI variables, placed
     there regardless of whether PHP is running as a server module or
     CGI processor.
    </simpara>
	
    <simpara>
     This is a 'superglobal', or automatic global, variable. This
     simply means that it is available in all scopes throughout a
     script. You don't need to do a <command>global
     $_ENV;</command> to access it within functions or methods, as
     you do with <varname>$HTTP_ENV_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_ENV_VARS</varname> contains the same initial
     information, but is not an autoglobal. (Note that
     <varname>HTTP_ENV_VARS</varname> and <varname>$_ENV</varname>
     are different variables and that PHP handles them as such)
    </simpara>

    <simpara>
     If the <link
     linkend="ini.register-globals">register_globals</link> directive
     is set, then these variables will also be made available in the
     global scope of the script; i.e., separate from the
     <varname>$_ENV</varname> and <varname>$HTTP_ENV_VARS</varname> 
     arrays.  For related information, see the security chapter titled 
     <link linkend="security.registerglobals">Using Register
      Globals</link>. These individual globals are not autoglobals.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.cookies">
    <title>HTTP Cookies: <varname>$_COOKIE</varname></title>

    <note>
     <simpara>
      Introduced in 4.1.0. In earlier versions, use
      <varname>$HTTP_COOKIE_VARS</varname>.
     </simpara>
    </note>
    
    <simpara>
     An associative array of variables passed to the current script
     via HTTP cookies.  Automatically global in any scope. 
    </simpara>

    <simpara>
     This is a 'superglobal', or automatic global, variable. This
     simply means that it is available in all scopes throughout a
     script. You don't need to do a <command>global
     $_COOKIE;</command> to access it within functions or methods, as
     you do with <varname>$HTTP_COOKIE_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_COOKIE_VARS</varname> contains the same initial
     information, but is not an autoglobal. (Note that
     <varname>HTTP_COOKIE_VARS</varname> and <varname>$_COOKIE</varname>
     are different variables and that PHP handles them as such)
    </simpara>

    <simpara>
     If the <link
     linkend="ini.register-globals">register_globals</link> directive
     is set, then these variables will also be made available in the
     global scope of the script; i.e., separate from the
     <varname>$_COOKIE</varname> and <varname>$HTTP_COOKIE_VARS</varname> 
     arrays.  For related information, see the security chapter titled 
     <link linkend="security.registerglobals">Using Register
      Globals</link>. These individual globals are not autoglobals.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.get">
    <title>HTTP GET variables: <varname>$_GET</varname></title>

    <note>
     <simpara>
      Introduced in 4.1.0. In earlier versions, use
      <varname>$HTTP_GET_VARS</varname>.
     </simpara>
    </note>
    
    <simpara>
     An associative array of variables passed to the current script
     via the HTTP GET method.  Automatically global in any scope. 
    </simpara>

    <simpara>
     This is a 'superglobal', or automatic global, variable. This
     simply means that it is available in all scopes throughout a
     script. You don't need to do a <command>global
     $_GET;</command> to access it within functions or methods, as
     you do with <varname>$HTTP_GET_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_GET_VARS</varname> contains the same initial
     information, but is not an autoglobal. (Note that
     <varname>HTTP_GET_VARS</varname> and <varname>$_GET</varname>
     are different variables and that PHP handles them as such)
    </simpara>

    <simpara>
     If the <link
     linkend="ini.register-globals">register_globals</link> directive
     is set, then these variables will also be made available in the
     global scope of the script; i.e., separate from the
     <varname>$_GET</varname> and <varname>$HTTP_GET_VARS</varname> 
     arrays.  For related information, see the security chapter titled 
     <link linkend="security.registerglobals">Using Register
      Globals</link>. These individual globals are not autoglobals.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.post">
    <title>HTTP POST variables: <varname>$_POST</varname></title>

    <note>
     <simpara>
      Introduced in 4.1.0. In earlier versions, use
      <varname>$HTTP_POST_VARS</varname>.
     </simpara>
    </note>
    
    <simpara>
     An associative array of variables passed to the current script
     via the HTTP POST method.  Automatically global in any scope. 
    </simpara>

    <simpara>
     This is a 'superglobal', or automatic global, variable. This
     simply means that it is available in all scopes throughout a
     script. You don't need to do a <command>global
     $_POST;</command> to access it within functions or methods, as
     you do with <varname>$HTTP_POST_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_POST_VARS</varname> contains the same initial
     information, but is not an autoglobal. (Note that
     <varname>HTTP_POST_VARS</varname> and <varname>$_POST</varname>
     are different variables and that PHP handles them as such)
    </simpara>

    <simpara>
     If the <link
     linkend="ini.register-globals">register_globals</link> directive
     is set, then these variables will also be made available in the
     global scope of the script; i.e., separate from the
     <varname>$_POST</varname> and <varname>$HTTP_POST_VARS</varname> 
     arrays.  For related information, see the security chapter titled 
     <link linkend="security.registerglobals">Using Register
      Globals</link>. These individual globals are not autoglobals.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.files">
    <title>HTTP File upload variables: <varname>$_FILES</varname></title>

    <note>
     <simpara>
      Introduced in 4.1.0. In earlier versions, use
      <varname>$HTTP_POST_FILES</varname>.
     </simpara>
    </note>
    
    <simpara>
     An associative array of items uploaded to the current script
     via the HTTP POST method.  Automatically global in any scope. 
    </simpara>

    <simpara>
     This is a 'superglobal', or automatic global, variable. This
     simply means that it is available in all scopes throughout a
     script. You don't need to do a <command>global
     $_FILES;</command> to access it within functions or methods, as
     you do with <varname>$HTTP_POST_FILES</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_POST_FILES</varname> contains the same
     information, but is not an autoglobal.
    </simpara>

    <simpara>
     If the <link
     linkend="ini.register-globals">register_globals</link> directive
     is set, then these variables will also be made available in the
     global scope of the script; i.e., separate from the
     <varname>$_FILES</varname> and <varname>$HTTP_POST_FILES</varname> 
     arrays.  For related information, see the security chapter titled 
     <link linkend="security.registerglobals">Using Register
      Globals</link>. These individual globals are not autoglobals.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.request">
    <title>Request variables: <varname>$_REQUEST</varname></title>

    <note>
     <simpara>
      Introduced in 4.1.0. There is no equivalent array in earlier
      versions. 
     </simpara>
    </note>
    
    <simpara>
     An associative array consisting of the contents of
     <varname>$_GET</varname>, <varname>$_POST</varname>,
     <varname>$_COOKIE</varname>, and <varname>$_FILES</varname>.
    </simpara>

    <simpara>
     This is a 'superglobal', or automatic global, variable. This
     simply means that it is available in all scopes throughout a
     script. You don't need to do a <command>global
     $_REQUEST;</command> to access it within functions or methods.
    </simpara>

    <simpara>
     If the <link
     linkend="ini.register-globals">register_globals</link> directive
     is set, then these variables will also be made available in the
     global scope of the script; i.e., separate from the
     <varname>$_REQUEST</varname> array.  For related information, see
     the security chapter titled <link
     linkend="security.registerglobals">Using Register
     Globals</link>. These individual globals are not autoglobals.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.session">
    <title>Session variables: <varname>$_SESSION</varname></title>

    <note>
     <simpara>
      Introduced in 4.1.0. In earlier versions, use
      <varname>$HTTP_SESSION_VARS</varname>.
     </simpara>
    </note>
    
    <simpara>
     An associative array containing session variables available to
     the current script. See the <link linkend="ref.session">Session
      functions</link> documentation for more information on how this
     is used.
    </simpara>

    <simpara>
     This is a 'superglobal', or automatic global, variable. This
     simply means that it is available in all scopes throughout a
     script. You don't need to do a <command>global
     $_SESSION;</command> to access it within functions or methods, as
     you do with <varname>$HTTP_SESSION_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_SESSION_VARS</varname> contains the same
     information, but is not an autoglobal. 
    </simpara>

    <simpara>
     If the <link
     linkend="ini.register-globals">register_globals</link> directive
     is set, then these variables will also be made available in the
     global scope of the script; i.e., separate from the
     <varname>$_SESSION</varname> and <varname>$HTTP_SESSION_VARS</varname> 
     arrays.  For related information, see the security chapter titled 
     <link linkend="security.registerglobals">Using Register
      Globals</link>. These individual globals are not autoglobals.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.globals">
    <title>Global variables: <varname>$GLOBALS</varname></title>

    <note>
     <simpara>
      <varname>$GLOBALS</varname> has been available since PHP 3.0.0.
     </simpara>
    </note>
    
    <simpara>
     An associative array containing references to all variables which
     are currently defined in the global scope of the script. The
     variable names are the keys of the array.
    </simpara>

    <simpara>
     This is a 'superglobal', or automatic global, variable. This
     simply means that it is available in all scopes throughout a
     script. You don't need to do a <command>global
     $GLOBALS;</command> to access it within functions or methods.
    </simpara>

   </sect2>

   <sect2 id="reserved.variables.phperrormsg">
    <title>The previous error message: <varname>$php_errormsg</varname></title>
    <simpara>
     <varname>$php_errormsg</varname> is a variable containing the
     text of the last error message generated by PHP. This variable
     will only be available within the scope in which the error
     occurred, and only if the <link
     linkend="ini.track-errors">track_errors</link> configuration
     option is turned on (it defaults to off).
    </simpara>
   </sect2>
  </sect1>


  <sect1 id="reserved.classes">
   <title>Predefined Classes</title>

   <sect2 id="reserved.classes.standard">
    <title>Standard Defined Classes</title>

    <simpara>
     These classes are defined in the standard set of functions included
     in the PHP build.
    </simpara>

    <variablelist>
     <varlistentry>
      <term><classname>Directory</classname></term>
      <listitem>
       <simpara>
        The class from which <function>dir</function> is instantiated.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>stdClass</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

   <sect2 id="reserved.classes.ming">
    <title><link linkend="ref.ming">Ming</link> Defined Classes</title>

    <simpara>
     These classes are defined in the 
     <link linkend="ref.ming">Ming</link> 
     extension, and will only be available when that extension has either 
     been compiled into PHP or dynamically loaded at runtime.
    </simpara>

    <variablelist>
     <varlistentry>
      <term><classname>swfshape</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swffill</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfgradient</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfbitmap</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swftext</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swftextfield</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swffont</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfdisplayitem</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfmovie</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfbutton</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfaction</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfmorph</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfsprite</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

   <sect2 id="reserved.classes.oci8">
    <title><link linkend="ref.oci8">Oracle 8</link> Defined Classes</title>

    <simpara>
     These classes are defined in the <link
     linkend="ref.oci8">Oracle 8</link> extension, and will only be
     available when that extension has either been compiled into PHP
     or dynamically loaded at runtime.
    </simpara>

    <variablelist>
     <varlistentry>
      <term><classname>OCI-Lob</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>OCI-Collection</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

   <sect2 id="reserved.classes.qtdom">
    <title><link linkend="ref.qtdom">qtdom</link> Defined Classes</title>

    <simpara>
     These classes are defined in the 
     <link linkend="ref.qtdom">qtdom</link> 
     extension, and will only be available when that extension has either 
     been compiled into PHP or dynamically loaded at runtime.
    </simpara>

    <variablelist>
     <varlistentry>
      <term><classname>QDomDocument</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>QDomNode</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

  </sect1>

  &appendices.reserved.constants;

</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
