<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.1 $ -->
<!-- $Author: dallas $ -->
<!-- EN-Revision:1.2 Maintainer: dallas Status: ready -->
<appendix id="wrappers">
 <title>支持的协议／封装协议列表</title>
 <para>
  以下是 PHP 内置用于文件系统函数例如
  <function>fopen</function> 和 <function>copy</function>
  的 URL 风格协议列表。除了这些封装协议之外，从
  PHP 4.3 起，你还可以用 PHP 脚本和
  <function>file_register_wrapper</function>
  写自己的封装协议。
 </para>

 <section id="wrappers.http">
  <title>HTTP 和 HTTPS</title>
  <simpara>PHP 3，PHP 4。自 PHP 4.3 起支持 https://</simpara>

  <itemizedlist>
   <listitem><simpara>http://example.com</simpara></listitem>
   <listitem><simpara>http://user:password@example.com</simpara></listitem>
   <listitem><simpara>https://example.com</simpara></listitem>
   <listitem><simpara>https://user:password@example.com</simpara></listitem>
  </itemizedlist>

  <simpara>
   允许通过 HTTP 1.0 使用 HTTP GET 方法对文件／资源进行只读访问。Host:
   报头也会通过请求发送出去以支持基于域名的虚拟主机。如果你在 ini
   文件或者流上下文配置了 <link linkend="ini.user-agent">user_agent</link>
   字符串，也会被包括在请求报头中。
  </simpara>
  <simpara>
   自 PHP 4.0.5 起支持重定向。如果使用较早版本的 PHP 则需要在 URL 末尾包括一个斜线。
  </simpara>
  <simpara>
   The stream allows access to the <emphasis>body</emphasis> of
   the resource; the headers are stored in the
   <parameter>$http_response_header</parameter> variable.
   Since PHP 4.3, the headers are available using
   <function>file_get_wrapper_data</function>.
  </simpara>
  <simpara>
   HTTP connections are read-only; you cannot write data or copy
   files to an HTTP resource.
  </simpara>
  <note>
   <simpara>HTTPS is supported starting from PHP 4.3, if you
    have compiled in support for OpenSSL.
   </simpara>
  </note>
 </section>

 <section id="wrappers.ftp">
  <title>FTP 和 FTPS</title>
  <simpara>PHP 3，PHP 4。自 PHP 4.3 起支持 ftps://</simpara>

  <itemizedlist>
   <listitem><simpara>ftp://example.com/pub/file.txt</simpara></listitem>
   <listitem><simpara>ftp://user:password@example.com/pub/file.txt</simpara></listitem>
   <listitem><simpara>ftps://example.com/pub/file.txt</simpara></listitem>
   <listitem><simpara>ftps://user:password@example.com/pub/file.txt</simpara></listitem>
  </itemizedlist>

  <simpara>
   Allows read access to existing files and creation of new files
   via FTP.  If the server does not support passive mode ftp, the
   connection will fail.
  </simpara>
  <simpara>
   You can open files for either reading or writing, but not both
   simultaneously.  If the remote file already exists on the ftp
   server and you attempt to open it for writing, the connection
   will fail.  If you need to update existing files over ftp,
   use <function>ftp_connect</function>.
  </simpara>
  <simpara>
   ftps:// was introduced in PHP 4.3.  It is the same as ftp://,
   but attempts to negotiate a secure connection with the ftp server.
   If the server does not support SSL, then the connection falls back
   to regular unencrypted ftp.
  </simpara>
  <note>
   <simpara>FTPS is supported starting from PHP 4.3, if you
    have compiled in support for OpenSSL.
   </simpara>
  </note>

 </section>

 <section id="wrappers.php">
  <title>PHP input/output streams</title>
  <simpara>PHP 3.0.13 and up, php://output since PHP 4.3</simpara>

  <itemizedlist>
   <listitem><simpara>php://stdin</simpara></listitem>
   <listitem><simpara>php://stdout</simpara></listitem>
   <listitem><simpara>php://stderr</simpara></listitem>
   <listitem><simpara>php://output</simpara></listitem>
  </itemizedlist>

  <simpara>
   php://stdin, php://stdout and php://stderr allow access to
   the corresponding input or output stream of the PHP process.
  </simpara>
  <simpara>
   php://output allows you to write to the output buffer mechanism
   in the same way as <function>print</function> and
   <function>echo</function>.
  </simpara>
  <simpara>
   php://stdin is read-only, whereas php://stdout, php://stderr
   and php://output are write-only.
  </simpara>
 </section>

 <section id="wrappers.compression">
  <title>Compression Streams</title>
  <simpara>zlib: PHP 4.0.4 - PHP 4.2.3 (systems with fopencookie only)</simpara>
  <simpara>compress.zlib:// and compress.bzip2:// PHP 4.3 and up</simpara>

  <itemizedlist>
   <listitem><simpara>zlib:</simpara></listitem>
   <listitem><simpara>compress.zlib://</simpara></listitem>
   <listitem><simpara>compress.bzip2://</simpara></listitem>
  </itemizedlist>

  <simpara> 
   zlib: works like <function>gzopen</function>, except that the
   stream can be used with <function>fread</function> and the other
   filesystem functions.  This is deprecated as of PHP 4.3 due
   to ambiguities with filenames containing ':' characters; use
   compress.zlib:// instead.
  </simpara>

  <simpara>
   compress.zlib:// and compress.bzip2:// are equivalent to
   <function>gzopen</function> and <function>bzopen</function> respectively,
   and operate even on systems that do not support fopencookie.
  </simpara>
 </section>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
