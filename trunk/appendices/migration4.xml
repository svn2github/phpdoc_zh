<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.3 $ -->
<!-- $Author: class007 $ -->
<!-- EN-Revision: 1.24 Maintainer: class007 Status: ready -->
 <appendix id="migration4">
  <title>从 PHP 3 移植到 PHP 4</title>
	
  <section id='migration4.changes'>
   <title>PHP 4 所作的改变</title>
   <para>
    PHP 4 和其整合的 Zend engine 极大的增强了 PHP 的性能和兼容性，对细节代码也十分注意。所以从 PHP 3 到 PHP 4 的移植要比从 PHP/FI 2 到 PHP 3 的移植容易得多。很多 PHP 3 的代码无需修改就可以在 PHP 4 中运行，但是您还是需要在转换程序运行环境时注意一些细节。下面就是一些提示。
   </para>
  </section>

  <section id="migration4.php4.with.php3">
   <title>同时运行 PHP 3 和 PHP 4</title>
   <simpara>
    最新的操作系统提供了执行多版本和范围程序的能力。这个功能使得在一个 Apache 服务器上同时运行 PHP 3 和 PHP 4 成为可能。   </simpara>
   <simpara>
    已知该功能可以运行在如下平台：
   </simpara>
   <itemizedlist>
     <listitem><simpara>包含新版本 binutils 的 Linux（binutils 2.9.1.0.25 测试通过）</simpara></listitem>
     <listitem><simpara>Solaris 2.5 或更高版本</simpara></listitem>
     <listitem><simpara>FreeBSD（3.2，4.0 测试通过）</simpara></listitem>
   </itemizedlist>
   <para>
    要启用该功能，需要配置(configure) PHP3 和 PHP4 的 APXS（使用 --with-apxs 参数）以及所需的链接扩展（使用 --enable-versioning 参数）。其余的和标准安装方法一样。例如：
    <informalexample>
     <programlisting role="configure">
<![CDATA[
$ ./configure \
  --with-apxs=/apache/bin/apxs \
  --enable-versioning \
  --with-mysql \
  --enable-track-vars
]]>
		 </programlisting>
		</informalexample>
   </para>
  </section>

  <section id="migration4.configuration">
   <title>移植配置文件</title>
   <para>
    全局配置文件 <filename>php3.ini</filename> 已经改名为 &php.ini;。
   </para>
   <para>
    Apache 配置文件也有一些细微的改动。PHP 模块所属的 MIME 类型已经改变。
    <informalexample>
		 <programlisting role="apache">
<![CDATA[
application/x-httpd-php3        -->    application/x-httpd-php
application/x-httpd-php3-source -->    application/x-httpd-php-source
]]>
		 </programlisting>
		</informalexample>
   </para>
   <para>
    您可以使得您的配置文件工作在两个 PHP 版本上（取决于哪个版本编译到服务器上），使用下面的语法：
    <informalexample>
		 <programlisting>
<![CDATA[
AddType  application/x-httpd-php3        .php3
AddType  application/x-httpd-php3-source .php3s

AddType  application/x-httpd-php         .php
AddType  application/x-httpd-php-source  .phps
]]>
     </programlisting>
		</informalexample>
   </para>
   <simpara>
    除此之外，关于 PHP 的 Apache 指令已经改变。
   </simpara>
   <para>
    从 PHP 4.0 开始，只有四个 Apache 指令与 PHP 相关：
    <informalexample>
		 <programlisting role="apache">
<![CDATA[
php_value [PHP directive name] [value]
php_flag [PHP directive name] [On|Off]
php_admin_value [PHP directive name] [value]
php_admin_flag [PHP directive name] [On|Off]
]]>
		 </programlisting>
		</informalexample>
   </para>
   <simpara>
    Admin values 和非 Admin values 有两处不同：
   </simpara>
   <itemizedlist>
    <listitem><simpara>
    Admin values（或 flags）指仅可以出现在服务器范围内的 apache 配置文件（例如：httpd.conf）。
    </simpara></listitem>
    <listitem><simpara>
    Standard values（或 flags）无法控制某种 PHP 指令，例如――安全模式（如果您在 .htaccess 文件中覆盖了安全模式的设定，安全模式就失去了它的意义）。相比较，Admin values 可以更改任何 PHP 指令的值。
    </simpara></listitem>
   </itemizedlist>
   <simpara>
    为了使翻译进程更加容易，PHP 4 捆绑了自动转换您的 Apache 配置文件和 .htaccess 文件使 PHP 3 和 PHP 4 都可以工作。但这些脚本并不转换 MIME 类型！您需要自己转换它。
   </simpara>
   <para>
    要转换您的 Apache 配置文件，运行 apconf-conv.sh 脚本（在 scripts/apache/ 目录）例如：
    <informalexample>
		 <programlisting role="shell">
<![CDATA[
~/php4/scripts/apache:#  ./apconf-conv.sh /usr/local/apache/conf/httpd.conf
]]>
		 </programlisting>
		</informalexample>
   </para>
   <simpara>
    您原来的配置文件会更名为 httpd.conf.orig。
   </simpara>
   <para>
    要转换您的 .htaccess 文件，运行 aphtaccess-conv.sh 脚本（也在 scripts/apache/ directory 目录下）：
    <informalexample>
		 <programlisting role="shell">
<![CDATA[
~/php4/scripts/apache:#  find / -name .htaccess -exec ./aphtaccess-conv.sh {} \;
]]>
		 </programlisting>
		</informalexample>
   </para>
   <simpara>
    同样的，您原有的 .htaccess 文件会以 .orig 后缀保存。
   </simpara>
   <simpara>
    运行转换脚本需要安装 awk。
   </simpara>
  </section>

  <section id='migration4.parser'>
   <title>解析器行为</title>
   <para>
    解析和执行现在变为两个完全独立的步骤。只有当完全成功的解析后，程序才会执行。
   </para>
   <para>
    这种改变所带来的一个新的要求是一个脚本文件所包含的另一个文件必须有着完整的语法结构。您不能将一个完整的控制结构分散在不同的文件中。这意味着您不能在一个文件中开始一个 <literal>for</literal> 或 <literal>while</literal> 循环、一个 <literal>if</literal> 或 <literal>switch</literal> 块，而在另一个文件中结束它们，或在另一个文件中使用    <literal>else</literal>、<literal>endif</literal>、<literal>case</literal> 或 <literal>break</literal>。
   </para>
   <para>
    但是在循环或其它控制结构中包含额外的脚本文件是允许的。只要控制的关键词和相应的 <literal>{...}</literal> 在同一个单元（文件或使用函数 <function>eval</function> 结合的字符串）中就可以了。
   </para>
   <para>
    不过，在循环或其它控制结构中包含额外的脚本文件并不是一个好的遍程习惯。
   </para>
   <para>
    另外，一种在 PHP 3 中不常见的代码――从一个 require 的文件中返回值――在 PHP 4 中也不能使用。而从一个 include 文件中返回值还是允许的。
   </para>
  </section>

  <section id='migration4.error-reporting'>
   <title>错误报告</title>
	 
   <section id='migration4.error-reporting.config'>
    <title>配置的改变</title>
    <para>
     PHP 3 错误报告的级别是简单的将不同的错误报告级别的数字相加而成。通常 15 代表报告所有错误，而 7 代表报告除了 notice 信息以外的所有错误。
    </para>
    <para>
     PHP 4 有一整套错误和警告的级别，并且配置解析器允许使用符号常量来定义显示的错误级别。
    </para>
    <para>
     错误报告级别应该被明确的配置。如果您不想显示某种错误信息，您需要将他们从 <literal>E_ALL</literal> 符号常量中排除。听起来很复杂吗？让我们看看吧。如果您想显示除了以 <literal>E_NOTICE</literal> 表示的 notice 信息以外的所有错误信息，您就应该在 &php.ini; 中设置：<literal>error_reporting = E_ALL &amp; ~ ( E_NOTICE )</literal> 。如果您还不想显示 warning 信息，只需要使用“|”运算符：<literal>error_reporting= E_ALL &amp; ~ ( E_NOTICE | E_WARNING )</literal>。
    </para>
    <warning>
     <para>
      使用旧有的从 7 到 15 的数字来设置错误报告的级别不是个好主意，因为这屏蔽了 PHP 4 中新的错误类产生的错误信息。这可能导致非常奇怪的现象：脚本不能执行却没有任何错误提示。
     </para>
     <para>
      这在过去已经导致了许多重复的 bug 报告。人们报告新的脚本引擎不能跟踪脚本文件中经常发生的缺少“}”的错误。事实上，这是由不正确的配置引起的。
     </para>
     <para>
      所以，检查您错误报告的设置是在脚本无法运行而没有出现错误提示时您应做的第一件事。Zend engine 到现在已经很成熟了，一般不会出现如此奇怪的现象。
     </para>
    </warning>
   </section>

   <section id='migration4.error-reporting.additions'>
    <title>额外的警告信息</title>
    <para>
     许多已存在的 PHP 3 代码使用的语言样式在现在应当被看做是非常糟糕的。因此，如果用 PHP 4 编译该脚本，会产生很多额外的警告信息。如果您不想看到这些信息，只要简单的把 E_NOTICE 选项关闭。但更好的做法是修正代码。
    </para>
    <para>
     最常见的出现 notice 提示信息的情况是在数组索引中使用没有加引号的字符串。PHP 3 和 PHP 4 在没有同名的常量定义时都会把它解释为字符串，但是无论何时只要有常量是以该字符串命名，您的脚本就可能会出现错误。如果有黑客利用这一点，设法重定义该常量，这个脚本就存在安全漏洞。所以只要出现未加引号的索引，PHP 4 就会警告您对它加以修正。举例来说，有漏洞的代码 <literal>$_SERVER[REQUEST_METHOD]</literal>，只要将它改为 <literal>$_SERVER['REQUEST_METHOD']</literal>，错误提示就会消失。    </para>
    <para>
     PHP 4 还会对未初始化的变量或数组元素加以提示。
    </para>
   </section>
   
  </section>

  <section id='migration4.initializers'>
   <title>初始化</title>
   <para>
    PHP 4 中静态变量和类成员仅接受标量值，而 PHP 3 中接受任何有效的表达式。这是由于解析和执行的分离，导致只有在解析器看到初始化代码后才能执行。
   </para>
   <para>
    您应该使用构造器来初始化类。对静态变量，只有静态的值才有意义。
   </para>
  </section>

  <section id='migration4.empty'>
   <title><literal>empty("0")</literal></title>
   <para>
    可能最具争议的改变是对 <function>empty</function> 函数行为的改变。一个仅包含字符“0”（是零，不是英文字母“O”）的字符串现在被认为是空字符串，而 PHP 3 中则相反。
   </para>
   <para> 
    这个改变对 web 程序很有意义，所有的 input 表单返回的都是 string，甚至填写的是数字。PHP 能够自动进行类型转换。但另一方面，这可能不是您代码的原意，可能导致您代码莫名其妙的错误。
   </para>
  </section>

  <section id='migration4.missing'>
   <title>缺少的函数</title>
   <para>
    虽然 PHP 4 带来了许多新功能、函数和扩展，您还是会发现一些本在 PHP 3 中存在的函数不见了。少量的内核函数被取消，因为它们不符合 Zend engine 新的解析――执行的模式。另外一些函数甚至是扩展完全的被荒废，是因为新的函数可以更好的完成旧函数的功能。一些函数只是空函数，而另一些因为版权冲突而取消了。
   </para>

   <section id='migration4.missing.concept'>
    <title>由于概念的改变而取消的函数</title>
    <para>
     PHP 4 现在将解析从执行中分离，因此不可能在运行时间改变解析器（现在已经嵌入 Zend engine）的行为，此时已经解析完毕了。所以函数 <function>short_tags</function> 不再存在。您仍然可以对 &php.ini; 文件设置适当的值以改变编译器的行为。
    </para>
    <para>
     另一个 PHP 3 的功能在 PHP 4 中不复存在：内部捆绑的 debug 接口。现在有第三方 Zend engine 的 add-ons 有着类似的功能。    </para>
   </section>

   <section id='migration4.deprecate'>
    <title>不推荐使用的函数和扩展</title>
    <para>
     Adabas and Solid 数据库扩展不再推荐使用。最好使用统一的 ODBC 扩展代替。
    </para>
   </section>

   <section id='migration4.unset'>
    <title><function>unset</function> 的改变</title>
    <para>
     <function>unset</function>，虽然仍然可以使用，但是它成为了语言结构的一部分，而不是一个函数。
    </para>
    <para>
     这对 <function>unset</function> 的行为不会产生什么影响，但是使用 <function>function_exists</function> 函数测试“unset”时会返回 &false;。它已经是 PHP 语言的一部分，虽然它很像函数。这和 <function>echo</function> 是一样的。
    </para>
    <para>
     另一个实际的改变是，不能间接调用 <function>unset</function>。因此 <literal>$func="unset"; $func($somevar)</literal> 不再工作。
    </para>
   </section>
  </section>

  <section id='migration4.extensions'>
   <title>PHP 3 扩展</title>
   <para>
    为 PHP 3 写的扩展在 PHP 4 中不再工作，二进制或源代码都不行。但如果您有扩展的原始代码，将它转换为 PHP 4 的扩展很容易。这已经不在本文所讨论的范围中了。
   </para>
  </section>

  <section id='migration4.strings'>
   <title>字符串中的变量替换</title>
   <para>
    PHP 4 添加了一个新的机制以替换字符串中的变量。您现在可以访问字符串中的对象成员变量和多维数组元素。
   </para>
   <para>
    如果您想这么做，您需要使用大括号将一个美元符号和变量名括起来，就像这样：<literal>{$...}</literal>。
   </para>
   <para>
    要在字符串中嵌入对象成员变量，只要简单的写 <literal>"text {$obj-&gt;member} text"</literal>。而在 PHP 3 中，您得使用 <literal>"text ".$obj-&gt;member." text"</literal>。
   </para>
   <para>
    这个改进可以使代码更易读，但这可能会破坏用 PHP 3 写的代码。但是您很容易修正它：在代码中查找字符串中的 <literal>{$</literal>，使用搜索替换工具将它替换为 <literal>\{$</literal>。
   </para>
  </section>

  <section id='migration4.cookies'>
   <title>Cookies</title>
   <para>
    PHP 3 在设置 cookies 时有一个不好的习惯，它总是将 <function>setcookie</function> 所设置的 cookies 以相反的顺序保存。PHP 4 改变了这个习惯，创建 cookies 时以您的代码中设置 cookies 的顺序保存。
   </para>
   <para>
    这可能使得原有代码不能正常工作。但是 PHP 3 的行为的确很古怪，应该加以改变以防止将来产生更多的问题。
   </para>
  </section>

  <section id='migration4.variables'>
   <title>处理全局变量</title>
   <para>
    在 PHP 3 和 PHP 4 早些版本中处理全局变量的重心放在了易用上，而现在，焦点放到了如何更安全的处理它们上。在 PHP 3 中下面的代码工作正常，但是 PHP 4 中就要使用 unset($GLOBALS["id"]);。这仅仅是全局变量处理的一个问题。您应当总是使用 $GLOBALS，在更新版本的 PHP 4 中您应该强迫自己在大部分情况中使用它。更多信息请参考 <link linkend="references.global"> <literal>global</literal> 参考章节</link>.
   </para>
   <example>
    <title>全局变量的移植</title>
    <programlisting role="php">
<![CDATA[
<?php
$id = 1;
function test()
{
    global $id;
    unset($id);
}
test();
echo($id); // 在 PHP 4 中这里会打印出 1
?>
]]>
    </programlisting>
   </example>
  </section>

 </appendix>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
