<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 339923 Maintainer: jhdxr Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="migration71.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>新特性</title>

 <sect2 xml:id="migration71.new-features.nullable-types">
  <title>可为空（Nullable）类型</title>

  <para>
   类型现在允许为空，当启用这个特性时，传入的参数或者函数返回的结果要么是给定的类型，要么是
   <type>null</type> 。可以通过在类型前面加上一个问号来使之成为可为空的。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function test(?string $name)
{
    var_dump($name);
}
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string(5) "tpunt"
NULL
Uncaught Error: Too few arguments to function test(), 0 passed in...
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.void-functions">
  <title>Void 函数</title>

  <para>
   在PHP 7 中引入的其他返回值类型的基础上，一个新的返回值类型<type>void</type>被引入。
   返回值声明为 void 类型的方法要么干脆省去 return 语句，要么使用一个空的 return 语句。 
   对于 void 函数来说，null 不是一个合法的返回值。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function swap(&$left, &$right) : void
{
    if ($left === $right) {
        return;
    }

    $tmp = $left;
    $left = $right;
    $right = $tmp;
}

$a = 1;
$b = 2;
var_dump(swap($a, $b), $a, $b);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
null
int(2)
int(1)
]]>
   </screen>
  </informalexample>

  <para>
   试图去获取一个 void 方法的返回值会得到 null ，并且不会产生任何警告。这么做的原因是不想影响更高层次的方法。
  </para>
 </sect2>

 <sect2 xml:id="migration71.new-features.symmetric-array-destructuring">
  <title>Symmetric array destructuring</title>

  <para>
   短数组语法（<literal>[]</literal>）现在可以用于将数组的值赋给一些变量（包括在<literal>foreach</literal>中）。
   这种方式使从数组中提取值变得更为容易。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$data = [
    ['id' => 1, 'name' => 'Tom'],
    ['id' => 2, 'name' => 'Fred'],
];

while (['id' => $id, 'name' => $name] = $data) {
    // logic here with $id and $name
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.class-constant-visibility">
  <title>类常量可见性</title>

  <para>
   现在起支持设置类常量的可见性。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class ConstDemo
{
    const PUBLIC_CONST_A = 1;
    public const PUBLIC_CONST_B = 2;
    protected const PROTECTED_CONST = 3;
    private const PRIVATE_CONST = 4;
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.iterable-pseudo-type">
  <title><type>iterable</type> 伪类</title>

  <para>
   现在引入了一个新的被称为<type>iterable</type>的伪类 (与<type>callable</type>类似)。
   这可以被用在参数或者返回值类型中，它代表接受数组或者实现了<classname>Traversable</classname>接口的对象。
   至于子类，当用作参数时，子类可以收紧父类的<type>iterable</type>类型到<type>array</type>
   或一个实现了<classname>Traversable</classname>的对象。对于返回值，子类可以拓宽父类的
   <type>array</type>或对象返回值类型到<type>iterable</type>。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function iterator(iterable $iter)
{
    foreach ($iter as $val) {
        //
    }
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.mulit-catch-exception-handling">
  <title>多异常捕获处理</title>

  <para>
   一个catch语句块现在可以通过管道字符(<literal>|</literal>)来实现多个异常的捕获。
   这对于需要同时处理来自不同类的不同异常时很有用。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
try {
    // some code
} catch (FirstException | SecondException $e) {
    // handle first and second exceptions
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.support-for-keys-in-list">
  <title><function>list</function>现在支持键名</title>

  <para>
   现在<function>list</function>支持在它内部去指定键名。这意味着它可以将任意类型的数组
   都赋值给一些变量（与短数组语法类似）
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$data = [
    ['id' => 1, 'name' => 'Tom'],
    ['id' => 2, 'name' => 'Fred'],
];

while (list('id' => $id, 'name' => $name) = $data) {
    // logic here with $id and $name
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.support-for-negative-string-offsets">
  <title>支持为负的字符串偏移量</title>

  <para>
   现在所有接偏移量的内置的基于字符串的函数都支持接受负数作为偏移量，包括数组解引用操作符(<literal>[]</literal>).
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump("abcdef"[-2]);
var_dump(strpos("aabbcc", "b", -3));
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string (1) "e"
int(3)
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.support-for-aead-in-ext-openssl">
  <title>ext/openssl 支持 AEAD</title>

  <para>
   通过给<function>openssl_encrypt</function>和<function>openssl_decrypt</function>
   添加额外参数，现在支持了AEAD (模式 GCM and CCM)。
  </para>
 </sect2>

 <sect2 xml:id="migration71.new-features.convert-callables-to-closures">
  <title>通过 <methodname>Closure::fromCallable</methodname> 将callables转为闭包</title>

  <para>
   <classname>Closure</classname>新增了一个静态方法，用于将<type>callable</type>快速地
   转为一个<classname>Closure</classname> 对象。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class Test
{
    public function exposeFunction()
    {
        return Closure::fromCallable([$this, 'privateFunction']);
    }

    private function privateFunction($param)
    {
        var_dump($param);
    }
}

$privFunc = (new Test)->exposeFunction();
$privFunc('some value');
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string(10) "some value"
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.asynchronous-signal-handling">
  <title>Asynchronous signal handling</title>

  <para>
   A new function called <function>pcntl_async_signals</function> has been
   introduced to enable asynchronous signal handling without using ticks (which
   introduce a lot of overhead).
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
pcntl_async_signals(true); // turn on async signals

pcntl_signal(SIGHUP,  function($sig) {
    echo "SIGHUP\n";
});

posix_kill(posix_getpid(), SIGHUP);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
SIGHUP
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.http2-server-push-support-in-ext-curl">
  <title>HTTP/2 server push support in ext/curl</title>

  <para>
   Support for server push has been added to the CURL extension (requires
   version 7.46 and above). This can be leveraged through the
   <function>curl_multi_setopt</function> function with the new
   <constant>CURLMOPT_PUSHFUNCTION</constant> constant. The constants
   <constant>CURL_PUST_OK</constant> and <constant>CURL_PUSH_DENY</constant> have also been
   added so that the execution of the server push callback can either be
   approved or denied.
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
