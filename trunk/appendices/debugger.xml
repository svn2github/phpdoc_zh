<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.1 $ -->
<!-- $AUTHOR$ -->
<!-- EN-Revision: 1.22 Maintainer: class007 Status: working -->
 <appendix id="debugger">
  <title>排除 PHP 程序的错误</title>

  <sect1 id="debugger-about">
   <title>关于除错器(debugger)</title>
   <simpara>
    PHP 3 内建网络除错器支持
   </simpara>
   <simpara>
    PHP 4 并没有内部除错工具。
    但是您可以使用外部除错工具。
    <ulink url="&url.zend.ide;">Zend IDE</ulink> 就是其中之一，它包含一个除错器。也有一些免费的除错器，比如在 <ulink url="&url.dbg;">&url.dbg;</ulink> 上的 DBG，还有 <ulink url="&url.apd;">Advanced PHP Debugger</ulink> (APD)。
   </simpara>
  </sect1>

  <sect1 id="debugger-using">
   <title>使用除错器</title>

   <para>
    PHP 3 中的内建除错器对跟踪一些逻辑 Bug (evasive bugs) 是非常有用的。
    除错器在 PHP 3 每次启动时连接到一个 <acronym>TCP</acronym> 端口。
    从 Web 请求中产生的所有错误信息都将发送到该 TCP 连接。
    这些信息可以被可运行在 <acronym>IDE</acronym> 或者可编程编辑器（例如 Emacs）中的除错服务器处理。
   </para>
   <para>
    如何设置除错器：
    <orderedlist>
     <listitem>
      <simpara> 
       在<link linkend="configuration.file">配置文件</link>中为除错器设置一个 TCP 端口（设定 <link
       linkend="ini.debugger.port">debugger.port</link> 参数）并且启用它（设定 <link linkend="ini.debugger.enabled">debugger.enabled</link> 参数）。
      </simpara>
     </listitem>
     <listitem>
      <simpara> 
       在某处设置该 TCP 端口的监听器(listener)（例如：在 UNIX 上使用 <command>socket -l -s 1400</command> 命令）。
      </simpara>
     </listitem>
     <listitem>
      <simpara> 
       在你的代码中，运行
       “debugger_on(<replaceable>host</replaceable>)”，
       <replaceable>host</replaceable> 指运行 <acronym>TCP</acronym> 监听器的主机名或 IP 地址。
      </simpara>
     </listitem>
    </orderedlist>
    现在，所有的错误、警告、注意等的 debug 信息都会显示在那个监听器中。
    <emphasis>即使你使用 <function>error_reporting</function> 关闭它们，它们也会在监听器中显示</emphasis>。
   </para>
  </sect1>

  <sect1 id="debugger-protocol">
   <title>Debugger Protocol</title>
   <para>
    The PHP 3 debugger protocol is line-based. Each line has a
    <emphasis>type</emphasis>, and several lines compose a
    <emphasis>message</emphasis>. Each message starts with a line of
    the type <literal>start</literal> and terminates with a line of
    the type <literal>end</literal>. PHP 3 may send lines for different
    messages simultaneously.
   </para>
   <para>
    A line has this format:
    <informalexample>
     <literallayout>
<replaceable>date</replaceable> <replaceable>time</replaceable>
<replaceable>host</replaceable>(<replaceable>pid</replaceable>)
<replaceable>type</replaceable>:
<replaceable>message-data</replaceable>
     </literallayout>
    </informalexample>
    <variablelist>
     <varlistentry>
      <term><replaceable>date</replaceable></term>
      <listitem>
       <simpara>
	Date in ISO 8601 format
	(<replaceable>yyyy</replaceable>-<replaceable>mm</replaceable>-<replaceable>dd</replaceable>)
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><replaceable>time</replaceable></term>
      <listitem>
       <simpara>Time including microseconds:
	<replaceable>hh</replaceable>:<replaceable>mm</replaceable>:<replaceable>uuuuuu</replaceable>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><replaceable>host</replaceable></term>
      <listitem>
       <simpara>
	DNS name or IP address of the host where the script error was
	generated.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><replaceable>pid</replaceable></term>
      <listitem>
       <simpara>
	PID (process id) on <replaceable>host</replaceable> of the
	process with the PHP 3 script that generated this error.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><replaceable>type</replaceable></term>
      <listitem>
       <para>
	Type of line. Tells the receiving program about what it
	should treat the following data as:
	<table>
	 <title>Debugger Line Types</title>
	 <tgroup cols="2">
	  <thead>
	   <row>
	    <entry>Name</entry>
	    <entry>Meaning</entry>
	   </row>
	  </thead>
	  <tbody>
	   <row>
	    <entry><literal>start</literal></entry> 
	    <entry>
	     Tells the receiving program that a debugger message
	     starts here. The contents of
	     <replaceable>data</replaceable> will be the type of error
	     message, listed below.
	    </entry>
	   </row>
	   <row>
	    <entry><literal>message</literal></entry>
	    <entry>The PHP 3 error message.</entry>
	   </row>
	   <row>
	    <entry><literal>location</literal></entry>
	    <entry>
	     File name and line number where the error occurred. The
	     first <literal>location</literal> line will always
	     contain the top-level location.
	     <replaceable>data</replaceable> will contain
	     <literal><replaceable>file</replaceable>:<replaceable>line</replaceable></literal>.
	     There will always be a <literal>location</literal> line
	     after <literal>message</literal> and after every
	     <literal>function</literal>.
	    </entry>
	   </row>
	   <row>
	    <entry>
	     <literal>frames</literal></entry> <entry>Number of frames
	     in the following stack dump. If there are four frames,
	     expect information about four levels of called functions.
	     If no "frames" line is given, the depth should be assumed
	     to be 0 (the error occurred at top-level).
	    </entry>
	   </row>
	   <row>
	    <entry>
	     <literal>function</literal></entry> 
	    <entry>
	     Name of function where the error occurred. Will be
	     repeated once for every level in the function call
	     stack.
	    </entry>
	   </row>
	   <row>
	    <entry><literal>end</literal></entry> 
	    <entry>
	     Tells the receiving program that a debugger message ends
	     here.
	    </entry>
	   </row>
	  </tbody>
	 </tgroup>
	</table>
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><replaceable>data</replaceable></term>
      <listitem>
       <simpara>Line data.</simpara>
      </listitem>
     </varlistentry>
    </variablelist>

    <table>
     <title>Debugger Error Types</title>
     <tgroup cols="2">
      <thead>
       <row>
	<entry>Debugger</entry>
	<entry>PHP 3 Internal</entry>
       </row>
      </thead>
      <tbody>
       <row>
	<entry><errortype>warning</errortype></entry>
	<entry><errortype>E_WARNING</errortype></entry>
       </row>
       <row>
	<entry><errortype>error</errortype></entry>
	<entry><errortype>E_ERROR</errortype></entry>
       </row>
       <row>
	<entry><errortype>parse</errortype></entry>
	<entry><errortype>E_PARSE</errortype></entry>
       </row>
       <row>
	<entry><errortype>notice</errortype></entry>
	<entry><errortype>E_NOTICE</errortype></entry>
       </row>
       <row>
	<entry><errortype>core-error</errortype></entry>
	<entry><errortype>E_CORE_ERROR</errortype></entry>
       </row>
       <row>
	<entry><errortype>core-warning</errortype></entry>
	<entry><errortype>E_CORE_WARNING</errortype></entry>
       </row>
       <row>
	<entry><errortype>unknown</errortype></entry>
	<entry>(any other)</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
    
    <example>
     <title>Example Debugger Message</title>
     <literallayout>
1998-04-05 23:27:400966 lucifer.guardian.no(20481) start: notice
1998-04-05 23:27:400966 lucifer.guardian.no(20481) message: Uninitialized variable
1998-04-05 23:27:400966 lucifer.guardian.no(20481) location: (&null;):7
1998-04-05 23:27:400966 lucifer.guardian.no(20481) frames: 1
1998-04-05 23:27:400966 lucifer.guardian.no(20481) function: display
1998-04-05 23:27:400966 lucifer.guardian.no(20481) location: /home/ssb/public_html/test.php3:10
1998-04-05 23:27:400966 lucifer.guardian.no(20481) end: notice
     </literallayout>
    </example>
   </para>
  </sect1>

 </appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
