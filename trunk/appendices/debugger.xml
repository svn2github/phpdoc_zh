<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.8 $ -->
<!-- $Author: yincheng $ -->
<!-- EN-Revision: 1.25 Maintainer: class007 Status: ready -->
<!-- CREDITS: dallas -->
 <appendix id="debugger">
  <title>PHP 的调试</title>

  <sect1 id="debugger-about">
   <title>关于调试器</title>
   <simpara>
    PHP 3 包含有基于网络的调试支持。
   </simpara>
   <simpara>
    PHP 4 并没有内部调试器。但是您可以使用外部调试器。<ulink url="&url.zend.ide;">Zend
    IDE</ulink> 就是其中之一，它包含一个调试器。也有一些免费的调试器，比如在
    <ulink url="&url.dbg;">&url.dbg;</ulink> 上的 DBG，<ulink url="&url.apd;">Advanced
    PHP Debugger</ulink>（APD）或者 <ulink url="&url.xdebug;">Xdebug</ulink>，它甚至有一个在本节中说明的和
    PHP 3 的调试功能兼容的调试界面。
   </simpara>
  </sect1>

  <sect1 id="debugger-using">
   <title>使用调试器</title>

   <para>
    PHP 3 中的内建调试器对跟踪一些逻辑 Bug (evasive bugs) 是非常有用的。调试器在 PHP 3 每次启动时连接到一个 <acronym>TCP</acronym> 端口。从 Web 请求中产生的所有错误信息都将发送到该 TCP 连接。这些信息可以被可运行在 <acronym>IDE</acronym> 或者可编程编辑器（例如 Emacs）中的除错服务器处理。
   </para>
   <para>
    如何设置调试器：
    <orderedlist>
     <listitem>
      <simpara> 
       在<link linkend="configuration.file">配置文件</link>中为调试器设置一个 TCP 端口（设定 <link linkend="ini.debugger.port">debugger.port</link> 参数）并且启用它（设定 <link linkend="ini.debugger.enabled">debugger.enabled</link> 参数）。
      </simpara>
     </listitem>
     <listitem>
      <simpara> 
       在某处设置该 TCP 端口的监听器(listener)（例如：在 UNIX 上使用 <command>socket -l -s 1400</command> 命令）。
      </simpara>
     </listitem>
     <listitem>
      <simpara> 
       在你的代码中，运行“debugger_on(<replaceable>host</replaceable>)”，<replaceable>host</replaceable> 指运行 <acronym>TCP</acronym> 监听器的主机名或 IP 地址。
      </simpara>
     </listitem>
    </orderedlist>
    现在，所有的错误、警告、注意等的 debug 信息都会显示在那个监听器中。<emphasis>即使你使用 <function>error_reporting</function> 关闭它们，它们也会在监听器中显示</emphasis>。
   </para>
  </sect1>

  <sect1 id="debugger-protocol">
   <title>调试器协议</title>
   <para>
    PHP 3 调试器协议以行为单位。每一行有一个<emphasis>类型(type)</emphasis>，某几行组成一个<emphasis>消息(message)</emphasis>。每一个消息起始于包含类型 <literal>start</literal> 的一行，并终止于包含类型 <literal>end</literal> 的一行。PHP 3 可以同时发送不同的消息行。
   </para>
   <para>
    行的格式如下：
    <informalexample>
     <literallayout>
    <![CDATA[
    date time host(pid) type: message-data
        ]]>
     </literallayout>
    </informalexample>
    </para>
    <para>
    <variablelist>
     <varlistentry>
      <term><replaceable>date</replaceable></term>
      <listitem>
       <simpara>
        date 使用 ISO 8601 格式：（<replaceable>yyyy</replaceable>-<replaceable>mm</replaceable>-<replaceable>dd</replaceable>）
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><replaceable>time</replaceable></term>
      <listitem>
       <simpara>
        time 精确到毫秒：<replaceable>hh</replaceable>:<replaceable>mm</replaceable>:<replaceable>uuuuuu</replaceable>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><replaceable>host</replaceable></term>
      <listitem>
       <simpara>
        产生错误的 PHP 脚本所在主机的 DNS 名或 IP 地址。
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><replaceable>pid</replaceable></term>
      <listitem>
       <simpara>
        产生错误的 PHP 脚本在 <replaceable>host</replaceable> 中的 PID（进程 id）。
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><replaceable>type</replaceable></term>
      <listitem>
       <para>
	行的类型。它告诉接收信息的程序如何处理下面的数据：
        <table>
         <title>调试器行类型</title>
         <tgroup cols="2">
          <thead>
           <row>
            <entry>名称</entry>
            <entry>含义</entry>
           </row>
          </thead>
          <tbody>
           <row>
            <entry><literal>start</literal></entry> 
            <entry>
             告诉接收的程序，调试信息由此开始。<replaceable>data</replaceable> 的内容将会是错误消息的类型，在本页面下方列出。
            </entry>
           </row>
           <row>
            <entry><literal>message</literal></entry>
            <entry>PHP 3 错误消息。</entry>
           </row>
           <row>
            <entry><literal>location</literal></entry>
            <entry>
             发生错误的文件名和行号。<literal>location</literal> 的第一行总是包含顶级(top-level)地址。<replaceable>data</replaceable> 包含 <literal><replaceable>file</replaceable>:<replaceable>line</replaceable></literal>。在 <literal>message</literal> 和每一个 <literal>function</literal> 之后总有一行 <literal>location</literal> 行。
            </entry>
           </row>
           <row>
            <entry>
             <literal>frames</literal>
            </entry> 
            <entry>
             在下面的堆栈卸出中所包含的帧数。如果有四帧，则应该有四层函数调用的信息。如果没有给出“frames”这一行，则深度被假定为 0（错误发生在最顶层）。
            </entry>
           </row>
           <row>
            <entry>
             <literal>function</literal></entry> 
            <entry>
             发生错误的函数。在调用函数堆栈的每级只重复一次。
            </entry>
           </row>
           <row>
            <entry><literal>end</literal></entry> 
            <entry>
             告诉接收的程序，除错信息到此结束。
            </entry>
           </row>
          </tbody>
         </tgroup>
        </table>
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><replaceable>data</replaceable></term>
      <listitem>
       <simpara>每行的数据。</simpara>
      </listitem>
     </varlistentry>
    </variablelist>

    <table>
     <title>调试器错误类型</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>调试器</entry>
        <entry>PHP 3 内部</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><errortype>warning</errortype></entry>
        <entry><errortype>E_WARNING</errortype></entry>
       </row>
       <row>
        <entry><errortype>error</errortype></entry>
        <entry><errortype>E_ERROR</errortype></entry>
       </row>
       <row>
        <entry><errortype>parse</errortype></entry>
        <entry><errortype>E_PARSE</errortype></entry>
       </row>
       <row>
        <entry><errortype>notice</errortype></entry>
        <entry><errortype>E_NOTICE</errortype></entry>
       </row>
       <row>
        <entry><errortype>core-error</errortype></entry>
        <entry><errortype>E_CORE_ERROR</errortype></entry>
       </row>
       <row>
        <entry><errortype>core-warning</errortype></entry>
        <entry><errortype>E_CORE_WARNING</errortype></entry>
       </row>
       <row>
        <entry><errortype>unknown</errortype></entry>
        <entry>（其它任何错误）</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
    
    <example>
     <title>调试器错误消息示例</title>
     <literallayout>
       <![CDATA[
1998-04-05 23:27:400966 lucifer.guardian.no(20481) start: notice
1998-04-05 23:27:400966 lucifer.guardian.no(20481) message: Uninitialized variable
1998-04-05 23:27:400966 lucifer.guardian.no(20481) location: (null;):7
1998-04-05 23:27:400966 lucifer.guardian.no(20481) frames: 1
1998-04-05 23:27:400966 lucifer.guardian.no(20481) function: display
1998-04-05 23:27:400966 lucifer.guardian.no(20481) location: /home/ssb/public_html/test.php3:10
1998-04-05 23:27:400966 lucifer.guardian.no(20481) end: notice
       ]]>
     </literallayout>
    </example>
   </para>
  </sect1>

 </appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
