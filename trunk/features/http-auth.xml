<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.3 $ -->
<!-- $Author: dallas $ -->
<!-- EN-Revision: 1.28 Maintainer: Gregory Status: ready -->
 <chapter id="features.http-auth">
  <title>用 PHP 进行 HTTP 认证</title>

  <simpara>
   PHP 的 HTTP 认证机制仅在 PHP 以 Apache 模块方式运行时才有效，因此该功能不适用于 CGI 版本。在 Apache 模块的 PHP 脚本中，可以用 <function>header</function> 函数来向客户端浏览器发送“Authentication Required”信息，使其弹出一个用户名/密码输入窗口。当用户输入用户名和密码后，包含有 URL 的 PHP 脚本将会再次和<link linkend="reserved.variables">预定义变量</link> <varname>PHP_AUTH_USER</varname>、<varname>PHP_AUTH_PW</varname> 和 <varname>PHP_AUTH_TYPE</varname> 一起被调用，这三个变量分别被设定为用户名，密码和认证类型。预定义变量保存在 <link linkend="reserved.variables.server">$_SERVER</link> 或者 <varname>$HTTP_SERVER_VARS</varname> 数组中。系统仅支持“基本的”认证。请参阅 <function>header</function> 函数以获取更多信息。
  </simpara>

  <note>
   <title>PHP 版本问题</title>
   <para>
    <link linkend="language.variables.superglobals">Autoglobals</link> 全局变量，包括
     <link linkend="reserved.variables.server">$_SERVER</link>等，在 PHP <ulink url="&url.php.release4.1.0;">4.1.0</ulink> 以后版本有效， <varname>$HTTP_SERVER_VARS</varname> 从 PHP 3 开始有效。
   </para>
  </note>

  <para>
   以下是在页面上强迫客户端认证的脚本范例：
  </para>
  <para>
   <example>
    <title>HTTP 认证范例</title>
    <programlisting role="php">
<![CDATA[
<?php
  if (!isset($_SERVER['PHP_AUTH_USER'])) {
    header('WWW-Authenticate: Basic realm="My Realm"');
    header('HTTP/1.0 401 Unauthorized');
    echo 'Text to send if user hits Cancel button';
    exit;
  } else {
    echo "<p>Hello {$_SERVER['PHP_AUTH_USER']}.</p>";
    echo "<p>You entered {$_SERVER['PHP_AUTH_PW']} as your password.</p>";
  }
?>
]]>
    </programlisting>
   </example>
  </para>

  <note>
   <title>兼容性问题</title>
   <para>
    在编写 HTTP 头信息代码时请格外小心。为了对所有的客户端保证兼容性，关键字“Basic”的第一个字母必须大写为“B”，分界字符串必须用双引号（不是单引号）引用；并且在头信息行 <emphasis>HTTP/1.0 401</emphasis> 中，在 <emphasis>401</emphasis> 前必须有且仅有一个空格。
   </para>
  </note>

  <para>
   在以上例程中，我们仅仅只打印出了 <varname>PHP_AUTH_USER</varname> 和 <varname>PHP_AUTH_PW</varname> 的值，但在实际运用中，您可能需要对用户名和密码的合法性进行检查。或许进行数据库的查询，或许从 dbm 文件中检索。
  </para>

  <para>
   请注意由 Internet Explorer 浏览器本身的问题带来的错误。它对头信息的顺序显得似乎有点吹毛求疵。目前在 <literal>HTTP/1.0 401</literal> 头之前发送 <emphasis>WWW-Authenticate</emphasis> 头信息能解决该问题。
  </para>

  <simpara>
   为了防止有人编写恶意代码来显示为以前通过传统外部机制认证的页面提供的密码，当某些页面的外部认证被激活时，PHP_AUTH 变量将不会被设置。在这种情况下，我们可以使用 <varname>REMOTE_USER</varname> 变量来辨别外部认证的用户，即 <varname>$_SERVER['REMOTE_USER']</varname>。
  </simpara>

  <note>
   <title>设置问题</title>
   <para>
    PHP 用 <literal>AuthType</literal> 选项来判断外部认证机制是否有效。当您希望使用 PHP 认证的时候，请记得关闭该选项，否则任何认证的尝试操作都会失败。
   </para>
  </note>

  <simpara>
   注意，这仍然不能防止有人通过未认证的 URL 来从同一服务器上认证的 URL 上偷取密码。
  </simpara>
  <simpara>
   Netscape Navigator 和 Internet Explorer 浏览器都会在收到 401 的服务端返回信息时清空所有的本地浏览器整个域的 Windows 认证缓存。这能够有效的注销一个用户，并迫使他们重新输入他们的用户名和密码。有些人用这种方法来使登录状态“过期”，或者作为“注销”按钮的响应行为。
  </simpara>
  <para>
   <example>
     <title>强迫重新输入用户名和密码的 HTTP 认证的范例</title>
     <programlisting role="php">
<![CDATA[
<?php
  function authenticate() {
    header('WWW-Authenticate: Basic realm="Test Authentication System"');
    header('HTTP/1.0 401 Unauthorized');
    echo "You must enter a valid login ID and password to access this resource\n";
    exit;
  }
 
  if (!isset($_SERVER['PHP_AUTH_USER']) || ($_POST['SeenBefore'] == 1 && $_POST['OldAuth'] == $_SERVER['PHP_AUTH_USER'])) {
   authenticate();
  } 
  else {
   echo "<p>Welcome: {$_SERVER['PHP_AUTH_USER']}<br>";
   echo "Old: {$_REQUEST['OldAuth']}";
   echo "<form action='{$_SERVER['PHP_SELF']}' METHOD='POST'>\n";
   echo "<input type='hidden' name='SeenBefore' value='1'>\n";
   echo "<input type='hidden' name='OldAuth' value='{$_SERVER['PHP_AUTH_USER']}'>\n";
   echo "<input type='submit' value='Re Authenticate'>\n";
   echo "</form></p>\n";
  }
?>
]]>
    </programlisting>
   </example>
  </para>
  <simpara>
   该行为对于 HTTP 基本认证标准来说并不是必须的，因此您不能依靠这种方法。对 Lynx 浏览器的测试表明 Lynx 在收到 401 的服务端返回信息时不会清空认证文件，因此只要对认证文件的检查要求没有变化，只要用户点击“后退”按钮，再点击“前进”按钮，其原有资源仍然能够被访问。不过，用户可以通过按“_”键来清空他们的认证信息。
  </simpara>
  <simpara>
   同时请注意，由于微软的 IIS 服务器的一些限制，该功能对 IIS 和 PHP 的 CGI 版本不适用。
  </simpara>

  <note>
   <para>
    如果<link linkend="ini.safe-mode">安全模式</link>被激活，脚本的 UID 会被加到 <literal>WWW-Authenticate</literal> 头信息的 <literal>realm</literal> 部分。
   </para>
  </note>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
