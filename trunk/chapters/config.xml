<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.15 $ -->
<!-- $Author: gregory $ -->
<!-- EN-Revision: 1.91 Maintainer: Gregory  Status: working -->
 <chapter id="configuration">
  <title>Configuration</title>

  <sect1 id="configuration.file">
   <title>The configuration file</title>

   <simpara>
    The configuration file (called <filename>php3.ini</filename> in
    PHP 3.0, and simply &php.ini; as of PHP 4.0)
    is read when PHP starts up. For the server module versions of PHP,
    this happens only once when the web server is started. For the
    <acronym>CGI</acronym> and <acronym>CLI</acronym> version, it happens on
    every invocation.
   </simpara>
   <para>
    The default location of &php.ini; is a compile time option (see the <link
    linkend="faq.installation.phpini">FAQ</link> entry), but can be changed
    for the <acronym>CGI</acronym> and <acronym>CLI</acronym> version with the
    <literal>-c</literal> command line switch, see the chapter about using
    <literal>PHP</literal> from the <link
    linkend="features.commandline">command line</link>. You can also use the
    environment variable <literal>PHPRC</literal> for an additional path to
    search for a &php.ini; file.
   </para>
   <para>
    Not every PHP directive is documented below. For a list of all directives, 
    please read your well commented &php.ini; file. You may want to view the 
    latest <ulink url="&url.php.cvs.phpini;">php.ini here</ulink> from CVS.
   </para>
   <note>
    <para>
     The default value for the PHP directive 
     <link linkend="ini.register-globals">register_globals</link> changed from 
     <emphasis>on</emphasis> to <emphasis>off</emphasis> in PHP 
     <ulink url="&url.php.release4.2.0;">4.2.0</ulink>.
    </para>
   </note>
   <para>
    <example>
     <title>&php.ini; example</title>
     <programlisting role="ini">
<![CDATA[
; any text on a line after an unquoted semicolon (;) is ignored
[php] ; section markers (text within square brackets) are also ignored
; Boolean values can be set to either:
;    true, on, yes
; or false, off, no, none
register_globals = off
magic_quotes_gpc = yes

; you can enclose strings in double-quotes
include_path = ".:/usr/local/lib/php"

; backslashes are treated the same as any other character
include_path = ".;c:\php\lib"
]]>
</programlisting>
<!-- TODO: add more details about values and expressions -->
    </example>
   </para>
  </sect1>

  <sect1 id="configuration.changes">
   <title>How to change configuration settings</title>

   <sect2 id="configuration.changes.apache">
    <title>Running <literal>PHP</literal> as Apache module</title>
    <simpara>
     When using PHP as an Apache module, you can also change the
     configuration settings using directives in Apache configuration
     files (e.g. <filename>httpd.conf</filename>) and
     <filename>.htaccess</filename> files (You will need
     "AllowOverride Options" or "AllowOverride All" privileges)
    </simpara>

    <para>
     With PHP 4.0, there are several Apache directives that allow you
     to change the PHP configuration from within the Apache configuration
     files.  For a listing of which directives are 
     <constant>PHP_INI_ALL</constant>, <constant>PHP_INI_PERDIR</constant>, 
     or <constant>PHP_INI_SYSTEM</constant>, have a look at the table
     found within the <function>ini_set</function> documentation.
    </para>
    
    <note>
     <simpara>
      With PHP 3.0, there are Apache directives that correspond to each
      configuration setting in the <filename>php3.ini</filename> name,
      except the name is prefixed by "php3_".
     </simpara>
    </note>

    <para>
     <variablelist>
      <varlistentry>
       <term>
        <systemitem role="directive">php_value</systemitem>
        <parameter>name</parameter>
        <parameter>value</parameter>
       </term>
       <listitem>
        <para>
         Sets the value of the specified directive.
         Can be used only with PHP_INI_ALL and PHP_INI_PERDIR type directives.
         To clear a previously set value use <literal>none</literal>
         as the value.
         <informalexample>
          <programlisting role="ini">
<![CDATA[
php_value auto_prepend_file none
]]>
          </programlisting>
         </informalexample>
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>
        <systemitem role="directive">php_flag</systemitem>
        <parameter>name</parameter>
        <parameter>on|off</parameter>
       </term>
       <listitem>
        <para>
         Used to set a Boolean configuration directive.
         Can be used only with PHP_INI_ALL and PHP_INI_PERDIR type directives.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>
        <systemitem role="directive">php_admin_value</systemitem>
        <parameter>name</parameter>
        <parameter>value</parameter>
       </term>
       <listitem>
        <para>
         Sets the value of the specified directive.
         This can NOT be used in <filename>.htaccess</filename> files.
         Any directive type set with <systemitem role="directive">php_admin_value</systemitem>
         can not be overridden by <filename>.htaccess</filename> or virtualhost directives.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>
        <systemitem role="directive">php_admin_flag</systemitem>
        <parameter>name</parameter>
        <parameter>on|off</parameter>
       </term>
       <listitem>
        <para>
         Used to set a Boolean configuration directive.
         This can NOT be used in <filename>.htaccess</filename> files.
         Any directive type set with <systemitem role="directive">php_admin_flag</systemitem>
         can not be overridden by <filename>.htaccess</filename> or virtualhost directives.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
     <example>
      <title>Apache configuration example</title>
      <programlisting role="ini">
<![CDATA[
<IfModule mod_php4.c>
  php_value include_path ".:/usr/local/lib/php"
  php_admin_flag safe_mode on
</IfModule>
<IfModule mod_php3.c>
  php3_include_path ".:/usr/local/lib/php"
  php3_safe_mode on
</IfModule>
]]>
      </programlisting>
     </example>
    
     <note>
      <para>
       PHP constants do not exist outside of PHP. For example, in 
       <filename>httpd.conf</filename> you can not use PHP constants 
       such as <constant>E_ALL</constant> or <constant>E_NOTICE</constant> 
       to set the <link linkend="ini.error-reporting">error_reporting</link> 
       directive as they will have no meaning and will evaluate to
       <emphasis>0</emphasis>. Use the associated bitmask values instead.
       These constants can be used in &php.ini;
      </para>
     </note>
    </para>
   </sect2>

   <sect2 id="configuration.changes.other">
    <title>Other interfaces to <literal>PHP</literal></title>
    <para>
     Regardless of the interface to <literal>PHP</literal> you can change
     certain values at runtime of your scripts through
     <function>ini_set</function>. The following table provides an overview
     at which level a directive can be set/changed.
    </para>
    <para>
     <table>
     <title>Definition of PHP_INI_* constants</title>
     <tgroup cols="3">
      <thead>
       <row>
        <entry>Constant</entry>
        <entry>Value</entry>
        <entry>Meaning</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>PHP_INI_USER</entry>
        <entry>1</entry>
        <entry>Entry can be set in user scripts</entry>
       </row>
       <row>
        <entry>PHP_INI_PERDIR</entry>
        <entry>2</entry>
        <entry>
         Entry can be set in &php.ini;, <filename>.htaccess</filename> or
         <filename>httpd.conf</filename>
        </entry>
       </row>
       <row>
        <entry>PHP_INI_SYSTEM</entry>
        <entry>4</entry>
        <entry>
         Entry can be set in &php.ini; or <filename>httpd.conf</filename>
        </entry>
       </row>
       <row>
        <entry>PHP_INI_ALL</entry>
        <entry>7</entry>
        <entry>Entry can be set anywhere</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
    </para>
    <para>
     You can view the settings of the configuration values in
     the output of <function>phpinfo</function>. You can also
     access the values of individual configuration directives using
     <function>ini_get</function> or <function>get_cfg_var</function>.
    </para>
   </sect2>
  </sect1>

  <sect1 id="configuration.directives">
   <title>Configuration directives</title>

  <sect2 id="ini.sect.httpd-options">
   <title>Httpd Options</title>
    <para>
     <table>
      <title>Httpd Options</title>
      <tgroup cols="3">
       <thead>
        <row>
         <entry>Name</entry>
         <entry>Default</entry>
         <entry>Changeable</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>async_send</entry>
         <entry>"0"</entry>
         <entry>PHP_INI_ALL</entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </para>
    <para>
    </para>
   </sect2>

  <sect2 id="ini.sect.language-options">
   <title>Language Options</title>
   <para>
   <table>
    <title>Language and Misc Configuration Options</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Name</entry>
       <entry>Default</entry>
       <entry>Changeable</entry>
      </row>
     </thead>
     <tbody>
     <row>
      <entry>short_open_tag</entry>
      <entry>On</entry>
      <entry>PHP_INI_SYSTEM|PHP_INI_PERDIR</entry>
     </row>
     <row>
      <entry>asp_tags</entry>
      <entry>Off</entry>
      <entry>PHP_INI_SYSTEM|PHP_INI_PERDIR</entry>
     </row>
     <row>
      <entry>precision</entry>
      <entry>"14"</entry>
      <entry>PHP_INI_ALL</entry>
     </row>
     <row>
      <entry>y2k_compliance</entry>
      <entry>Off</entry>
      <entry>PHP_INI_ALL</entry>
     </row>
     <row>
      <entry>allow_call_time_pass_reference</entry>
      <entry>On</entry>
      <entry>PHP_INI_SYSTEM|PHP_INI_PERDIR</entry>
     </row>
     <row>
      <entry>expose_php</entry>
      <entry>On</entry>
      <entry>PHP_INI_SYSTEM</entry>
     </row>
    </tbody>
    </tgroup>
   </table>
   </para>
    <para>
     Here is a short explanation of the configuration directives.
     <variablelist>
      <varlistentry id="ini.short-open-tag">
       <term>
        <parameter>short_open_tag</parameter>
        <type>boolean</type>
       </term>
       <listitem>
        <para>
         Tells whether the short form (<userinput>&lt;? ?&gt;</userinput>)
         of PHP's open tag should be allowed.  If you want to use PHP in
         combination with XML, you can disable this option in order to 
         use <userinput>&lt;?xml ?&gt;</userinput> inline.  Otherwise, you 
         can print it with PHP, for example: <userinput>&lt;?php echo '&lt;?xml 
         version="1.0"'; ?&gt;</userinput>.  Also if disabled, you must use the 
         long form of the PHP open tag (<userinput>&lt;?php ?&gt;</userinput>).
        </para>
        <note>
         <para>
          This directive also affects the shorthand <userinput>&lt;?=</userinput>, 
          which is identical to <userinput>&lt;? echo</userinput>.  Use of this 
          shortcut requires <systemitem role="directive">short_open_tag</systemitem>
          to be on.
         </para>
        </note>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.asp-tags">
       <term>
        <parameter>asp_tags</parameter>
        <type>boolean</type>
       </term>
       <listitem>
        <simpara>
         Enables the use of ASP-like &lt;% %&gt; tags in addition to
         the usual &lt;?php ?&gt; tags. This includes the
         variable-value printing shorthand of &lt;%= $value %&gt;. For 
         more information, see <link 
         linkend="language.basic-syntax.phpmode">Escaping from HTML</link>.
        </simpara>
        <note>
         <para>
          Support for ASP-style tags was added in 3.0.4.
         </para>
        </note>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.precision">
       <term>
        <parameter>precision</parameter>
        <type>integer</type>
       </term>
       <listitem>
        <simpara>
         The number of significant digits displayed in floating point numbers.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.y2k-compliance">
       <term>
        <parameter>y2k_compliance</parameter>
        <type>boolean</type>
       </term>
       <listitem>
        <simpara>
         Enforce year 2000 compliance (will cause problems with non-compliant browsers)
        </simpara>
       </listitem>
      </varlistentry>


      <varlistentry id="ini.allow-call-time-pass-reference">
       <term>
        <parameter>allow_call_time_pass_reference</parameter>
        <type>boolean</type>
       </term>
       <listitem>
        <para>
         Whether to enable the ability to force arguments to be passed by reference
         at function call time. This method is deprecated and is likely to be
         unsupported in future versions of PHP/Zend.  The encouraged method of
         specifying which arguments should be passed by reference is in the function
         declaration.  You're encouraged to try and turn this option Off and make
         sure your scripts work properly with it in order to ensure they will work
         with future versions of the language (you will receive a warning each time
         you use this feature, and the argument will be passed by value instead of by
         reference).
        </para>
        <para>
         See also <link linkend="language.references">References Explained</link>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.expose-php">
       <term>
        <parameter>expose_php</parameter>
        <type>boolean</type>
       </term>
       <listitem>
        <para>
         Decides whether PHP may expose the fact that it is installed on the server
         (e.g. by adding its signature to the Web server header). It is no security
         threat in any way, but it makes it possible to determine whether you use PHP
         on your server or not.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
   </sect2>

  <sect2 id="ini.sect.resource-limits">
   <title>Resource Limits</title>
   <para>
    <table>
     <title>Resource Limits</title>
     <tgroup cols="3">
      <thead>
       <row>
        <entry>Name</entry>
        <entry>Default</entry>
        <entry>Changeable</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>memory_limit</entry>
        <entry>"8M"</entry>
        <entry>PHP_INI_ALL</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
   <para>
    Here is a short explanation of the configuration directives.
    <variablelist>

     <varlistentry id="ini.memory-limit">
      <term>
       <parameter>memory_limit</parameter>
       <type>integer</type>
      </term>
      <listitem>
       <para>
        This sets the maximum amount of memory in bytes that a script
        is allowed to allocate.  This helps prevent poorly written
        scripts for eating up all available memory on a server.  In order to
        use this directive you must have enabled it at compile time.  So, 
        your configure line would have included:
        <literal>--enable-memory-limit</literal>. Note that you have to set 
        it to -1 if you don't want any limit for your memory.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
   <para>
    See also: <link linkend="ini.max-execution-time">max_execution_time</link>.
   </para>
  </sect2>

  <sect2 id="ini.sect.data-handling">
   <title>Data Handling</title>
    <para>
     <table>
      <title>Data Handling Configuration Options</title>
      <tgroup cols="3">
       <thead>
        <row>
         <entry>Name</entry>
         <entry>Default</entry>
         <entry>Changeable</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>track-vars</entry>
         <entry>"On"</entry>
         <entry>PHP_INI_??</entry>
        </row>
        <row>
         <entry>arg_separator.output</entry>
         <entry>"&amp;"</entry>
         <entry>PHP_INI_ALL</entry>
        </row>
        <row>
         <entry>arg_separator.input</entry>
         <entry>"&amp;"</entry>
         <entry>PHP_INI_SYSTEM|PHP_INI_PERDIR</entry>
        </row>
        <row>
         <entry>variables_order</entry>
         <entry>"EGPCS"</entry>
         <entry>PHP_INI_ALL</entry>
        </row>
        <row>
         <entry>register_globals</entry>
         <entry>"Off"</entry>
         <entry>PHP_INI_PERDIR|PHP_INI_SYSTEM</entry>
        </row>
        <row>
         <entry>register_argc_argv</entry>
         <entry>"On"</entry>
         <entry>PHP_INI_PERDIR|PHP_INI_SYSTEM</entry>
       </row>
       <row>
        <entry>post_max_size</entry>
        <entry>"8M"</entry>
        <entry>PHP_INI_SYSTEM|PHP_INI_PERDIR</entry>
       </row>
       <row>
        <entry>gpc_order</entry>
        <entry>"GPC"</entry>
        <entry>PHP_INI_ALL</entry>
       </row>
       <row>
        <entry>auto_prepend_file</entry>
        <entry>""</entry>
        <entry>PHP_INI_SYSTEM|PHP_INI_PERDIR</entry>
       </row>
       <row>
        <entry>auto_append_file</entry>
        <entry>""</entry>
        <entry>PHP_INI_SYSTEM|PHP_INI_PERDIR</entry>
       </row>
        <row>
         <entry>default_mimetype</entry>
         <entry>"text/html"</entry>
         <entry>PHP_INI_ALL</entry>
        </row>
        <row>
         <entry>default_charset</entry>
         <entry>"iso-8859-1"</entry>
         <entry>PHP_INI_ALL</entry>
        </row>
        <row>
         <entry>always_populate_raw_post_data</entry>
         <entry>"0"</entry>
         <entry>PHP_INI_SYSTEM|PHP_INI_PERDIR</entry>
        </row>
        <row>
         <entry>allow_webdav_methods</entry>
         <entry>"0"</entry>
         <entry>PHP_INI_SYSTEM|PHP_INI_PERDIR</entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </para>
    <para>
     Here is a short explanation of the configuration directives.
     <variablelist>
      <varlistentry id="ini.track-vars">
       <term>
        <parameter>track_vars</parameter>
        <type>boolean</type>
       </term>
       <listitem>
        <para>
         If enabled, then Environment, GET, POST, Cookie, and Server
         variables can be found in the global associative arrays
         <varname>$_ENV</varname>,
         <varname>$_GET</varname>,
         <varname>$_POST</varname>,
         <varname>$_COOKIE</varname>, and
         <varname>$_SERVER</varname>.
        </para>
        <para>
         Note that as of PHP 4.0.3, <systemitem
         role="directive">track_vars</systemitem> is always turned on.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.arg-separator.output">
       <term>
        <parameter>arg_separator.output</parameter>
        <type>string</type>
       </term>
       <listitem>
        <para>
         The separator used in PHP generated URLs to separate arguments.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.arg-separator.input">
       <term>
        <parameter>arg_separator.input</parameter>
        <type>string</type>
       </term>
       <listitem>
        <para>
         List of separator(s) used by PHP to parse input URLs into variables.
        </para>
        <note>
         <para>
          Every character in this directive is considered as separator!
         </para>
        </note>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.variables-order">
       <term>
        <parameter>variables_order</parameter>
        <type>string</type>
       </term>
       <listitem>
        <para>
         Set the order of the EGPCS (Environment, GET, POST, Cookie,
         Server) variable parsing. The default setting of this
         directive is "EGPCS". Setting this to "GP", for example,
         will cause PHP to completely ignore environment variables,
         cookies and server variables, and to overwrite any GET
         method variables with POST-method variables of the same name.
        </para>
        <para>
         See also <link linkend="ini.register-globals">register_globals</link>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.register-globals">
       <term>
        <parameter>register_globals</parameter>
        <type>boolean</type>
       </term>
       <listitem>
        <para>
         Tells whether or not to register the EGPCS (Environment, GET,
         POST, Cookie, Server) variables as global variables. For example;
         if register_globals = on, the url 
         <literal>http://www.example.com/test.php?id=3</literal> will produce
         <varname>$id</varname>. Or, <varname>$DOCUMENT_ROOT</varname> from
         <varname>$_SERVER['DOCUMENT_ROOT']</varname>. You may want to turn
         this off if you don't want to clutter your scripts' global scope with
         user data.  As of PHP <ulink url="&url.php.release4.2.0;">4.2.0</ulink>,
         this directive defaults to <emphasis>off</emphasis>.  It's preferred to
         go through PHP <link linkend="reserved.variables">Predefined Variables
         </link> instead, such as the 
         <link linkend="language.variables.superglobals">superglobals</link>:
         <varname>$_ENV</varname>, <varname>$_GET</varname>,
         <varname>$_POST</varname>, <varname>$_COOKIE</varname>, and
         <varname>$_SERVER</varname>. Please read the security chapter on
         <link linkend="security.registerglobals">Using register_globals</link>
         for related information.
        </para>
        <para>
         Please note that <systemitem role="directive">register_globals</systemitem>
         cannot be set at runtime (<function>ini_set</function>). Although, you can
         use <filename>.htaccess</filename> if your host allows it as described
         above. An example <filename>.htaccess</filename> entry:
         <userinput>php_flag register_globals on</userinput>.
        </para>
        <note>
         <para>
          <systemitem role="directive">register_globals</systemitem> is affected 
          by the <link linkend="ini.variables-order">variables_order</link> 
          directive.
         </para>
        </note>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.register-argc-argv">
       <term>
        <parameter>register_argc_argv</parameter>
        <type>boolean</type>
       </term>
       <listitem>
        <simpara>
         Tells PHP whether to declare the argv &amp; argc variables 
         (that would contain the GET information).
        </simpara>
        <simpara>
         See also <link linkend="features.commandline">command line</link>.
         Also, this directive became available in PHP 4.0.0 and
         was always "on" before that.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.post-max-size">
       <term>
        <parameter>post_max_size</parameter>
        <type>integer</type>
       </term>
       <listitem>
        <simpara>
         Sets max size of post data allowed. This setting also affects
         file upload. To upload large files, this value must be larger
         than <link linkend="ini.upload-max-filesize">upload_max_filesize</link>.
        </simpara>
        <simpara>
         If memory limit is enabled by your configure script, <link
         linkend="ini.memory-limit">memory_limit</link> also affects
         file uploading. Generally speaking,
         <link linkend="ini.memory-limit">memory_limit</link> should be
         larger than <parameter>post_max_size</parameter>.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.gpc-order">
       <term>
        <parameter>gpc_order</parameter>
        <type>string</type>
       </term>
       <listitem>
        <para>
         Set the order of GET/POST/COOKIE variable parsing. The
         default setting of this directive is "GPC".  Setting this to
         "GP", for example, will cause PHP to completely ignore cookies
         and to overwrite any GET method variables with POST-method
         variables of the same name.
        </para>
        <note>
         <para>
          This option is not available in PHP 4.
          Use <link linkend="ini.variables-order">variables_order</link>
          instead.
         </para>
        </note>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.auto-prepend-file">
       <term>
        <parameter>auto_prepend_file</parameter>
        <type>string</type>
       </term>
       <listitem>
        <para>
         Specifies the name of a file that is automatically parsed
         before the main file.  The file is included as if it was
         called with the <function>include</function> function, so
         <link linkend="ini.include-path">include_path</link> is used.</para>
        <para>
         The special value <systemitem class="constant">none</systemitem> 
         disables auto-prepending.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.auto-append-file">
       <term>
        <parameter>auto_append_file</parameter>
        <type>string</type>
       </term>
       <listitem>
        <para>
         Specifies the name of a file that is automatically parsed
         after the main file.  The file is included as if it was
         called with the <function>include</function> function, so
         <link linkend="ini.include-path">include_path</link> is used.</para>
        <para>
         The special value <systemitem class="constant">none</systemitem> 
         disables auto-appending.
         <note>
          <simpara>
           If the script is terminated with <function>exit</function>,
           auto-append will <emphasis>not</emphasis> occur.</simpara>
         </note>
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.default-mimetype">
       <term>
        <parameter>default_mimetype</parameter>
        <type>string</type>
       </term>
       <listitem>
        <para>
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.default-charset">
       <term>
        <parameter>default_charset</parameter>
        <type>string</type>
       </term>
       <listitem>
        <para>
         As of 4.0b4, PHP always outputs a character encoding by default in
         the Content-type: header. To disable sending of the charset, simply
         set it to be empty.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.always-populate-raw-post-data">
       <term>
        <parameter>always_populate_raw_post_data</parameter>
        <type>boolean</type>
       </term>
       <listitem>
        <para>
         Always populate the $HTTP_RAW_POST_DATA variable.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.allow-webdav-methods">
       <term>
        <parameter>allow_webdav_methods</parameter>
        <type>boolean</type>
       </term>
       <listitem>
        <para>
         Allow handling of WebDAV http requests within PHP scripts (eg.
         PROPFIND, PROPPATCH, MOVE, COPY, etc..)
         If you want to get the post data of those requests, you have to
         set <link linkend="ini.always-populate-raw-post-data">
         always_populate_raw_post_data</link> as well.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
     See also: <link linkend="ini.magic-quotes-gpc">magic_quotes_gpc</link>,
     <link linkend="ini.magic-quotes-runtime">magic-quotes-runtime</link>,
     and
     <link linkend="ini.magic-quotes-sybase">magic_quotes_sybase</link>.
    </para>
   </sect2>

  <sect2 id="ini.sect.path-directory">
   <title>Paths and Directories</title>
    <para>
     <table>
      <title>Paths and Directories Configuration Options</title>
      <tgroup cols="3">
       <thead>
        <row>
         <entry>Name</entry>
         <entry>Default</entry>
         <entry>Changeable</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>include_path</entry>
         <entry>PHP_INCLUDE_PATH</entry>
         <entry>PHP_INI_ALL</entry>
        </row>
        <row>
         <entry>doc_root</entry>
         <entry>PHP_INCLUDE_PATH</entry>
         <entry>PHP_INI_SYSTEM</entry>
        </row>
        <row>
         <entry>user_dir</entry>
         <entry>NULL</entry>
         <entry>PHP_INI_SYSTEM</entry>
        </row>
        <row>
         <entry>extension_dir</entry>
         <entry>PHP_EXTENSION_DIR</entry>
         <entry>PHP_INI_SYSTEM</entry>
        </row>
        <row>
         <entry>cgi.force_redirect</entry>
         <entry>"1"</entry>
         <entry>PHP_INI_SYSTEM</entry>
        </row>
        <row>
         <entry>cgi.redirect_status_env</entry>
         <entry>""</entry>
         <entry>PHP_INI_SYSTEM</entry>
        </row>
        <row>
         <entry>fastcgi.impersonate</entry>
         <entry>"0"</entry>
         <entry>PHP_INI_SYSTEM</entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </para>
    <para>
     Here is a short explanation of the configuration directives.
     <variablelist>

      <varlistentry id="ini.include-path">
       <term>
        <parameter>include_path</parameter>
        <type>string</type>
       </term>
       <listitem>
        <para>
         Specifies a list of directories where the
         <function>require</function>, <function>include</function>
         and <function>fopen_with_path</function> functions look for
         files.  The format is like the system's <envar>PATH</envar>
         environment variable: a list of directories separated with a
         colon in UNIX or semicolon in Windows.
        </para>
        <para>
         <example>
          <title>UNIX include_path</title>
          <programlisting role="php.ini">
<![CDATA[
include_path=".:/php/includes"
]]>
          </programlisting>
         </example>
        </para>
        <para>
         <example>
          <title>Windows include_path</title>
          <programlisting role="php.ini">
<![CDATA[
include_path=".;c:\php\includes"
]]>
          </programlisting>
         </example>
        </para>
        <para>
         Using a <literal>.</literal> in the include path allows for
         relative includes as it means the current directory.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.doc-root">
       <term>
        <parameter>doc_root</parameter>
        <type>string</type>
       </term>
       <listitem>
        <para>
         PHP's "root directory" on the server. Only used if
         non-empty. If PHP is configured with <link 
         linkend="ini.safe-mode">safe mode</link>, no files outside
         this directory are served.
         If PHP was not compiled with FORCE_REDIRECT, you SHOULD set doc_root
         if you are running php as a CGI under any web server (other than IIS)
         The alternative is to use the <link linkend="ini.cgi.force-redirect">
         cgi.force_redirect</link> configuration below.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.user-dir">
       <term>
        <parameter>user_dir</parameter>
        <type>string</type>
       </term>
       <listitem>
        <para>
         The base name of the directory used on a user's home
         directory for <literal>PHP</literal> files, for example
         <literal>public_html</literal>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.extension-dir">
       <term>
        <parameter>extension_dir</parameter>
        <type>string</type>
       </term>
       <listitem>
        <para>
         In what directory PHP should look for dynamically loadable
         extensions. See also: <link linkend="ini.enable-dl">enable_dl</link>,
         and <function>dl</function>.
        </para>
       </listitem>
      </varlistentry>
     
      <varlistentry id="ini.extension">
       <term>
        <parameter>extension</parameter>
        <type>string</type>
       </term>
       <listitem>
        <para>
         Which dynamically loadable extensions to load when PHP starts
         up.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.cgi.force-redirect">
       <term>
        <parameter>cgi.force_redirect</parameter>
        <type>boolean</type>
       </term>
       <listitem>
        <para>
         cgi.force_redirect is necessary to provide security running PHP as a
         CGI under most web servers. Left undefined, PHP turns this on by
         default. You can turn it off <emphasis>AT YOUR OWN RISK</emphasis>.
        </para>
        <note>
         <para>
          Windows Users: You CAN safely turn this off for IIS, in fact, you MUST.
          To get OmniHTTPD or Xitami to work you MUST turn it off.
         </para>
        </note>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.cgi.redirect-status-env">
       <term>
        <parameter>cgi.cgi.redirect_status_env</parameter>
        <type>string</type>
       </term>
       <listitem>
        <para>
         If cgi.force_redirect is turned on, and you are not running under
         Apache or Netscape (iPlanet) web servers, you MAY need to set an
         environment variable name that PHP will look for to know it is OK
         to continue execution.
        </para>
        <note>
         <para>
          Setting this variable MAY cause security issues,
          KNOW WHAT YOU ARE DOING FIRST.
         </para>
        </note>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.fastcgi.impersonate">
       <term>
        <parameter>fastcgi.impersonate</parameter>
        <type>string</type>
       </term>
       <listitem>
        <para>
         FastCGI under IIS (on WINNT based OS) supports the ability to impersonate
         security tokens of the calling client. This allows IIS to define the
         security context that the request runs under. mod_fastcgi under Apache
         does not currently support this feature (03/17/2002)
         Set to 1 if running under IIS. Default is zero.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
   </sect2>

  <sect2 id="ini.sect.file_uploads">
   <title>File Uploads</title>
    <para>
     <table>
      <title>File Uploads Configuration Options</title>
      <tgroup cols="3">
       <thead>
        <row>
         <entry>Name</entry>
         <entry>Default</entry>
         <entry>Changeable</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>file_uploads</entry>
         <entry>"1"</entry>
         <entry>PHP_INI_SYSTEM</entry>
        </row>
        <row>
         <entry>upload_tmp_dir</entry>
         <entry>NULL</entry>
         <entry>PHP_INI_SYSTEM</entry>
        </row>
        <row>
         <entry>upload_max_filesize</entry>
         <entry>"2M"</entry>
         <entry>PHP_INI_SYSTEM|PHP_INI_PERDIR</entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </para>
    <para>
     Here is a short explanation of the configuration directives.
     <variablelist>
      <varlistentry id="ini.file-uploads">
       <term>
        <parameter>file_uploads</parameter>
        <type>boolean</type>
       </term>
       <listitem>
        <para>
         Whether or not to allow HTTP
         <link linkend="features.file-upload">file uploads</link>. See also 
         the 
         <link linkend="ini.upload-max-filesize">upload_max_filesize</link>,
         <link linkend="ini.upload-tmp-dir">upload_tmp_dir</link>, and 
         <link linkend="ini.post-max-size">post_max_size</link> directives.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.upload-tmp-dir">
       <term>
        <parameter>upload_tmp_dir</parameter>
        <type>string</type>
       </term>
       <listitem>
        <para>
         The temporary directory used for storing files when doing
         file upload. Must be writable by whatever user <literal>PHP</literal>
         is running as. If not specified PHP will use the system's default.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.upload-max-filesize">
       <term>
        <parameter>upload_max_filesize</parameter>
        <type>integer</type>
       </term>
       <listitem>
        <para>
         The maximum size of an uploaded file.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
   </sect2>

  <sect2 id="ini.sql-general">
   <title>General SQL</title>
    <para>
     <table>
      <title>General SQL Configuration Options</title>
      <tgroup cols="3">
       <thead>
        <row>
         <entry>Name</entry>
         <entry>Default</entry>
         <entry>Changeable</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>sql.safe_mode</entry>
         <entry>"0"</entry>
         <entry>PHP_INI_SYSTEM</entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </para>
    <para>
     Here is a short explanation of the configuration directives.
     <variablelist>
      <varlistentry id="ini.sql.safe-mode">
       <term>
        <parameter>sql.safe_mode</parameter>
        <type>boolean</type>
       </term>
       <listitem>
        <para>
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
   </sect2>

   <sect2 id="ini.sect.debugger">
    <title>Debugger Configuration Directives</title>
    <variablelist>

     <varlistentry id="ini.debugger.host">
      <term>
       <parameter>debugger.host</parameter>
       <type>string</type>
      </term>
      <listitem>
       <para>
        DNS name or IP address of host used by the debugger.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="ini.debugger.port">
      <term>
       <parameter>debugger.port</parameter>
       <type>string</type>
      </term>
      <listitem>
       <para>
        Port number used by the debugger.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="ini.debugger.enabled">
      <term>
       <parameter>debugger.enabled</parameter>
       <type>boolean</type>
      </term>
      <listitem>
       <para>
        Whether the debugger is enabled.
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </sect2>

  </sect1>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
