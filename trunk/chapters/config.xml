<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.24 $ -->
<!-- $Author: dallas $ -->
<!-- EN-Revision: 1.111 Maintainer: dallas Status: ready -->
 <chapter id="configuration">
  <title>运行时配置</title>

  <sect1 id="configuration.file">
   <title>配置文件</title>

   <simpara>
    当 PHP 启动时会读取配置文件（在 PHP 3.0 中称为
    <filename>php3.ini</filename>，在 PHP 4.0 中简化为
    &php.ini;）。对于服务器模块版本的 PHP 仅在 web 服务器启动时读取一次。对于
    <acronym>CGI</acronym> 和 <acronym>CLI</acronym>
    版本，每次调用都会读取。
   </simpara>
   <para>
    &php.ini; 的默认位置是在编译时决定的（见<link
    linkend="faq.installation.phpini">常见问题 - 安装</link>），但是对于
    <acronym>CGI</acronym> 和 <acronym>CLI</acronym>
    版本可以通过命令行开关
    <literal>-c</literal> 来改变，见
    <literal>PHP</literal> 的<link
    linkend="features.commandline">命令行方式</link>一章。也可以用环境变量
    <literal>PHPRC</literal> 来设定寻找
    &php.ini; 文件的其它路径。
   </para>
   <note>
    <para>
     Apache 服务器在启动时将目录更改到根目录，致使
     PHP 会尝试在根目录下读取 &php.ini;，如果存在的话。
    </para>
   </note>
   <para>
    并不是每一个 PHP 的指令都列入了以下手册中。所有指令的列表与说明见
    &php.ini; 文件中的注释。可以从 CVS 中查看<ulink
    url="&url.php.cvs.phpini;">最新的 php.ini</ulink>。
   </para>
   <note>
    <para>
     从 PHP <ulink url="&url.php.release4.2.0;">4.2.0</ulink>
     起将
     <link linkend="ini.register-globals">register_globals</link>
     的默认值从
     <emphasis>on</emphasis> 改成了 <emphasis>off</emphasis>。
    </para>
   </note>
   <para>
    <example>
     <title>&php.ini; 例子</title>
     <programlisting role="ini">
<![CDATA[
; any text on a line after an unquoted semicolon (;) is ignored
[php] ; section markers (text within square brackets) are also ignored
; Boolean values can be set to either:
;    true, on, yes
; or false, off, no, none
register_globals = off
magic_quotes_gpc = yes

; you can enclose strings in double-quotes
include_path = ".:/usr/local/lib/php"

; backslashes are treated the same as any other character
include_path = ".;c:\php\lib"
]]>
</programlisting>
<!-- TODO: add more details about values and expressions -->
    </example>
   </para>
  </sect1>

  <sect1 id="configuration.changes">
   <title>怎样改变配置选项</title>

   <sect2 id="configuration.changes.apache">
    <title>以 Apache 模块方式运行 <literal>PHP</literal></title>
    <simpara>
     当以 Apache 的模块方式运行 PHP 时，也可以通过 Apache
     的配置文件（例如 &httpd.conf;）和
     &htaccess;
     文件中的指令来修改 PHP 的配置选项（需要“AllowOverride Options”或“AllowOverride All”权限）。
    </simpara>

    <para>
     在 PHP 4.0 中，有几个 Apache 指令可以允许在 Apache
     的配置文件中修改 PHP 的配置。要得到哪些指令分别属于
     <constant>PHP_INI_ALL</constant>，<constant>PHP_INI_PERDIR</constant> 或
     <constant>PHP_INI_SYSTEM</constant>
     的列表，请看 <function>ini_set</function> 文档中的表格。
    </para>

    <note>
     <simpara>
      在 PHP 3.0 中，也有和
      <filename>php3.ini</filename> 中选项相对应的
      Apache 指令，只不过加上前缀“php3_”。
     </simpara>
    </note>

    <para>
     <variablelist>
      <varlistentry>
       <term>
        <systemitem role="directive">php_value</systemitem>
        <parameter>name</parameter>
        <parameter>value</parameter>
       </term>
       <listitem>
        <para>
         设定指定指令的值。仅能用于
         <constant>PHP_INI_ALL</constant> 和 <constant>PHP_INI_PERDIR</constant>
         类型的指令。要清除上一个设定的值，将值设为 <literal>none</literal>。
        </para>
        <note>
         <simpara>
          不要用 <literal>php_value</literal> 来设定布尔值。应该用
          <literal>php_flag</literal>（见下面）来替代。
         </simpara>
        </note>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>
        <systemitem role="directive">php_flag</systemitem>
        <parameter>name</parameter>
        <parameter>on|off</parameter>
       </term>
       <listitem>
        <para>
         用于设定布尔值类型的配置指令。仅能用于
         <constant>PHP_INI_ALL</constant> 和 <constant>PHP_INI_PERDIR</constant>
         类型的指令。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>
        <systemitem role="directive">php_admin_value</systemitem>
        <parameter>name</parameter>
        <parameter>value</parameter>
       </term>
       <listitem>
        <para>
         设定指定指令的值。不能在 &htaccess; 文件中使用。任何在
         <systemitem role="directive">php_admin_value</systemitem>
         中设定的值不能被 &htaccess; 或者 virtualhost
         中的指令覆盖。要清除上一个设定的值，将值设为 <literal>none</literal>。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>
        <systemitem role="directive">php_admin_flag</systemitem>
        <parameter>name</parameter>
        <parameter>on|off</parameter>
       </term>
       <listitem>
        <para>
         用于设定布尔值类型的配置指令。不能在 &htaccess; 文件中使用。任何在
         <systemitem role="directive">php_admin_flag</systemitem>
         中设定的值不能被 &htaccess; 或者 virtualhost 中的指令覆盖。
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
     <example>
      <title>Apache 配置例子</title>
      <programlisting role="ini">
<![CDATA[
<IfModule mod_php4.c>
  php_value include_path ".:/usr/local/lib/php"
  php_admin_flag safe_mode on
</IfModule>
<IfModule mod_php3.c>
  php3_include_path ".:/usr/local/lib/php"
  php3_safe_mode on
</IfModule>
]]>
      </programlisting>
     </example>
    </para>

    <caution>
     <para>
      PHP 常量不存在于 PHP 之外。例如，在 &httpd.conf;
      中可以使用 PHP 常量如
      <constant>E_ALL</constant> 或者 <constant>E_NOTICE</constant>
      来设定
      <link linkend="ini.error-reporting">error_reporting</link>
      指令的值，但它们其实没有意义并被认为是
      <emphasis>0</emphasis>。应该使用相应的位掩码。这些常量可以在
      &php.ini; 中使用。
     </para>
    </caution>
   </sect2>

   <sect2 id="configuration.changes.other">
    <title>其它 <literal>PHP</literal> 接口</title>
    <para>
     不论 <literal>PHP</literal>
     的接口是什么都可以在脚本执行过程中通过
     <function>ini_set</function>
     来修改一些值。下表提供了指令可以在哪一级被设定/修改的概览。
    </para>
    <para>
     <table>
     <title>PHP_INI_* 常量的定义</title>
     <tgroup cols="3">
      <thead>
       <row>
        <entry>常量</entry>
        <entry>值</entry>
        <entry>含义</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>PHP_INI_USER</entry>
        <entry>1</entry>
        <entry>该项目可以在用户脚本中设定</entry>
       </row>
       <row>
        <entry>PHP_INI_PERDIR</entry>
        <entry>2</entry>
        <entry>
         该项目可以在 &php.ini;，&htaccess; 或者
         &httpd.conf; 中设定
        </entry>
       </row>
       <row>
        <entry>PHP_INI_SYSTEM</entry>
        <entry>4</entry>
        <entry>
         该项目可以在 &php.ini; 或 &httpd.conf; 中设定
        </entry>
       </row>
       <row>
        <entry>PHP_INI_ALL</entry>
        <entry>7</entry>
        <entry>该项目可以在任何地方设定</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
    </para>
    <para>
     可以在
     <function>phpinfo</function>
     的输出中查看配置选项的值。也可以用
     <function>ini_get</function> 或 <function>get_cfg_var</function>
     来单个访问配置指令的值。
    </para>
   </sect2>
  </sect1>

  <sect1 id="configuration.directives">
   <title>各种配置指令</title>
   <para>
    这里并不是全部 PHP 指令的列表。各种指令被列在其相应的位置，例如有关
    session 指令的信息就在 <link linkend="ref.session">sessions</link> 一章中。
   </para>

  <sect2 id="ini.sect.httpd-options">
   <title>Httpd 选项</title>
    <para>
     <table>
      <title>Httpd 选项</title>
      <tgroup cols="3">
       <thead>
        <row>
         <entry>名称</entry>
         <entry>默认值</entry>
         <entry>类别</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>async_send</entry>
         <entry>"0"</entry>
         <entry>PHP_INI_ALL</entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </para>
    <para>
    </para>
   </sect2>

  <sect2 id="ini.sect.language-options">
   <title>语言选项</title>
   <para>
   <table>
    <title>语言和杂类配置选项</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>名称</entry>
       <entry>默认值</entry>
       <entry>类别</entry>
      </row>
     </thead>
     <tbody>
     <row>
      <entry>short_open_tag</entry>
      <entry>On</entry>
      <entry>PHP_INI_SYSTEM|PHP_INI_PERDIR</entry>
     </row>
     <row>
      <entry>asp_tags</entry>
      <entry>Off</entry>
      <entry>PHP_INI_SYSTEM|PHP_INI_PERDIR</entry>
     </row>
     <row>
      <entry>precision</entry>
      <entry>"14"</entry>
      <entry>PHP_INI_ALL</entry>
     </row>
     <row>
      <entry>y2k_compliance</entry>
      <entry>Off</entry>
      <entry>PHP_INI_ALL</entry>
     </row>
     <row>
      <entry>allow_call_time_pass_reference</entry>
      <entry>On</entry>
      <entry>PHP_INI_SYSTEM|PHP_INI_PERDIR</entry>
     </row>
     <row>
      <entry>expose_php</entry>
      <entry>On</entry>
      <entry>PHP_INI_SYSTEM</entry>
     </row>
    </tbody>
    </tgroup>
   </table>
   </para>
   &ini.descriptions.title;
    <para>
     <variablelist>
      <varlistentry id="ini.short-open-tag">
       <term>
        <parameter>short_open_tag</parameter>
        <type>boolean</type>
       </term>
       <listitem>
        <para>
         决定是否允许使用 PHP 代码开始标志的缩写形式（<userinput>&lt;?
         ?&gt;</userinput>）。如果要和 XML 结合使用
         PHP，可以禁用此选项以便于嵌入使用
         <userinput>&lt;?xml ?&gt;</userinput>。否则还可以通过
         PHP 来输出，例如：<userinput>&lt;?php echo '&lt;?xml
         version="1.0"'; ?&gt;</userinput>。如果禁用了，必须使用
         PHP 代码开始标志的完整形式（<userinput>&lt;?php
         ?&gt;</userinput>）。
        </para>
        <note>
         <para>
          本指令也会影响到缩写形式
          <userinput>&lt;?=</userinput>，它和
          <userinput>&lt;? echo</userinput> 等价。使用此缩写需要
          <systemitem role="directive">short_open_tag</systemitem>
          的值为 On。
         </para>
        </note>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.asp-tags">
       <term>
        <parameter>asp_tags</parameter>
        <type>boolean</type>
       </term>
       <listitem>
        <simpara>
         除了通常的
         &lt;?php ?&gt;
         标志之外还允许使用
         ASP 风格的标志 &lt;% %&gt;。这也包括了输出变量值的缩写
         &lt;%= $value %&gt;。更多信息见<link
         linkend="language.basic-syntax.phpmode">从 HTML 中分离</link>一节。
        </simpara>
        <note>
         <para>
          ASP 风格标志的支持是 3.0.4 版新加的。
         </para>
        </note>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.precision">
       <term>
        <parameter>precision</parameter>
        <type>integer</type>
       </term>
       <listitem>
        <simpara>
         浮点数中显示有效数字的位数。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.y2k-compliance">
       <term>
        <parameter>y2k_compliance</parameter>
        <type>boolean</type>
       </term>
       <listitem>
        <simpara>
         强制 2000 年兼容（在不兼容的浏览器中会出问题）。
        </simpara>
       </listitem>
      </varlistentry>


      <varlistentry id="ini.allow-call-time-pass-reference">
       <term>
        <parameter>allow_call_time_pass_reference</parameter>
        <type>boolean</type>
       </term>
       <listitem>
        <para>
         是否启用在函数调用时强制参数被按照引用传递。此方法已不被赞成并在
         PHP/Zend 未来的版本中很可能不再支持。鼓励使用的方法是在函数定义中指定哪些参数应该用引用传递。鼓励大家尝试关闭此选项并确保脚本能够正常运行，以确保该脚本也能在未来的版本中运行（每次使用此特性都会收到一条警告，参数会被按值传递而不是按照引用传递）。
        </para>
        <para>
         参见<link linkend="language.references">引用的解释</link>。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.expose-php">
       <term>
        <parameter>expose_php</parameter>
        <type>boolean</type>
       </term>
       <listitem>
        <para>
         决定是否暴露 PHP 被安装在服务器上（例如在 Web
         服务器的信息头中加上其签名）。没有任何安全上的威胁，只是让客户端能够知道是否在服务器中安装了
         PHP。
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
   </sect2>

  <sect2 id="ini.sect.resource-limits">
   <title>资源限制</title>
   <para>
    <table>
     <title>资源限制</title>
     <tgroup cols="3">
      <thead>
       <row>
        <entry>名称</entry>
        <entry>默认值</entry>
        <entry>类型</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>memory_limit</entry>
        <entry>"8M"</entry>
        <entry>PHP_INI_ALL</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
   &ini.descriptions.title;
   <para>
    <variablelist>
     <varlistentry id="ini.memory-limit">
      <term>
       <parameter>memory_limit</parameter>
       <type>integer</type>
      </term>
      <listitem>
       <para>
        本指令设定了一个脚本所能够申请到的最大内存字节数。这有助于防止写得不好的脚本消耗光服务器上的可用内存。要使用此指令必须在编译的时候激活。因此
        configure
        一行中应该包括：<literal>--enable-memory-limit</literal>。如果不需要任何内存上的限制，必须将其设为
        -1。
       </para>
       <para>
        自 4.3.2 起，当激活了 memory_limit，PHP 函数
        <function>memory_get_usage</function> 成为可用。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
   <para>
    参见 <link linkend="ini.max-execution-time">max_execution_time</link>。
   </para>
  </sect2>

  <sect2 id="ini.sect.data-handling">
   <title>数据处理</title>
    <para>
     <table>
      <title>数据处理配置选项</title>
      <tgroup cols="3">
       <thead>
        <row>
         <entry>名称</entry>
         <entry>默认值</entry>
         <entry>类型</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>track-vars</entry>
         <entry>"On"</entry>
         <entry>PHP_INI_??</entry>
        </row>
        <row>
         <entry>arg_separator.output</entry>
         <entry>"&amp;"</entry>
         <entry>PHP_INI_ALL</entry>
        </row>
        <row>
         <entry>arg_separator.input</entry>
         <entry>"&amp;"</entry>
         <entry>PHP_INI_SYSTEM|PHP_INI_PERDIR</entry>
        </row>
        <row>
         <entry>variables_order</entry>
         <entry>"EGPCS"</entry>
         <entry>PHP_INI_ALL</entry>
        </row>
        <row>
         <entry>register_globals</entry>
         <entry>"Off"</entry>
         <entry>PHP_INI_PERDIR|PHP_INI_SYSTEM</entry>
        </row>
        <row>
         <entry>register_argc_argv</entry>
         <entry>"On"</entry>
         <entry>PHP_INI_PERDIR|PHP_INI_SYSTEM</entry>
       </row>
       <row>
        <entry>register_long_arrays</entry>
        <entry>"On"</entry>
        <entry>PHP_INI_PERDIR|PHP_INI_SYSTEM</entry>
       </row>
       <row>
        <entry>post_max_size</entry>
        <entry>"8M"</entry>
        <entry>PHP_INI_SYSTEM|PHP_INI_PERDIR</entry>
       </row>
       <row>
        <entry>gpc_order</entry>
        <entry>"GPC"</entry>
        <entry>PHP_INI_ALL</entry>
       </row>
       <row>
        <entry>auto_prepend_file</entry>
        <entry>""</entry>
        <entry>PHP_INI_SYSTEM|PHP_INI_PERDIR</entry>
       </row>
       <row>
        <entry>auto_append_file</entry>
        <entry>""</entry>
        <entry>PHP_INI_SYSTEM|PHP_INI_PERDIR</entry>
       </row>
        <row>
         <entry>default_mimetype</entry>
         <entry>"text/html"</entry>
         <entry>PHP_INI_ALL</entry>
        </row>
        <row>
         <entry>default_charset</entry>
         <entry>"iso-8859-1"</entry>
         <entry>PHP_INI_ALL</entry>
        </row>
        <row>
         <entry>always_populate_raw_post_data</entry>
         <entry>"0"</entry>
         <entry>PHP_INI_SYSTEM|PHP_INI_PERDIR</entry>
        </row>
        <row>
         <entry>allow_webdav_methods</entry>
         <entry>"0"</entry>
         <entry>PHP_INI_SYSTEM|PHP_INI_PERDIR</entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </para>
    &ini.descriptions.title;
    <para>
     <variablelist>
      <varlistentry id="ini.track-vars">
       <term>
        <parameter>track_vars</parameter>
        <type>boolean</type>
       </term>
       <listitem>
        <para>
         如果激活，则环境变量，GET，POST，Cookie 和 Server
         变量都能够分别在全局关联数组中找到：<varname>$_ENV</varname>，<varname>$_GET</varname>，<varname>$_POST</varname>，<varname>$_COOKIE</varname> 和
         <varname>$_SERVER</varname>。
        </para>
        <para>
         注意自 PHP 4.0.3 起，<systemitem
         role="directive">track_vars</systemitem> 总是打开的。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.arg-separator.output">
       <term>
        <parameter>arg_separator.output</parameter>
        <type>string</type>
       </term>
       <listitem>
        <para>
         PHP 所产生的 URL 中来分隔参数的分隔符。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.arg-separator.input">
       <term>
        <parameter>arg_separator.input</parameter>
        <type>string</type>
       </term>
       <listitem>
        <para>
         PHP 用来将 URL 解析为变量的分隔符列表。
        </para>
        <note>
         <para>
          本指令中的每个字符都会被当成分隔符！
         </para>
        </note>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.variables-order">
       <term>
        <parameter>variables_order</parameter>
        <type>string</type>
       </term>
       <listitem>
        <para>
         设定 EGPCS（Environment，GET，POST，Cookie，Server）变量解析的顺序。默认设定为“EGPCS”。举例说，将其设为“GP”，会导致
         PHP 完全忽略环境变量，cookies 和 server 变量，并用 GET
         方法的变量覆盖 POST 方法的同名变量。
        </para>
        <para>
         参见 <link linkend="ini.register-globals">register_globals</link>。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.register-globals">
       <term>
        <parameter>register_globals</parameter>
        <type>boolean</type>
       </term>
       <listitem>
        <para>
         决定是否将
         EGPCS（Environment，GET，POST，Cookie，Server）变量注册为全局变量。例如，如果
         register_globals = on，那么 URL
         <literal>http://www.example.com/test.php?id=3</literal>
         将产生
         <varname>$id</varname>。或者从
         <varname>$_SERVER['DOCUMENT_ROOT']</varname>
         得来
         <varname>$DOCUMENT_ROOT</varname>。如果不想用户数据把全局域弄乱的话可以将此选项关闭。自
         PHP <ulink url="&url.php.release4.2.0;">4.2.0</ulink>
         开始，本指令默认为
         <emphasis>off</emphasis>。推荐使用 PHP
         的<link linkend="reserved.variables">预定义变量</link>来替代，例如<link
         linkend="language.variables.superglobals">超全局变量</link>：<varname>$_ENV</varname>，<varname>$_GET</varname>，<varname>$_POST</varname>，<varname>$_COOKIE</varname> 和
         <varname>$_SERVER</varname>。相关信息请阅读安全一章中的<link
         linkend="security.registerglobals">使用 register_globals</link>。
        </para>
        <para>
         请注意
         <systemitem role="directive">register_globals</systemitem>
         不能在运行时设定（<function>ini_set</function>），尽管如以上说明在主机允许时可以用
         &htaccess;。一个
         &htaccess; 项目的例子：<userinput>php_flag register_globals on</userinput>。
        </para>
        <note>
         <para>
          <systemitem role="directive">register_globals</systemitem>
          受
          <link linkend="ini.variables-order">variables_order</link>
          指令的影响。
         </para>
        </note>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.register-argc-argv">
       <term>
        <parameter>register_argc_argv</parameter>
        <type>boolean</type>
       </term>
       <listitem>
        <simpara>
         决定 PHP 是否定义 argv &amp; argc 变量（可能包含有 GET 信息）。
        </simpara>
        <simpara>
         参见<link linkend="features.commandline">命令行方式</link>。此外，本选项自
         PHP 4.0.0 起可用，在此之前总是“On”。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.register-long-arrays">
       <term>
        <parameter>register_long_arrays</parameter>
        <type>boolean</type>
       </term>
       <listitem>
        <simpara>
         设定 PHP 是否注册已过时的 <varname>$HTTP_*_VARS</varname> 之类的<link
         linkend="language.variables.predefined">预定义变量</link>。如果为
         On（默认值），则类似 <varname>$HTTP_GET_VARS</varname>
         的 PHP 变量会被注册。如果不使用，为性能考虑建议关闭此选项，而使用超全局数组例如
         <varname>$_GET</varname> 替代之。
        </simpara>
        <simpara>
         本指令自 PHP 5.0.0 起可用。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.post-max-size">
       <term>
        <parameter>post_max_size</parameter>
        <type>integer</type>
       </term>
       <listitem>
        <simpara>
         设定 POST 数据所允许的最大大小。此设定也影响到文件上传。要上传大文件，该值必须大于
         <link linkend="ini.upload-max-filesize">upload_max_filesize</link>。
        </simpara>
        <simpara>
         如果配置脚本中激活了内存限制，<link
         linkend="ini.memory-limit">memory_limit</link>
         也会影响文件上传。通常说，<link linkend="ini.memory-limit">memory_limit</link>
         应该比
         <parameter>post_max_size</parameter> 要大。
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.gpc-order">
       <term>
        <parameter>gpc_order</parameter>
        <type>string</type>
       </term>
       <listitem>
        <para>
         设定 GET/POST/COOKIE 变量解析的顺序，默认为“GPC”。举例说，将其设为“GP”，会导致
         PHP 完全忽略 cookie 变量，并用 GET
         方法的变量覆盖 POST 方法的同名变量。
        </para>
        <note>
         <para>
          本选项不能用于 PHP 4。用
          <link linkend="ini.variables-order">variables_order</link> 替代之。
         </para>
        </note>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.auto-prepend-file">
       <term>
        <parameter>auto_prepend_file</parameter>
        <type>string</type>
       </term>
       <listitem>
        <para>
         指定在主文件之前自动解析的文件名。该文件就像调用了
         <function>include</function> 函数一样被包含进来，因此会使用
         <link linkend="ini.include-path">include_path</link>。
        </para>
        <para>
         特殊值 <systemitem class="constant">none</systemitem>
         禁止了自动前缀。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.auto-append-file">
       <term>
        <parameter>auto_append_file</parameter>
        <type>string</type>
       </term>
       <listitem>
        <para>
         指定在主文件之后自动解析的文件名。该文件就像调用了
         <function>include</function> 函数一样被包含进来，因此会使用
         <link linkend="ini.include-path">include_path</link>。
        </para>
        <para>
         特殊值 <systemitem class="constant">none</systemitem>
         禁止了自动后缀。
         <note>
          <simpara>
           如果脚本通过
           <function>exit</function> 终止，则自动后缀<emphasis>不会</emphasis>发生。
          </simpara>
         </note>
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.default-mimetype">
       <term>
        <parameter>default_mimetype</parameter>
        <type>string</type>
       </term>
       <listitem>
        <para>
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.default-charset">
       <term>
        <parameter>default_charset</parameter>
        <type>string</type>
       </term>
       <listitem>
        <para>
         自 4.0b4 起，PHP 总是默认在 HTTP 信息头
         Content-type: 中输出字符编码。要禁止发送字符集，将本选项设为空即可。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.always-populate-raw-post-data">
       <term>
        <parameter>always_populate_raw_post_data</parameter>
        <type>boolean</type>
       </term>
       <listitem>
        <para>
         总是增加 $HTTP_RAW_POST_DATA 变量。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.allow-webdav-methods">
       <term>
        <parameter>allow_webdav_methods</parameter>
        <type>boolean</type>
       </term>
       <listitem>
        <para>
         允许在 PHP 脚本中处理
         WebDAV 的 HTTP 请求（例如
         PROPFIND，PROPPATCH，MOVE，COPY 等）。如果要取得这些请求的
         POST 数据，也要设定
         <link linkend="ini.always-populate-raw-post-data">always_populate_raw_post_data</link>。
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
     参见
     <link linkend="ini.magic-quotes-gpc">magic_quotes_gpc</link>，<link linkend="ini.magic-quotes-runtime">magic-quotes-runtime</link> 和
     <link linkend="ini.magic-quotes-sybase">magic_quotes_sybase</link>。
    </para>
   </sect2>

  <sect2 id="ini.sect.path-directory">
   <title>路径和目录</title>
    <para>
     <table>
      <title>路径和目录配置选项</title>
      <tgroup cols="3">
       <thead>
        <row>
         <entry>名称</entry>
         <entry>默认值</entry>
         <entry>类型</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>include_path</entry>
         <entry>PHP_INCLUDE_PATH</entry>
         <entry>PHP_INI_ALL</entry>
        </row>
        <row>
         <entry>doc_root</entry>
         <entry>PHP_INCLUDE_PATH</entry>
         <entry>PHP_INI_SYSTEM</entry>
        </row>
        <row>
         <entry>user_dir</entry>
         <entry>NULL</entry>
         <entry>PHP_INI_SYSTEM</entry>
        </row>
        <row>
         <entry>extension_dir</entry>
         <entry>PHP_EXTENSION_DIR</entry>
         <entry>PHP_INI_SYSTEM</entry>
        </row>
        <row>
         <entry>cgi.fix_pathinfo</entry>
         <entry>"0"</entry>
         <entry>PHP_INI_SYSTEM</entry>
        </row>
        <row>
         <entry>cgi.force_redirect</entry>
         <entry>"1"</entry>
         <entry>PHP_INI_SYSTEM</entry>
        </row>
        <row>
         <entry>cgi.redirect_status_env</entry>
         <entry>""</entry>
         <entry>PHP_INI_SYSTEM</entry>
        </row>
        <row>
         <entry>fastcgi.impersonate</entry>
         <entry>"0"</entry>
         <entry>PHP_INI_SYSTEM</entry>
        </row>
        <row>
         <entry>cgi.rfc2616_headers</entry>
         <entry>"0"</entry>
         <entry>PHP_INI_SYSTEM</entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </para>
    &ini.descriptions.title;
    <para>
     <variablelist>
      <varlistentry id="ini.include-path">
       <term>
        <parameter>include_path</parameter>
        <type>string</type>
       </term>
       <listitem>
        <para>
         指定一组目录用于
         <function>require</function>，<function>include</function> 和
         <function>fopen_with_path</function>
         函数来寻找文件。格式和系统的
         <envar>PATH</envar>
         环境变量类似：一组目录的列表，在 UNIX 下用冒号分隔，在
         Windows 下用分号分隔。
        </para>
        <para>
         <example>
          <title>UNIX include_path</title>
          <programlisting role="php.ini">
<![CDATA[
include_path=".:/php/includes"
]]>
          </programlisting>
         </example>
        </para>
        <para>
         <example>
          <title>Windows include_path</title>
          <programlisting role="php.ini">
<![CDATA[
include_path=".;c:\php\includes"
]]>
          </programlisting>
         </example>
        </para>
        <para>
         在包含路径中使用 <literal>.</literal>
         可以允许相对路径，它代表当前目录。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.doc-root">
       <term>
        <parameter>doc_root</parameter>
        <type>string</type>
       </term>
       <listitem>
        <para>
         PHP 在服务器上的根目录。仅在非空时使用。如果
         PHP 被配置为&safemode;，则此目录之外的文件一概不被解析。如果
         PHP 编译时没有指定 FORCE_REDIRECT，并且在任何 web
         服务器（除了 IIS）中以 CGI
         方式运行 PHP，则应该设定 doc_root。替代方案是使用下面的
         <link linkend="ini.cgi.force-redirect">cgi.force_redirect</link>
         配置选项。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.user-dir">
       <term>
        <parameter>user_dir</parameter>
        <type>string</type>
       </term>
       <listitem>
        <para>
         在用户目录之下使用 <literal>PHP</literal>
         文件的基本目录名，例如
         <literal>public_html</literal>。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.extension-dir">
       <term>
        <parameter>extension_dir</parameter>
        <type>string</type>
       </term>
       <listitem>
        <para>
         PHP 用来寻找动态连接扩展库的目录。参见
         <link linkend="ini.enable-dl">enable_dl</link> 和
         <function>dl</function>。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.extension">
       <term>
        <parameter>extension</parameter>
        <type>string</type>
       </term>
       <listitem>
        <para>
         当 PHP 启动时所加载的动态连接扩展库。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.cgi.fix_pathinfo">
       <term>
        <parameter>cgi.fix_pathinfo</parameter>
        <type>boolean</type>
       </term>
       <listitem>
        <para>
         对 CGI 提供了<emphasis>真正的</emphasis> PATH_INFO/PATH_TRANSLATED
         支持。以前 PHP 的行为是将 PATH_TRANSLATED 设为
         SCRIPT_FILENAME，而不管 PATH_INFO 是什么。有关 PATH_INFO
         的更多信息见 cgi 规格。将此值设为 1 将使 PHP CGI
         修正其路径以遵守规格。设为 0 将使 PHP
         的行为和从前一样。默认为零。用户应该修正其脚本使用 SCRIPT_FILENAME
         而不是 PATH_TRANSLATED。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.cgi.force-redirect">
       <term>
        <parameter>cgi.force_redirect</parameter>
        <type>boolean</type>
       </term>
       <listitem>
        <para>
         在大多数 web 服务器中以 CGI 方式运行 PHP
         时很有必要用 cgi.force_redirect 提供安全。PHP
         默认其为 On。可以将其关闭，但<emphasis>风险自担</emphasis>。
        </para>
        <note>
         <para>
          Windows 用户：可以安全地在 IIS 之下将其关闭，事实上必须这么做。要在
          OmniHTTPD 或 Xitami 之下使用也必须将其关闭。
         </para>
        </note>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.cgi.redirect-status-env">
       <term>
        <parameter>cgi.redirect_status_env</parameter>
        <type>string</type>
       </term>
       <listitem>
        <para>
         如果打开了 cgi.force_redirect，并且不是在
         Apache 或 Netscape（iPlanet）web
         服务器之下运行，可能需要设定一个环境变量名，PHP
         将去寻找它来知道可以继续执行下去。
        </para>
        <note>
         <para>
          设定此变量可能会导致安全问题，首先要知道自己在做什么。
         </para>
        </note>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.fastcgi.impersonate">
       <term>
        <parameter>fastcgi.impersonate</parameter>
        <type>string</type>
       </term>
       <listitem>
        <para>
         IIS（在基于 WINNT 的操作系统上）中的 FastCGI
         支持模仿客户端安全令牌的能力。这使得 IIS
         能够定义运行时所基于的请求的安全上下文。Apache
         中的 mod_fastcgi 不支持此特性（03/17/2002）。如果在
         IIS 中运行则设为 1。默认为 0。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry id="ini.cgi.rfc2616-headers">
       <term>
        <parameter>cgi.rfc2616_headers</parameter>
        <type>int</type>
       </term>
       <listitem>
        <para>
         指定 PHP 在发送 HTTP 响应代码时使用何种报头。如果设定为 0，PHP
         发送一个 Status: 报头，Apache 和其它 web server 都支持。如果此选项设定为 1，PHP
         将发送 <ulink url="&url.rfc;2616">RFC 2616</ulink>
         兼容的报头。除非你知道自己在做什么，否则保留其值为 0。
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
   </sect2>

  <sect2 id="ini.sect.file_uploads">
   <title>文件上传</title>
    <para>
     <table>
      <title>文件上传配置选项</title>
      <tgroup cols="3">
       <thead>
        <row>
         <entry>名称</entry>
         <entry>默认值</entry>
         <entry>类型</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>file_uploads</entry>
         <entry>"1"</entry>
         <entry>PHP_INI_SYSTEM</entry>
        </row>
        <row>
         <entry>upload_tmp_dir</entry>
         <entry>NULL</entry>
         <entry>PHP_INI_SYSTEM</entry>
        </row>
        <row>
         <entry>upload_max_filesize</entry>
         <entry>"2M"</entry>
         <entry>PHP_INI_SYSTEM|PHP_INI_PERDIR</entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </para>
    &ini.descriptions.title;
    <para>
     <variablelist>
      <varlistentry id="ini.file-uploads">
       <term>
        <parameter>file_uploads</parameter>
        <type>boolean</type>
       </term>
       <listitem>
        <para>
         是否允许 HTTP
         <link linkend="features.file-upload">文件上传</link>。参见
         <link linkend="ini.upload-max-filesize">upload_max_filesize</link>，<link
         linkend="ini.upload-tmp-dir">upload_tmp_dir</link> 和
         <link linkend="ini.post-max-size">post_max_size</link> 指令。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.upload-tmp-dir">
       <term>
        <parameter>upload_tmp_dir</parameter>
        <type>string</type>
       </term>
       <listitem>
        <para>
         文件上传时存放文件的临时目录。必须是
         <literal>PHP</literal> 进程所有者用户可写的目录。如果未指定则
         PHP 使用系统默认值。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="ini.upload-max-filesize">
       <term>
        <parameter>upload_max_filesize</parameter>
        <type>integer</type>
       </term>
       <listitem>
        <para>
         所上传的文件的最大大小。
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
   </sect2>

  <sect2 id="ini.sql-general">
   <title>普通 SQL</title>
    <para>
     <table>
      <title>普通 SQL 配置选项</title>
      <tgroup cols="3">
       <thead>
        <row>
         <entry>名称</entry>
         <entry>默认值</entry>
         <entry>类型</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>sql.safe_mode</entry>
         <entry>"0"</entry>
         <entry>PHP_INI_SYSTEM</entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </para>
    &ini.descriptions.title;
    <para>
     <variablelist>
      <varlistentry id="ini.sql.safe-mode">
       <term>
        <parameter>sql.safe_mode</parameter>
        <type>boolean</type>
       </term>
       <listitem>
        <para>
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
   </sect2>

   <sect2 id="ini.sect.debugger">
    <title>调试器配置选项</title>
    <variablelist>

     <varlistentry id="ini.debugger.host">
      <term>
       <parameter>debugger.host</parameter>
       <type>string</type>
      </term>
      <listitem>
       <para>
        调试器所使用的主机的 DNS 名或 IP 地址。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="ini.debugger.port">
      <term>
       <parameter>debugger.port</parameter>
       <type>string</type>
      </term>
      <listitem>
       <para>
        调试器所用的端口号。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="ini.debugger.enabled">
      <term>
       <parameter>debugger.enabled</parameter>
       <type>boolean</type>
      </term>
      <listitem>
       <para>
        是否启用调试器。
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </sect2>

  </sect1>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
