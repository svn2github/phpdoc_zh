<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.19 $ -->
<!-- $Author: gregory $ -->
<!-- EN-Revision: 1.23  Maintainer: Gregory  Status: ready -->
 <chapter id="tutorial">
  <title>简明教程</title>

  <para>
   本章我们将给出关于 PHP 的简明教程。虽然 PHP 的功能并不局限于生成动态的 WEB 页面，但本章的内容仅涉及于此。请查阅题为“<link linkend="intro-whatcando">PHP 能做什么？</link>”一节以获取更多信息。
  </para>
  <para>
   使用了 PHP 的 WEB 页面将被和通常的 HTML 页面一样处理，您可以用建立 HTML 页面的通常方法来建立和编辑它们。
  </para>

  <sect1 id="tutorial.requirements">
   <title>我需要些什么？</title>
   <para>
    在本教程中，我们假设您的服务器已经安装并运行了 PHP，所有以 <filename>.php</filename> 结尾的文件都将由 PHP 来处理。在大部分的服务器上，这是 PHP 的默认扩展名，不过，也请询问您的服务器管理员以确认。如果您的服务器支持 PHP，则您不需要做任何事情。您只用建立您的 <filename>.php</filename> 文件，并把他们放置到您的 WEB 目录中，服务器将神奇的自动为您解析这些文件。您不用编译任何东西，也不用安装任何其它的工具，您仅仅只需把这些使用了 PHP 的文件想象成简单的 HTML 文件，其中只不过多了一种新的标识符，在这里您可以做各种各样的事情。大多数的 WEB 主机都提供 PHP 的支持，如果您的主机不支持，您可以阅读“<ulink url="&url.php.links;">PHP 链接</ulink>”一节中的资源来查找支持 PHP 的 WEB 主机。
   </para>
   <para>
    我们假设您希望在本地机器开发以节约宝贵的带宽。在这种情况下，您需要安装一个诸如 <link linkend="install.apache">Apache</link> 的 WEB 服务器，当然还有 <ulink url="&url.php.downloads;">PHP</ulink>。您可能还希望安装一个数据库，例如 <ulink url="&url.mysql.docs;">MySQL</ulink>。您可以单独安装它们，当然简单的方法是<ulink url="&url.installkits;">获取一个预先配置的安装包</ulink>，用这个安装包，您只用点击几下鼠标，就可以自动的安装所有这些系统。在任何操作系统下建立有 PHP 支持的 WEB 服务器都十分简单，包括 Linux 和 Windiws。在 Linux 下，您会发现 <ulink url="&url.rpmfind;">rpmfind</ulink> 和 <ulink url="&url.rpmfind.pbone;">PBone</ulink> 能够在获取 RPM 时为您提供帮助。
   </para> 
  </sect1>

  <sect1 id="tutorial.firstpage">
   <title>您的第一个 PHP 页面</title>
   <para>
    在您的 WEB 服务器根目录（<varname>DOCUMENT_ROOT</varname>）下建立一个文件名为 <filename>hello.php</filename>，然后完成如下内容：
   </para>
   <para>
    <example>
     <title>我们的第一个 PHP 脚本： <filename>hello.php</filename></title>
     <programlisting role="php">
<![CDATA[
<html>
 <head>
  <title>PHP Tes</title>
 </head>
 <body>
 <?php echo "<p>Hello World</p>"; ?>
 </body>
</html>
]]>
     </programlisting>
     <simpara> 
	  在浏览器的地址栏里输入 URL 访问这个文件，在结尾加上“/hello.php”。如果您在本地开发，那么这个 URL 一般是 <literal>http://localhost/hello.php</literal> 或者 <literal>http://127.0.0.1/hello.php</literal>，当然这取决于 WEB 服务器的设置。这已经超出了本章的范围，请查阅您 WEB 服务器设置文件中 <varname>DocumentRoot</varname> 和 <varname>ServerName</varname> 的有关内容。（Apache 的配置文件是 &httpd.conf;）。如果所有的设置都正确，那么这个文件将被 PHP 解析，浏览器中将会输出如下结果：
     </simpara> 
     <screen role="html">
<![CDATA[
<html>
 <head>
  <title>PHP Test</title>
 </head>
 <body>
 <p>Hello World/<p>
 </body>
</html>
]]>
     </screen>
    </example>
   </para>
   <para>
    请注意这和 CGI 脚本不同，该文件不用制作成可执行脚本，它没有任何特殊的地方。您只需把它当作一个普通的 HTML 文档，只是里面多了一重新的标识符，使得您可以用它来做很多有趣的事情。
   </para>
   <para>
    该程序非常的简单，它仅仅只是利用了 PHP 的 <function>echo</function> 语句显示了 <literal>Hello World</literal>。您一定不会满足与此。
   </para>
   <para>
    如果您试过了这个例子，但是没有得到任何地输出，或者您的浏览器弹出了下载框，或者浏览器以文本方式显示了源文件，可能的原因是您的服务器还没有支持 PHP。您需要请您服务器的管理员根据本手册“<link linkend="installation">安装</link>”一章的内容使得服务器支持 PHP。如果您在本地开发，请阅读手册有关安装的章节以确保所有的设置都正确。如果问题仍然存在，请通过 <ulink url="&url.php.support;">PHP 支持</ulink>的各种方式获取帮助。
   </para>
   <para>
    以上例子的目的是为了显示 PHP 特殊标识符的格式。在这个例子中，我们用 <literal>&lt;?php</literal> 来表示 PHP 标识符的起始，然后我们放入 PHP 语句并通过加上一个终止标识符 <literal>?&gt;</literal> 来退出 PHP 模式。您可以根据您的需要在 HTML 文件中像这样开启或关闭 PHP 模式。请参阅手册中“<link linkend="language.basic-syntax">PHP 基本语法</link>”以获取更多信息。
   </para>
    <note> 
      <title>关于文本编辑器</title>
      <para>
	  有很多文本编辑器以及集成开发环境（IDEs）可以被用来建立、编辑和管理 PHP 文件。这些工具中的一部分被列在 <ulink 
       url="&url.phpeditorlist;">PHP 编辑器列表</ulink>中。如果您希望推荐其它的编辑器，请访问以上页面，并要求该页面的维护者将您推荐的编辑器加入到该列表中。使用支持语法高亮功能的浏览器会给您的开发带来很多帮助。
      </para>
     </note> 
    
     <note> 
      <title>关于文字处理器</title> 
      <para>
	  诸如 StarOffice Writer、Microsoft Word 和 Abiword 的文字处理器不适合用来编辑 PHP 程序。如果您希望用以上这些工具的某一种来处理脚本，您必须保证将结果存成了纯文本（PLAIN TEXT）格式，否则 PHP 将无法读取并运行这些脚本。
      </para>
     </note> 
    
     <note> 
      <title>关于 Windows 记事本</title> 
      <para>
	  如果您使用 Windows 记事本来编写 PHP 脚本，您需要注意在您保存文件时，文件的后缀名应该为 .php。（记事本将自动在文件名后面加上 .txt 后缀，除非您采取以下措施之一来避免这种情况。）当您保存文件时，系统会让你指定文件的文件名，这时请将您的文件名加上引号。（例如，“<filename>hello.php</filename>”。）或者，您也可以点击保存对话框中的“保存类型”下拉菜单，并将设置改为“所有文件”。这样您在输入文件名的时候就不用加引号了。
      </para>
    </note> 
   <para> 
    现在您已经成功建立了一个可以工作的 PHP 脚本。现在您可以建立一个最常用的 PHP 脚本。调用函数 <function>phpinfo</function>，您将会看到很多有关您系统有用的信息，以及<link linkend="language.variables.predefined">预定义变量</link>、已经加载的 PHP 模块和<link linkend="configuration">设置</link>信息。请花一些时间来查看这些重要的信息。
   </para> 
  </sect1>

  <sect1 id="tutorial.useful">
   <title>实用的脚本</title>
   <para>
    现在让我们来编写一些更实用的脚本。我们将检查浏览页面的访问者用了什么类型的浏览器。要达到这个目的，我们需要检查用户的 agent 字符串，它是浏览器发送的 HTTP 请求的一部分。该信息被存储在一个<link
    linkend="language.variables">变量</link>中。在 PHP 中，变量总是以一个美元符开头。我们现在感兴趣的变量是 <varname>$_SERVER["HTTP_USER_AGENT"]</varname>。
   </para>
   <note>
    <para>
     <link linkend="reserved.variables.server">$_SERVER</link>
     是一个特殊的 PHP 保留变量，它包含了 WEB
     服务器提供的所有信息，被称为自动全局变量（或“超级全局变量”）。请查阅本手册“<link
     linkend="language.variables.superglobals">自动全局变量</link>”的有关内容，以获取更多信息。这些特殊的变量是在
     PHP <ulink url="&url.php.release4.1.0;">4.1.0</ulink> 版本引入的。在这之前，我们使用
     <varname>$HTTP_*_VARS</varname> 数组，如
     <varname>$HTTP_SERVER_VARS</varname>。尽管现在已经不用了，但它们在新版本中仍然存在。（参见<link
     linkend="tutorial.oldcode">旧代码</link>中的注解。）
    </para>
   </note>
   <para>
    要显示该变量，我们只需简单地进行如下操作：
   </para>
   <para>
    <example>
    <title>打印一个变量（数组元素）</title>
    <programlisting role="php">
<![CDATA[
<?php echo $_SERVER["HTTP_USER_AGENT"]; ?>
]]>
    </programlisting>
    <para>
	 该脚本的输出可能是：
    </para>
     <screen role="html">
Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)
     </screen>
   </example>
   </para>
   <para>
    PHP 有很多种不同<link linkend="language.types">类型</link>的变量。在以上例子中我们打印了一个<link linkend="language.types.array">数组</link>的元素。数组是一类非常有用的变量。
   </para>
   <para>
    <varname>$_SERVER</varname> 只是 PHP 自动全局化的变量之一。您可以查阅“<link linkend="reserved.variables">保留变量</link>”一节来查看这些变量的列表，或者也可以建立如下的文件来得到一个完整的列表：
   </para>
   <para>
    <example>
     <title>利用 <function>phpinfo</function> 来显示所有预定义变量</title>
     <programlisting role="php">
<![CDATA[
<?php phpinfo(); ?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    如果您在您的浏览器中打开这个文件，您将看到关于 PHP 完整的信息，以及所有您可以使用的变量列表。
   </para>
   <para>
    您可以在一个 PHP 标识中加入多个 PHP 语句，也可以建立一个代码块来做比简单的 echo 更多的事情。例如，如果我们需要检查 Internet Explorer，我们可以进行如下操作：
   </para>
   <para>
    <example>
     <title><link linkend="control-structures">结构控制</link>与<link linkend="functions">函数</link>的使用</title>
     <programlisting role="php">
<![CDATA[
<?php
if (strstr($_SERVER["HTTP_USER_AGENT"], "MSIE")) {
	echo "You are using Internet Explorer<br />";
}
?>
]]>
     </programlisting>
     <para>
	  该脚本的输出可能是：
     </para>
     <screen role="html">
<![CDATA[
You are using Internet Explorer<br />
]]>
     </screen>
    </example>
   </para>
   <para>
    在这里我们要介绍一些新的原理。我们用了一个 <link linkend="control-structures.if">if</link> 语句。如果您对 C 语言的基本语法比较熟悉，则您应该对此很熟悉。如果您对 C 或者其它以上用到的语法没有足够的了解，您可能需要拿起任何一本 PHP 介绍性的书籍并阅读前面的两三个章节，或者也可以阅读本手册的“<link linkend="langref">语言参考</link>”一章。您可以在 <ulink url="&url.php.books;">&url.php.books;</ulink> 找到有关 PHP 的书籍的列表。
   </para>
   <para>
    我们需要介绍的第二个原理，是对 <function>strstr</function> 函数的调用。<function>strstr</function> 是 PHP 的一个内建函数，其功能是在一个字符串中搜索另外一个字符串。例如我们现在需要在 <varname>$_SERVER["HTTP_USER_AGENT"]</varname> 变量中寻找 <literal>"MSIE"</literal>。如果该字符串被找到，则函数返回 &true;，如果没有，则返回 &false;。如果该函数返回了 &true;，则 <link linkend="control-structures.if">if</link> 会将条件判断为 &true; 并运行其大括号 {} 内的代码；否则，则不运行。您可以自己尝试利用<link linkend="control-structures.if">if</link>、<link linkend="control-structures.else">else</link>以及其它的函数，例如 <function>strtoupper</function> 和 
    <function>strlen</function>，来建立类似的脚本。在本手册中，相关的页面也包含有范例。如果您对如何使用函数不是很确定，您可以阅读手册中有关“<link linkend="about.prototypes">如何阅读函数定义</link>”和“<link linkend="functions">PHP 函数</link>”的有关函数。  

   </para>
   <para>
    以下我们进一步显示如何进出 PHP 模式，甚至是在一个 PHP 代码块的中间：
   </para>
   <para>
    <example>
     <title>混和 HTML 和 PHP 模式</title>
     <programlisting role="php">
<![CDATA[
<?php
if (strstr($_SERVER["HTTP_USER_AGENT"], "MSIE")) {
?>
<h3>strstr must have returned true</h3>
<center><b>You are using Internet Explorer</b></center>
<?php
} else {
?>
<h3>strstr must have returned false</h3>
<center><b>You are not using Internet Explorer</b></center>
<?php
}
?>
]]>
     </programlisting>
     <para>
	  该脚本的输出可能是：
     </para>
     <screen role="html">
<![CDATA[
<h3>strstr must have returned true</h3>
<center><b>You are using Internet Explorer</b></center>
]]>
     </screen>
    </example>
   </para>
   <para>
    和以上我们用一个 PHP 的 echo 语句来输出不同的是，我们跳出了 PHP 模式来直接写 HTML 代码。这里很值得注意的一点是，对于这两种情况而言，脚本的逻辑效率是相同的。在判断了 <function>strstr</function> 函数的返回值是 &true; 或是 &false;，也就是判断了字符串 <literal>MSIE</literal> 是否被找到之后，最终只有一个 HTML 块被发送给浏览者。
   </para>
  </sect1>

  <sect1 id="tutorial.forms">
   <title>处理表单</title>
   <para>
    PHP 一个很有用的特点体现在它处理 PHP 表单的方式。您需要理解的非常重要的原理，是表单的任何元素都在您的 PHP 脚本中自动生效。请参阅本手册“<link linkend="language.variables.external">PHP 之外的变量</link>”以获取关于在 PHP 中使用表单的详细信息及范例。以下是 HTML 表单的范例：
   </para>
   <para>
    <example>
     <title>一个简单的 HTML表单</title>
     <programlisting role="html">
<![CDATA[
<form action="action.php" method="POST">
 Your name: <input type="text" name="name" />
 Your age: <input type="text" name="age" />
 <input type="submit">
</form>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    该表单中并没有什么特殊的地方，其中没有使用任何特殊的标识符。当用户填写了该表单并点击了提交按钮，页面 <filename>action.php</filename> 将被调用。在该文件中，您可以加入如下内容：
   </para>
   <para>
    <example>
     <title>打印来自表单的数据</title>
     <programlisting role="php">
<![CDATA[
Hi <?php echo $_POST["name"]; ?>.
You are <?php echo $_POST["age"]; ?> years old.
]]>
     </programlisting>
     <para>
	  该脚本的输出可能是：
     </para>
     <screen role="html">
<![CDATA[
Hi Joe.
You are 22 years old.
]]>
     </screen>
    </example>
   </para>
   <para>
    该脚本进行的工作应该已经很明显了，这儿并没有其它更复杂的内容。PHP 将自动为您设置 <varname>$_POST["name"]</varname> 和 <varname>$_POST["age"]</varname> 变量。在这之前我们使用了自动全局变量 <varname>$_SERVER</varname>，现在我们引入了自动全局变量 <link linkend="reserved.variables.post">$_POST</link>，它包含了所有的 POST 数据。请注意我们的表单提交数据的<emphasis>方法</emphasis>（method）。如果我们能使用了 <emphasis>GET</emphasis> 方法，那么表单中的信息将被储存到自动全局变量 <link linkend="reserved.variables.get">$_GET</link> 中。如果您并不关心请求数据的来源，您也可以用自动全局变量 <link linkend="reserved.variables.request">$_REQUEST</link>，它包含了所有 GET、POST、COOKIE 和 FILE 的数据。请参阅 <function>import_request_variables</function> 函数。
   </para>
  </sect1>
  
  <sect1 id="tutorial.oldcode">
   <title>在新版本的 PHP 中使用旧的 PHP 代码</title>
   <para>
    现在，PHP 已经发展成为一种流行的脚本语言，您可以在很多资源里找到您可以在您自己的脚本中重新利用的代码。PHP 语言的开发者为兼容性下了很多功夫，因此在新版本的 PHP 下，老版本的代码应该可以在不作任何改动的情况下（理想地）运行。不过实际上，我们还是必须对老的代码做一些改动。
   </para>
   <para>
    有可能影响到老版本的代码的最重要的两点改动分别是：
    <itemizedlist>
     <listitem>
      <simpara>
       取消了旧的 <varname>$HTTP_*_VARS</varname> 数组（在函数或者方法中他们原本是全局变量）。PHP <ulink url="&url.php.release4.1.0;">4.1.0</ulink> 版本引入了如下<link linkend="language.variables.superglobals">自动全局数组变量</link>：
       <varname>$_GET</varname>、<varname>$_POST</varname>、
       <varname>$_COOKIE</varname>、<varname>$_SERVER</varname>、
       <varname>$_FILE</varname>、<varname>$_ENV</varname>、<varname>$_REQUEST</varname> 以及 <varname>$_SESSION</varname>。 老的 <varname>$HTTP_*_VARS</varname> 数组，诸如 $HTTP_POST_VARS 等，从 PHP 3 就已经开始使用，它们仍然存在。
       &avail.register-long-arrays;
      </simpara>
     </listitem>
     <listitem>
      <simpara>
	   外部变量不再默认得被注册为全局变量。也就是说，从 PHP <ulink url="&url.php.release4.2.0;">4.2.0</ulink> 版本开始，$php.ini; 中的设置选项 <link linkend="ini.register-globals">register_globals</link> 默认值变成了 <emphasis>off</emphasis>。我们建议您用以上提到的自动全局数组变量来访问这些值。但可能老的脚本、书籍以及教程都可能建立在该设置为 on 的基础上。如果该选项被设置为 on，则您便可以在 URL <literal>http://www.example.com/foo.php?id=42</literal> 中直接使用变量 <varname>$id</varname>。但不管被设置为 on 还是 off，<varname>$_GET['id']</varname> 一直有效。
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
   <para>
    如果您希望了解关于这些改动的细节，请参阅“<link linkend="language.variables.predefined">预定义变量</link>”一节以及其中的超链接。
   </para>
  </sect1>
  
  <sect1 id="tutorial.whatsnext">
   <title>下一步做什么？</title>
   <para>
    用您现在掌握的知识，您应该能够理解本手册中的大部分内容以及其中各式各样的脚本范例。在 php.net 网站的连接区 <ulink url="&url.php.links;">&url.php.links;</ulink> 您能购获得其它更多的范例。
   </para> 
   <para> 
    请查阅 PHP Conference 资料网站 <ulink url="&url.php.conf;">&url.php.conf;</ulink> 及 <ulink url="&url.php.talks;">&url.php.talks;</ulink> 以观看更多幻灯片，这些幻灯片展示了许多 PHP 其它的功能。
   </para>
  </sect1>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

