<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.4 $ -->
<!-- $Author: lm92 $ -->
<!-- EN-Revision: 1.3 Maintainer: lm92 Status: ready -->
  <chapter id="security.apache">
   <title>安装成 Apache 模块</title>
   <simpara>
    当 PHP 以 Apache 模块方式安装时，它将继承 Apache 的用户权限（比如说那些“nobody”用户）。这种安装会给安全和验证机制造成一定的冲击。比如，如果您用 PHP 来访问数据库，而数据库本身没有访问控制机制的话，那么那些“nobody”用户也可以访问数据库了。这意味着，一个恶意脚本可以不用提供用户名和密码就可以访问和修改数据库。而且，就算是 Web Spider 也有可能偶然地发现你的数据库管理页面，并且删除你所有的数据库。当然，你可以使用 Apache 的验证机制来防止这类问题，或者使用如 LDAP、.htaccess 文件等技术来设计你的防问控制模块，并把它作为你 PHP 程序的一部份。
   </simpara>
   <simpara>
    通常，一但安全性达到可以使 PHP 用户（这里也可以是 Apache 用户）承担的风险极小的程度时，您就会发现， PHP 已经到了阻止向用户目录写入任何文件或禁止访问和修改数据库的地步了。这就是说，无论是正常的文件还是非正常的文件，无论是正常的数据库事务来是恶意的请求，都会被拒之门外。
   </simpara>
   <simpara>
    一个常犯的对安全性不利的错误就是让 Apache 拥有 root 权限，或者通过其它途径斌予 Apache 更强大的功能。
   </simpara>
   <simpara>
    把 Apache 用户的权限提升为 root 是极度危险的做法，而且可能会危及到整个系统的安全。所以一般人都不应该考虑以 sudo、chroot 或者 root 权限运行。
   </simpara>
   <simpara>
    除此之外还有一些比较简单的解决方案。比如说可以使用 <link linkend="ini.open-basedir">open_basedir</link> 来限制哪些目录可以使用 PHP。您也可以设置 Apache 的专属区域，从而把所有的 Web 活动都限制用户或系统的文件之外。
   </simpara>
  </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
