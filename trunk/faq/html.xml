<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.2 $ -->
<!-- $Author: dallas $ -->
<!-- EN-Revision:1.17 Maintainer: dallas Status: ready -->
 <chapter id="faq.html">
  <title>PHP 和 HTML</title>
  <titleabbrev>PHP 和 HTML</titleabbrev>

  <para>
   PHP 和 HTML 有很多相互作用：PHP 能生成 HTML，HTML 可以向 PHP 传递信息。
  </para>

  <qandaset>
   <qandaentry id="faq.html.encoding">
    <question>
     <para>
      当我通过表单／URL 传值时需要用什么编码／解码方法？
     </para>
    </question>
    <answer>
     <para>
      在几个环节上编码方式很重要。假定你有 <type>string</type> <varname>$data</varname>，其中包含了你想通过非编码方式传递的字符串，那这是相关步骤：
      <itemizedlist>
       <listitem>
        <para>
         HTML 解析。要指定一个任意的字符串，你<emphasis>必须</emphasis>将其放在双引号中，并用
         htmlspecialchars 处理整个值。
        </para>
       </listitem>
       <listitem>
        <para>
         URL：URL 由几部分组成。如果你希望自己的数据被当作其中一项来解释，你<emphasis>必须</emphasis>用
         <function>urlencode</function> 对其编码。
        </para>
       </listitem>
      </itemizedlist>
     </para>
     <para>
      <example>
       <title>隐藏的 HTML 表单单元</title>
        <programlisting role="php">
<![CDATA[
<?php
    echo "<input type=hidden value=\"" . htmlspecialchars($data) . "\">\n";
?>
]]>
        </programlisting>
      </example>
      <note>
       <simpara>
        用 <function>urlencode</function> 来处理 <varname>$data</varname> 是错误的，因为是浏览器的责任来
        <function>urlencode</function> 数据。所有流行的浏览器都能正确处理。注意不论何种方法（例如 GET 或
        POST）都会这样。不过你只会在用 GET 请求时注意到这一点，因为 POST 请求通常是隐藏的。
       </simpara>
      </note>
      <example>
       <title>等待用户编辑的数据</title>
        <programlisting role="php">
<![CDATA[
<?php
    echo "<textarea name=mydata>\n";
    echo htmlspecialchars($data)."\n";
    echo "</textarea>";
?>
]]>
        </programlisting>
      </example>
      <note>
       <simpara>
        数据会按照预期的显示在浏览器中，因为浏览器会解释 HTML 转义符号。
       </simpara>
       <simpara>
        当提交时，不论是 GET 或者 POST 方法，数据都会被浏览器进行 urlencode
        来传输，并直接被 PHP urldecode。所以最终你不需要自己处理任何
        urlencoding/urldecoding，全都是自动处理的。
       </simpara>
      </note>
      <example>
       <title>URL 中的例子</title>
        <programlisting role="php">
<![CDATA[
<?php
    echo "<a href=\"" . htmlspecialchars("/nextpage.php?stage=23&data=" .
        urlencode($data)) . "\">\n";
?>
]]>
        </programlisting>
      </example>
      <note>
       <simpara>
        事实上你在捏造一个 HTML 的 GET 请求，因此需要手工对数据进行 <function>urlencode</function>。
       </simpara>
      </note>
      <note>
       <simpara>
        你需要对整个 URL 进行 <function>htmlspecialchars</function>，因为 URL 是作为
        HTML 属性的一个值出现的。在本例中，浏览器会首先对值进行
        un-<function>htmlspecialchars</function>，然后再传递此 URL。PHP 将能正确理解
        URL，因为你对数据进行了 <function>urlencoded</function>。
       </simpara>
       <simpara>
        你会注意到 URL 中的 <literal>&amp;</literal> 被替换成了
        <literal>&amp;amp;</literal>。如果你忘了这一步，尽管大多数浏览器都能恢复，但也不总是这样。因此即使
        URL 不是动态的，你也<emphasis>需要</emphasis>对 URL 进行 <function>htmlspecialchars</function>。
       </simpara>
      </note>
     </para>
     <!-- TODO: a note about addgpcslashes? -->
    </answer>
   </qandaentry>

   <qandaentry id="faq.html.form-image">
    <question>
     <para>
      我在试用 &lt;input type="image"&gt; 标记，但是没有 $foo.x 和 $foo.y 变量，它们哪去了？
     </para>
    </question>
    <answer>
     <para>
      当提交表单时，可以用图片代替标准的提交按钮，用类似这样的标记：
      <programlisting role="html">
<![CDATA[
<input type="image" src="image.gif" name="foo">
]]>
      </programlisting>
      当用户点击了图片的任何部分，该表单会被发送到服务器并加上两个额外的变量：foo.x 和 foo.y。
     </para>
     <para>
      因为 $foo.x 和 $foo.y 在 PHP 中是非法的变量名，它们被自动转换成了 $foo_x 和
      $foo_y。也就是用下划线代替了点。
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.html.arrays">
    <question>
     <para>怎样在 HTML 的 &lt;form&gt; 中建立数组？</para>
    </question>
    <answer>
     <para>
      要使你的 &lt;form&gt; 结果被当成 <link linkend="language.types.array">array</link>
      发送到 PHP 脚本，你要对 &lt;input&gt;，&lt;select&gt; 或者 &lt;textarea&gt; 单元这样命名：
      <programlisting role="html">
<![CDATA[
<input name="MyArray[]">
<input name="MyArray[]">
<input name="MyArray[]">
<input name="MyArray[]">
]]>
      </programlisting>
      注意变量名后的方括号，这使其成为一个数组。你可以通过给不同的单元分配相同的名字来把单元分组到不同的数组里：
      <programlisting role="html">
<![CDATA[
<input name="MyArray[]">
<input name="MyArray[]">
<input name="MyOtherArray[]">
<input name="MyOtherArray[]">
]]>
      </programlisting>
      这将产生两个数组，MyArray 和 MyOtherArray，并发送给 PHP 脚本。还可以给数组分配制定的键名：
      <programlisting role="html">
<![CDATA[
<input name="AnotherArray[]">
<input name="AnotherArray[]">
<input name="AnotherArray[email]">
<input name="AnotherArray[phone]">
]]>
      </programlisting>
      AnotherArray 数组将包含键名 0，1，email 和 phone。
      </para>
      <para>
       <note>
        <para>
	 指定数组的键名是 HTML 的可选项。如果你不指定键名，则数组被按照单元在表单中出现的顺序填充。第一个例子将包含键名 0，1，2 和 3。
        </para>
       </note>
      </para>
      <para>
      参见<link linkend="ref.array">数组函数库</link>和<link linkend="language.variables.external">PHP 的外部变量</link>。
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.html.select-multiple">
    <question>
     <para>
      怎样从可多选的 HTML 的 select multiple 标记中得到所有结果？
     </para>
    </question>
    <answer>
     <para>
      可多选的 select multiple 标记是 HTML 的一个构造，允许用户从一个列表中选择多个项目。这些项目接着被传递给该表单 action 中指定的处理程序。问题是它们都会被用同样的名字传递。例如：
      <programlisting role="html">
<![CDATA[
<select name="var" multiple>
]]>
      </programlisting>
      每个被选项将这样被传递到表单处理程序：
      <programlisting>
var=option1
var=option2
var=option3
      </programlisting>
      每个选项将覆盖前面一个 <varname>$var</varname> 变量的内容。解决方案是用 PHP
      的“表单单元数组”特性。使用方法如下：
      <programlisting role="html">
<![CDATA[
<select name="var[]" multiple>
]]>
      </programlisting>
      这将告诉 PHP 将 <varname>$var</varname> 当成数组对待，每个对 var[]
      的赋值都会给数组增加一项。第一项将成为 <varname>$var[0]</varname>，下一个是
      <varname>$var[1]</varname>，等等。可以用 <function>count</function>
      函数来测定选择了多少个项目，必要时可以用 <function>sort</function>
      函数来对选项的数组进行排序。
     </para>
     <para>
      注意如果你在 JavaScript 中通过名字来引用单元，单元名字中的 <literal>[]</literal>
      可能会造成问题。用表单单元中的数字序号来替代，或者将变量名用单引号括起来并用其作为单元数组的索引，例如：
      <programlisting>
variable = documents.forms[0].elements['var[]'];
      </programlisting>
     </para>
    </answer>
   </qandaentry>
  </qandaset>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
