<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.3 $ -->
<!-- $Author: dallas $ -->
<!-- EN-Revision:1.18 Maintainer: dallas Status: ready -->
<chapter id="faq.build">
  <title>编译问题</title>
  <titleabbrev>编译问题</titleabbrev>

   <para>
    本节汇集了大多数编译时出现的常见错误。
   </para>

  <qandaset>
   <qandaentry id="faq.build.configure">
    <question>
     <para>
      我用匿名 CVS 得到了最新版的 PHP，但是里面没有 configure 脚本！
     </para>
    </question>
    <answer>
     <para>
      你必须安装有 GNU 的 autoconf 包，这样才可以从 <filename>configure.in</filename> 生成 configure 脚本。从 CVS 得到源程序后只要在最高层的目录中运行
      <command>./buildconf</command> 即可。（同样，除非你用了 <literal>--enable-maintainer-mode</literal>
      选项来运行 configure，否则即使 <filename>configure.in</filename> 文件更新了，configure
      脚本也不会自动重新生成。所以当你发现 <filename>configure.in</filename> 文件更新了时要确保手工重新生成 configure
      脚本。有一个症状是在 configure 之后或者运行 <filename>config.status</filename> 时在 Makefile 中寻找类似 @VARIABLE@ 的东西。）
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.build.configuring">
    <question>
     <para>
      我在配置 PHP 和 Apache 一起工作时遇到了问题。说没找到 <filename>httpd.h</filename>，但这个文件明明就在那里！
     </para>
    </question>
    <answer>
     <para>
      你需要告诉 configure/setup 脚本你的 Apache 源程序最上层的目录位置。这意味着你需要这样指定
      <literal>--with-apache=/path/to/apache</literal> 而<emphasis>不是</emphasis>这样 <literal>--with-apache=/path/to/apache/src</literal>。
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.build.not-found">
    <question>
     <para>
      当我运行 configure 时，报告说找不到头文件或 GD 库或 gdbm，或其它的什么包！
     </para>
    </question>
    <answer>
     <para>
      你可以通过指定附加的选项让 configure 脚本在非标准的路径中寻找头文件和库并传递给 C 预处理器和连接器，例如：
      <programlisting>
<![CDATA[
    CPPFLAGS=-I/path/to/include LDFLAGS=-L/path/to/library ./configure
]]>
      </programlisting>
      如果你用 csh 的变种作为你的登陆 shell（为什么？），那就是：
      <programlisting>
<![CDATA[
    env CPPFLAGS=-I/path/to/include LDFLAGS=-L/path/to/library ./configure
]]>
      </programlisting>
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.build.yytname">
    <question>
     <para>
      当编译 <filename>language-parser.tab.c</filename> 文件时，报错说 <literal>yytname undeclared</literal>。
     </para>
    </question>
    <answer>
     <para>
       你需要更新 Bison 的版本。最新版本在 <ulink url="&faqurl.bison;">&faqurl.bison;</ulink>。
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.build.link">
    <question>
     <para>
      当我运行 <command>make</command> 时，看上去一切正常，可当连接最后的程序时报告说找不到某些文件而失败了。
     </para>
    </question>
    <answer>
     <para>
      一些旧版本的 make 没有正确将 functions 目录下编译后的文件放到同一个目录下。试试运行
      <command>cp *.o functions</command> 然后再运行 <command>make</command>
      看看有没有什么帮助。如果成功了，那你确实需要更新到最新版的 GNU make。
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.build.undefined">
    <question>
     <para>
      当连接 PHP 时，报告说有一些未定义的引用。
     </para>
    </question>
    <answer>
     <para>
      看看连接的这一行命令，确认所有适当的库都包括在最后了。你通常可能漏掉了“ldl”和你包括的任何数据库支持所需要的库。
     </para>
     <para>
      如果你和 Apache 1.2.x 一起连接，记得把适当的信息添加到配置文件的 EXTRA_LIBS 这一行并重新运行 Apache
      的配置脚本了吗？更多信息参见发行包中的 <ulink url="&faqurl.file.installation;">INSTALL</ulink> 文件。
     </para>
     <para>
      一些人也报告说在和 Apache 连接时他们不得不在 <filename>libphp4.a</filename> 之后立即加上“ldl”。
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.build.Apache">
    <question>
     <para>
      我不知道怎样把 PHP 和 Apache 1.3 一起编译。
     </para>
    </question>
    <answer>
     <para>
      这其实很简单。小心地照着以下步骤来：
      <itemizedlist>
       <listitem>
        <simpara>
         从 <ulink url="&faqurl.apache;">&faqurl.apache;</ulink> 下载最新版的 Apache 1.3。
        </simpara>
       </listitem>
       <listitem>
        <simpara>
         解压缩到某处，例如 <filename>/usr/local/src/apache-1.3</filename>。
        </simpara>
       </listitem>
       <listitem>
        <simpara>
         编译 PHP，先运行 <command>./configure --with-apache=/&lt;path&gt;/apache-1.3</command>（用你 apache-1.3 所在的真实路径替换掉 &lt;path&gt;。）
        </simpara>
       </listitem>
       <listitem>
        <simpara>
         输入 <command>make</command> 接着是 <command>make install</command> 来编译 PHP 并把必要的文件拷贝到 Apache 的源程序目录树中。
        </simpara>
       </listitem>
       <listitem>
        <simpara>
         改变当前目录到 <filename>/&lt;path&gt;/apache-1.3/src</filename> 目录并编辑 <filename>Configuration</filename> 文件。添加这一行：<literal>AddModule modules/php4/libphp4.a</literal>。
        </simpara>
       </listitem>
       <listitem>
        <simpara>
         输入 <command>./Configure</command> 接着是 <literal>make</literal>。
        </simpara>
       </listitem>
       <listitem>
        <simpara>
         你现在应该有一个包括 PHP 支持的 httpd 可执行程序了！
        </simpara>
       </listitem>
      </itemizedlist>
     </para>
     <para>
      <emphasis>注意：</emphasis>你也可以用新的 Apache <literal>./configure</literal>
      脚本。参见 Apache 发行包中 <literal>README.configure</literal>
      文件中的说明。也看看 PHP 发行包中的 <filename>INSTALL</filename> 文件。
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.build.not-running">
    <question>
     <para>
      我按照所有的步骤在 UNIX 下安装了PHP 的 Apache 模块版本，但我的 PHP 脚本被显示在浏览器中或者提示保存此文件。
     </para>
    </question>
    <answer>
     <para>
      这说明 PHP 模块出于某些原因没有被调用。在寻求更多帮助前先检查三件事：
      <itemizedlist>
       <listitem>
        <simpara>
         确认你运行的 httpd 程序就是你刚刚编译的新 httpd 程序。运行： 
         <literal>/path/to/binary/httpd -l</literal>
        </simpara>
        <simpara>
         如果你没看到 <filename>mod_php4.c</filename> 被列出来那你就没有运行对程序。找到并正确安装程序。
        </simpara>
       </listitem>
       <listitem>
        <simpara>
         确认你在 <literal>Apache .conf</literal> 文件中加入了正确的 Mime 类型。应该是：
         <literal>AddType application/x-httpd-php3 .php3</literal>（PHP 3）
        </simpara>
        <simpara>
         或者 <literal>AddType application/x-httpd-php .php</literal>（PHP 4）
        </simpara>
        <simpara> 
         也确认 AddType 这一行没有隐藏在 &lt;Virtualhost&gt; 或者 &lt;Directory&gt; 块中，这可能会造成你的测试脚本所在位置没有被应用到此设置。
        </simpara>
       </listitem>
       <listitem>
        <simpara>
         最后，Apache 1.2 和 Apache 1.3 之间默认配置文件的位置改变了。你要确认你添加 AddType
         行的文件就是实际上用的。你可以在你的 httpd.conf 中添加一个明显的语法错误或者其它明显修改，这可以告诉你是否读取了正确的文件。
        </simpara>
       </listitem>
      </itemizedlist>
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.build.activate-module">
    <question>
     <para>
      说要用：<literal>--activate-module=src/modules/php4/libphp4.a</literal>，但是此文件根本不存在，于是我改成了
      <literal>--activate-module=src/modules/php4/libmodphp4.a</literal>，结果不行。怎么回事？
     </para>
    </question>
    <answer>
     <para>
       注意 <filename>libphp4.a</filename> 文件本来就不该存在，apache 进程将创建它！
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.build.ansi">
    <question>
     <para>
      当我用 <literal>--activate-module=src/modules/php4/libphp4.a</literal> 试着把 PHP 编译成 Apache
      的静态模块时，报告说我的编译器不服从 ANSI 标准。
     </para>
    </question>
    <answer>
     <para>
      这是一个 Apache 误报的错误信息，在更新的版本中已经修正了。
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.build.apxs">
    <question>
     <para>
      当我用 <literal>--with-apxs</literal> 编译 PHP 时得到奇怪的错误信息。
     </para>
    </question>
    <answer>
     <para>
      这里要检查三件事。首先，出于某些原因当 Apache 生成 apxs Perl 脚本时，有时没有正确的编译和标记变量就结束了。找到你的
      apxs 脚本（用命令 <command>which apxs</command>），有时会在 <filename>/usr/local/apache/bin/apxs</filename> 或者 <filename>/usr/sbin/apxs</filename>。打开并检查类似如下的行：
      <programlisting>
<![CDATA[
my $CFG_CFLAGS_SHLIB  = ' ';          # substituted via Makefile.tmpl
my $CFG_LD_SHLIB      = ' ';          # substituted via Makefile.tmpl
my $CFG_LDFLAGS_SHLIB = ' ';          # substituted via Makefile.tmpl
]]>
      </programlisting>
      如果你看到这几行，那问题就在这里。它们可能包含了仅仅空格或者其它不正确的值，例如“q()”。改成这样：
      <programlisting>
<![CDATA[
my $CFG_CFLAGS_SHLIB  = '-fpic -DSHARED_MODULE'; # substituted via Makefile.tmpl
my $CFG_LD_SHLIB      = 'gcc';                   # substituted via Makefile.tmpl
my $CFG_LDFLAGS_SHLIB = q(-shared);              # substituted via Makefile.tmpl 
]]>
      </programlisting>
      第二个可能的问题仅可能在在 Red Hat 6.1 和 6.2 中发生。Red Hat 发行的 apxs 脚本坏了。查找这一行：
      <programlisting>
<![CDATA[
my $CFG_LIBEXECDIR    = 'modules';         # substituted via APACI install
]]>
      </programlisting>
      如果你看到上面这一行，改成这样：
      <programlisting>
<![CDATA[
my $CFG_LIBEXECDIR    = '/usr/lib/apache'; # substituted via APACI install
]]>
      </programlisting>
       最后，如果你重新配置或者重装了 Apache，在 <command>./configure</command> 之后和 <command>make</command> 之前增加一个 <command>make clean</command> 命令。
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.build.microtime">
    <question>
     <para>
     在 <command>make</command> 的过程中，在 microtime 中出错，还有很多 <literal>RUSAGE_</literal> 之类的东西。
    </para>
    </question>
    <answer>
     <para>
      如果 <command>make</command> 时遇到类似这样的问题：
      <programlisting>
<![CDATA[
microtime.c: In function `php_if_getrusage':
microtime.c:94: storage size of `usg' isn't known
microtime.c:97: `RUSAGE_SELF' undeclared (first use in this function)
microtime.c:97: (Each undeclared identifier is reported only once
microtime.c:97: for each function it appears in.)
microtime.c:103: `RUSAGE_CHILDREN' undeclared (first use in this function)
make[3]: *** [microtime.lo] Error 1
make[3]: Leaving directory `/home/master/php-4.0.1/ext/standard'
make[2]: *** [all-recursive] Error 1
make[2]: Leaving directory `/home/master/php-4.0.1/ext/standard'
make[1]: *** [all-recursive] Error 1
make[1]: Leaving directory `/home/master/php-4.0.1/ext'
make: *** [all-recursive] Error 1
]]>
      </programlisting>
     </para>
     <para>
     你的系统坏了。你需要安装一个符合你的 glibc 的 glibc-devel 包来修复 <filename>/usr/include</filename>
     中的文件。这和 PHP 绝对没有任何关系。要证实这一点，试试这个简单的测试：
     <programlisting>
<![CDATA[
$ cat >test.c <<X
#include <sys/resource.h>
X
$ gcc -E test.c >/dev/null
]]>
      </programlisting>
      如果出现错误，那你就知道头文件坏了。
     </para>
    </answer>
   </qandaentry>
   
   <qandaentry id="faq.build.upgrade">
    <question>
     <para>
      我想升级我的 PHP。上哪里找到我用来配置目前的 PHP 的 <command>./configure</command> 的参数呢？
     </para>
    </question>
    <answer>
     <para>
      要么在你当前的 PHP 的安装目录查看 config.nice 文件，如果没有，只要运行此脚本：
      <programlisting>
<![CDATA[
       <?php phpinfo(); ?> 
]]>
      </programlisting>
      在输出的顶端显示了用来配置此 PHP 的 <command>./configure</command> 参数。
     </para>
    </answer>
   </qandaentry>
   
   <qandaentry id="faq.build.gdlibs">
    <question>
     <para>
      和 GD 库一起编译 PHP 时，要么给出一个奇怪的编译错误，要么在运行时出现 segfaults。
     </para>
    </question>
    <answer>
     <para>
      确保你的 GD 库和 PHP 在连接时使用了用同样的支持库（例如 libpng）。
     </para>
    </answer>
   </qandaentry>   
   
  </qandaset>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
