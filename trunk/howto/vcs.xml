<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- $Author: herrywood $ -->
<!-- $EN-Revision: 292216 $ -->
 <chapter xml:id="chapter-svn" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>使用 SVN 开展工作</title>

  <para>
   PHP 文档是使用 <link
   xlink:href="&url.svn;">SVN</link> (<emphasis>Subversion</emphasis>)来维护的。SVN
    允许文档贡献者对不同的文件进行修改而不会互相影响。
  </para>
  
  <para>
   一个 SVN 系统会有一 个用于存放所有文件的核心服务器。一个 SVN 服务器可存放许多模块，PHP 文档人员使用的主要模块名称为
   <literal>doc-base</literal>，其中包含基础内容（象 DocBook 校验工具，此指引，等等）。然后是针对每种语言的其他模块，根据语言代码命名（比如：德语为
   <literal>de</literal>）。要访问服务器需要在系统里有 SVN 客户端程序。
  </para>
  
  <para>
   当决定开始对一个文件开展工作时，需要先将其检出（即下载此文件）。然后才能可修改此文件的本地副本。完成后，需要提交修改（即上传文件）。SVN
   客户端会要求输入简短的注释，说明为什么需要进行提交。SVN
   服务器则将储存所有文件的历史及其所提交的信息。然后，每个人都可看到此修改情况，因为服务器会将所有这些修改生成的差别比较信息发送到一个<link
   linkend="chapter-maillist">邮件列表</link>，且历史也可通过 SVN 客户端或位于
   <link xlink:href="&url.php.svn;">&url.php.svn;</link> 的 Web
   界面来查看。你也可以根据需要，通过 SVN 客户端来删除或添加文件。
  </para>

  <para>
   本节并非希望成为 SVN 指南，而仅仅是进行一 次快速的演练，以帮助用户着手检出
   <literal>phpdoc</literal> 及译文所在的文档树，和提交修改。完整的 SVN
   文档请查阅 <link xlink:href="&url.svn;">&url.svn;</link>。
  </para>

  <para>
   SVN 指南、FAQ、甚至一整本 书都可以在下列地址找到：
   <itemizedlist>
    <listitem>
     <simpara><link xlink:href="&url.svntut1;">&url.svntut1;</link></simpara>
    </listitem>
    <listitem>
     <simpara><link xlink:href="&url.svn.faq;">SVN FAQ</link></simpara>
    </listitem>
    <listitem>
     <simpara><link xlink:href="&url.svn.book;">SVN 书籍</link></simpara>
    </listitem>
   </itemizedlist>
  </para>
  
  <para>
   也可以随时输入 <literal>man svn</literal> 命令来取得关于 SVN
   客户端的帮助。 这会产生一段被称为“manpage”的帮助文本 。使用 <literal>svn
   --help</literal> 命令也可以获得帮助。
  </para>

  <sect1 xml:id="svn-account">
   <title>获取 SVN 帐号</title>
   
   <para>
    首先，在能够进行文档修改之前，需要先获得对 <link xlink:href="&url.php.svn;">svn.php.net</link>
    的写权限。可以总是匿名地检出模块，但除非有帐号，否则不能提交修改。如果只是想检出文件，可以简单地使用匿名方式检出源文件。请查阅
    <link xlink:href="&url.php.svn;">php.net SVN 页面</link>以获取更多信息。
   </para>

   <para>
    同时请注意，即使在服务器上有 SVN 帐号，也可能没有对 <literal>phpdoc</literal> 和/或译文模块的写入权限。Karma
    系统控制着谁可以访问哪些模块，所以如果你有 SVN 帐号并 Karma 的写入权限，请通过
    <link xlink:href="mailto:&email.phpdoc;">&email.phpdoc;</link> 查询 Karma 权限。注意，在 Karma 中对 PHP
    源代码树有写入权限的人，同样也对 <literal>phpdoc</literal> 有写入权限。
   </para>

   <para>
    在 php.net 获取一个 SVN 帐号并不困难，只需做以下两件事：
    <itemizedlist>
     <listitem>
      <simpara>
       首先，用英文向<link xlink:href="mailto:&email.phpdoc;">&email.phpdoc;</link>
       发电子邮件，说明自己希望利用 SVN 帐号做些什么（即参与 PHP
       文档工作）。同时也请附上一些个人和背景信息以便开发人员了解你现在的状况。
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       一旦开发小组有人回应了你的邮件，你需要访问 <link
       xlink:href="&url.php.svnaccount;">&url.php.svnaccount;</link> 并填写正式的注册请求表单。
      </simpara>
     </listitem>
    </itemizedlist>
   </para>

   <para>
    以上两个步骤和其他在 svn.php.net 上与 SVN 帐号相关的信息，都可以在注册表单所在的网页
    <link xlink:href="&url.php.svnaccount;">&url.php.svnaccount;</link>
    找到。注意，此过程并非是自动化的。如果在几天后没收到任何回应，请再发一次电子邮件给 PHP
    组进行申请。
   </para>

  </sect1> 

  <sect1 xml:id="svn-login">
   <title>SVN 登录</title>
   <para>
    现在有 SVN 模块的写入权限了，还要在 <filename>.subversion/config</filename> 文件中配置一些变量：
   </para>
   
   <!-- TODO: Talk about why we want this stuff. -->

   <para>
    如果在主目录中不存在 <filename>.subversion/config</filename> 文件，则现在创建一个并在其中加入下面几行内容。注意，如果使用
    Cygwin，主目录会在运行 bash 外壳时最先打开（即 Cygwin 安装目录下的 home/用户名 目录）。
    <informalexample>
     <programlisting>
[auto-props]
*.c = svn:eol-style=native;svn:keywords=Id Rev Revision
*.cpp = svn:eol-style=native;svn:keywords=Id Rev Revision
*.h = svn:eol-style=native;svn:keywords=Id Rev Revision
*.m = svn:eol-style=native;svn:keywords=Id Rev Revision
*.dsp = svn:eol-style=CRLF
*.dsw = svn:eol-style=CRLF
*.sh = svn:eol-style=native;svn:executable;svn:keywords=Id Rev Revision
*.txt = svn:eol-style=native;svn:keywords=Id Rev Revision
*.png = svn:mime-type=image/png
*.jpg = svn:mime-type=image/jpeg
Makefile = svn:eol-style=native
*.php = svn:eol-style=native;svn:keywords=Id Rev Revision
*.xml = svn:eol-style=native;svn:keywords=Id Rev Revision
*.sql = svn:eol-style=native;svn:keywords=Id Rev Revision
*.tpl = svn:eol-style=native;svn:keywords=Id Rev Revision
*.am = svn:eol-style=native;svn:keywords=Id Rev Revision
*.in = svn:eol-style=native;svn:keywords=Id Rev Revision
*.m4 = svn:eol-style=native;svn:keywords=Id Rev Revision
*.s = svn:eol-style=native;svn:keywords=Id Rev Revision
     </programlisting>
    </informalexample>
   </para>

   <para>
    每次向 SVN 资源库发命令时，都必需指定资源库的 svnroot 目录。下面使用的 SVN 外部命令检出名为
    <filename>phpdoc</filename> 的目录中的 PHP 手册英文版本： 
    <informalexample>
     <programlisting>
$ svn checkout http://svn.php.net/repository/phpdoc/modules/doc-en phpdoc
     </programlisting>
    </informalexample>
   </para>
  </sect1>

  <sect1 xml:id="svn-checkout">
   <title>检出 SVN 模块</title>

   <para>
    现在，首先要检出 <parameter>phpdoc</parameter> 模块。顺便提一句，模块就是源目录和文件的集合。通常来说就是
    SVN 资源库里的目录树。
   </para>

   <para>
    <command>cd</command> 到一个用来存储 <literal>phpdoc</literal> 目录树的目录下。决定放在哪，<literal>phpdoc</literal>
    就会创建在哪。执行下列命令：
    <informalexample>
     <programlisting>
$ svn checkout http://svn.php.net/repository/phpdoc/modules/doc-en phpdoc
     </programlisting>
    </informalexample>
   </para>
   
   <!-- FIXME: This topic deserves better information. Also, talk about trunk and sparse checkouts. Somewhere. -->
   <note>
    <title>名为 phpdoc 的目录</title>
    <para>
     上面的命令会创建名为 phpdoc 的目录，然而，也可以是你想要的其他名称。<filename>phpdoc/modules/doc-en</filename>
     是 SVN 的外部路径，本质上是同时检出英文源文件，和 <filename>doc-base</filename> 
     中的相关工具。然后，命令的最后一段（<filename>phpdoc</filename>）是硬盘驱动器上的本地目录名。
    </para>
    <para>
     前面提到的目录 <filename>phpdoc</filename> 很简单，SVN 外部路径也很简单。实际上从 SVN 检出了
     <filename>en/trunk/</filename>，就象是分支或标签一样，并简单地更名为 <filename>en/</filename>。
    </para>
   </note>

   <para>
    在显示出关于所检出文件目录的一些状态信息后，你就得到了 <literal>phpdoc</literal>
    模块的完整工作副本。因为此模块包含许多小文件，所以要准备很长时间来等待检出完成。
   </para>

   <note>
    <para>
     不能随意决定 <filename>phpdoc</filename> 目录的存放位置。请查阅 
     <link linkend="chapter-tools">工具及设置说明</link> 章节以获取有关系统中的
     <filename>phpdoc</filename> 目录是否受限的明确信息。
    </para>
   </note>
   
   <para>
    如果要加入翻译组，检出的源文件会有点不同。而且，使用的 SVN 的外部路径也简单地由
    phpdoc-en 变为 phpdoc-{langcode}，其中 {langcode}
    为想要的语言。这此翻译内容中也包括了英文内容，所以不需要分别进行检出。比如，要获取中文：
    <informalexample>
     <programlisting>
$ svn checkout http://svn.php.net/repository/phpdoc/modules/doc-zh phpdoc-zh
     </programlisting>
    </informalexample>
   </para>
   <para>
    也可将“zh”部分替换为其它的语言代码。可下载任意多种翻译内容，但没有必要下载不打算参与的翻译内容。如只进行英文文档工作，则无需下载任何翻译模块。
   </para>
   <note>
    <title>注意：巴西葡萄牙语</title>
    <para>
    该翻译模块名称的格式与其它的不同，为 <literal>pt_BR</literal>。
    </para>
   </note>
   <para>
    也可以检出整个文档构建基础结构和所有语言模块。可使用：
    <informalexample>
     <programlisting>
$ svn checkout http://svn.php.net/repository/phpdoc/modules/doc-all phpdoc-all
     </programlisting>
    </informalexample>
    运行此命令后就可在 phpdoc-all 文件夹中找到所有这些内容。
   </para>
   <!-- TODO: Mention sparse checkouts, branches and tagging. -->
  </sect1>

  <sect1 xml:id="svn-update">
   <title>更新目录树</title> 

   <para>
    最好经常更新 <filename>phpdoc</filename>
    目录树副本以保证总是拥有最新的副本。当前，此目录下的内容每天都有变化，因此应总是在进行编辑工作之前先更新文件。
   </para>

   <para>
    要更新副本内容，应 <command>cd</command> 到 <filename>phpdoc</filename> 目录，并运行下列命令：
    <informalexample>
     <programlisting>
$ svn update
     </programlisting>
    </informalexample>
   </para>
   
   <note>
    <para>
     如果也检出了翻译模块，那么用以上命令也会进行更新。因此没有必要单独更新所检出的翻译模块。
    </para>
   </note>

   <para>
    如果仅希望更新特定的某个文件或某几个要更新的文件，可以在 update 命令后加入其文件名：
    <informalexample>
     <programlisting>
$ svn update file1 file2
     </programlisting>
    </informalexample>
   </para>

   <para>
    如果文件不在 <filename>phpdoc</filename> 的顶层目录下，可使用文件的相对路径：
    <informalexample>
     <programlisting>
$ svn update en/language/file1 en/chapters/file2
     </programlisting>
    </informalexample>
   </para>

  </sect1>

  <sect1 xml:id="svn-status">
   <title>检查文件状态</title>

   <para>
    如果已经多次修改了 <literal>phpdoc</literal> 的本地副本中的内容，并想看看修改了哪些文件，可用
    <command>svn</command> 来查看文件的当前状态。
   </para>

   <para>
   要获取当前目录下所有文件的状态，可运行以下命令：
    <informalexample>
     <programlisting>
$ svn status
     </programlisting>
    </informalexample>
   </para>

   <para>
    这会生成一个列表，包括修改过的文件、还未检入 SVN 的新文件等等。要取得单个文件（或目录）的状态也很简单：
    <informalexample>
     <programlisting>
$ svn status file1 file2
     </programlisting>
    </informalexample>
   </para>

   <para>
    <example>
     <title><command>svn status</command> 举例</title>
     <screen>
$ svn status -v phpdoc/howto/howto.xml

M           289871   289871 philip       howto/vcs.xml
     </screen>
    </example>
   </para>

  </sect1>

  <sect1 xml:id="svn-commit">
   <title>提交更新</title> 

   <para>
    一旦完成对一个文件的修改并<emphasis>验证过 XML 文件</emphasis>，就已准备好向 SVN 资源库提交更新了。
   </para>

   <para>
    在向资源库提交一个或多个文件时，为更新内容提供一个简短的信息是最基本的礼貌。无需写明所有更新细节，这部分工作应交给
    SVN。不过，这可以帮助他人无需查看文件本身就可通过简短的摘要信息知道在两个版本之间作了哪些修改。
   </para>

   <para>
    要提交一个文件，运行下列命令：
    <informalexample>
     <programlisting>
$ svn commit -m 'added explanation of the new ..blah.. feature' file1 file2
     </programlisting>
    </informalexample>
   </para>
   
   <para>
    有时省略 <parameter>-m</parameter> 参数会更方便一些，因为这样 SVN 会打开一个文本编辑器用来输入注释。如想要添加更多的注释而不能用
    <parameter>-m</parameter> 参数写在一行里时，就选择这种方式。
   </para>
   <!-- TODO: talk about SVN_EDITOR -->
   <!-- TODO: talk about bug tracker conventions in commit emails -->

   <para>
    要了解更多用于所提交的 XML 文件的惯例，参见 <xref linkend="chapter-conventions" />。
   </para>
   
   <note>
    <para>
     请再三检查要提交变更文件中的用语。<filename>phpdoc</filename>
     模块本身仅包含英文文件，因此不要提交其它语言的文件，除非有人在<link
     linkend="chapter-maillist">邮件列表</link>中表示同意。翻译模块不应包含纯英文的 XML
     文件，因为这使得翻译的维护工作更困难，所以不要提交任何纯英文的文件到翻译模块的目录树中。如果不能确认提交不会出错，请向适当的<link
     linkend="chapter-maillist">邮件列表</link>询问。
    </para>
   </note>
  </sect1>

  <sect1 xml:id="svn-add">
   <title>添加文件或目录</title> 

   <para>
    有时需要添加文件到英文版文件中（如添加新的附录），这也是翻译工作的开始（新增翻译后的文件）。要添加一个文件，需要先把那个文件放在所希望的正确的位置上。
   </para>

   <para>
    要添加一个文件，运行下列命令：
    <informalexample>
     <programlisting>
$ svn add file1 file2
     </programlisting>
    </informalexample>
   </para>
   
   <para>
    这仅仅是文件添加的计划。要完成文件的添加，需要做一次提交，就象上面所描述的那样。
   </para>
   
   <warning>
    <para>
     在添加新文件之前，在给新文件命名时应注意因为自动文件名 -&gt; 实体名转换而带来的一些限制。
    </para>
   </warning>
  </sect1>

  <sect1 xml:id="svn-remove">
   <title>删除文件</title> 

   <para>
    有时需要从资源库中删除文件。SVN 保存了文件的全部历史，所以删除不是一个无法还原的步骤。虽然如此，删除文件时也要十分慎重。因为文件也许在构建过程中需要，或者可能存有对其他人来说很重要的信息。
   </para>

   <para>
    要删除文件，首先要从 SVN 模块的本地副本中删除此文件，运行下列命令：
    <informalexample>
     <programlisting>
$ svn remove file1 file2
     </programlisting>
    </informalexample>
   </para>
   
   <para>
    这仅仅是文件删除的计划。要完成文件的删除，需要做一次提交，就象上面所描述的那样。
   </para>
   
   <!-- TODO: Add info about rename -->
   <!-- TODO: Removing files is rarely recommended, as it loses history. Mention this. Also think about how this differs from CVS Attic -->
   
  </sect1>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"howto.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
