<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.1 $ -->
<!-- $AUTHOR$ -->
<!-- EN_Revision: 1.0 Maintainer: Gregory Status: ready -->

 <chapter id="chapter-makefile">
  <title>关于 Makefile 文件</title>

  <para>
   为 PHP 文档所作的贡献中，一个很重要的部分，是我们能够在使您的更改生效后，以各种格式查看文
   档输出的结果，包括 HTML、Adobe PDF、RTF 以及其它格式。
  </para>

  <para>
   <filename>Makefile</filename> 文件控制着文档生成和生效的几个重要方面。要从一个新的 
   checkout 模块中生成 <filename>Makefile</filename> 文件，请用 <command>cd</command> 
   命令切换到 <filename>phpdoc</filename> 的目录并执行一下命令：
   <informalexample>
    <programlisting>
$ autoconf

$ ./configure
    </programlisting>
   </informalexample>
   该命令将生成您的 <emphasis>phpdoc</emphasis> 目录树的当前 <filename>Makefile
   </filename> 文件。
  </para>
  
  <note>
   <para>
    如果您使用的是 Windows 操作系统，您需要 Cygwin 的 bash 外壳来执行这些命令。
   </para>
  </note>
  
  <para>
   在设置项中，您可能需要用到两个重要的参数。一个是 <literal>--with-dsssl</literal>。使用
   该参数，您可以指明 DSSSL 样式表单的路径。系统将会搜索很多（15个以上）目录查找 DSSSL，因此
   您不必太在意这个参数。同时。您可以用 <literal>--with-lang</literal> 参数来指明手册使用
   的语言，其默认值是“en”。以下是使用该参数的一个范例：
   <informalexample>
    <programlisting>
$ ./configure --with-lang=nl
    </programlisting>
   </informalexample>
   另外还有很多其它的参数，其中比较重要的，是 <literal>--with-xsl</literal> 参数，可以用
   来指明 XSL 样式表单的路径，以及 <literal>--with-zendapi</literal> 参数，可以指明 
   ZEND API 文档的路径。
  </para>
  
 </chapter>

 <chapter id="chapter-validating">
  <title>使更改生效</title>

  <para>
   现在，您已经有 Makefile 文件了，您能够用以下命令使得您先前对文档所作的更新生效。
   <informalexample>
    <programlisting>
$ cd phpdoc
$ make test
    </programlisting>
   </informalexample>
  </para>

  <para>
   该操作将会类似如下的输出：
  </para>
  <para>
   <screen>
touch .manual.xml
CONFIG_FILES=manual.xml CONFIG_HEADERS= ./config.status
creating manual.xml
nsgmls -i lang-en -s ./phpdocxml.dcl manual.xml
   </screen>
  </para>

  <para>
   如果在文档中，您犯了一些语法错误，例如忘了写反标记符，或者使用了非法的标记名，<command>
   make test</command> 命令将报告这些错误，并给出找到错误的行号。
  </para>
  <para>
    <screen>
touch .manual.xml
CONFIG_FILES=manual.xml CONFIG_HEADERS= ./config.status
creating manual.xml
nsgmls -i lang-en -s ./phpdocxml.dcl manual.xml
nsgmls:en/functions/strings.xml:54:13:E: end tag for "para" omitted, but OMITTAG NO was specified
make: *** [test] Error 1
   </screen>
  </para>
  <para>
   在以上输出的范例中，文档分析器认为在文件 <filename>en/functions/strings.xml</filename>
   中的 54 行应该有一个和标记 &lt;para&gt; 对应的结束符。利用该信息，您就能够回到文件中，更
   正错误，然后再提交您所作的更新。
  </para>
  
  <para>
   在正式提交前进行测试是非常重要的，因为如果您提交了包含有错误的文件，这一个文件将导致整个自
   动生成的处理过程中断，手册的文件和下载版本也不会在线更新。这或许会给 phpdoc 的其它工作人员
   带来不必要的麻烦。
  </para>
 </chapter>

 <chapter id="chapter-viewing">
  <title>查看您的更新</title>

  <para>
   在生成可阅读的文档时，有几个样式表是可用的，其中最有用的应该是：
   <itemizedlist>
    <listitem>
     <para>
      <literal>html</literal>，普通 HTML 版本，请查看 <ulink
      url="&url.php.manual.plain;">&url.php.manual.plain;</ulink>
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>bightml</literal>，单个大型 HTML 版本， 该版本仅在以下地址提供下载：<ulink
      url="&url.php.docdownload;">&url.php.docdownload;</ulink>
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>phpweb</literal>，PHP 在线手册版本，请查看 <ulink
      url="&url.php.manual;">&url.php.manual;</ulink>
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>pdf</literal>，PDF 版本的手册，请查看 <ulink
      url="&url.php.manual.pdf;">&url.php.manual.pdf;</ulink>
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>rtf</literal>，RTF (Rich Text Format) 格式的版本，
      目前尚未在线发布。
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>howto</literal>，即本指引文档的普通 HTML 版本，请查看 
      <ulink url="&url.php.howto;">&url.php.howto;</ulink>
     </para>
    </listitem>
   </itemizedlist>
  </para>

  <para>
   要生成可阅读版本的文档，请用 <command>cd</command> 命令切换到 <filename>phpdoc
   </filename> 目录，并运行以下命令中的对应项：
   <informalexample>
    <programlisting>
$ make html
$ make bightml
$ make phpweb
$ make pdf
$ make rtf
    </programlisting>
   </informalexample>
   要生成本指引（HOWTO）文档：
   <informalexample>
    <programlisting>
$ make howto
    </programlisting>
   </informalexample>
   用 lynx 过滤 <literal>bightml</literal> 格式，即可得到 PHP 文档纯文本格式的版本。
  </para>

  <note>
   <para>
    可阅读版本的文档的生成，是一个很占用 CPU 的过程，这个过程将花费较长的一段时间。比如，在 
    7000MHz 主频的机器上，生成普通 HTML 格式的手册需要大概 7 分 30 秒。
   </para>
  </note>

  <para>
   输出文件存放的位置取决于您生成的格式。 HTML 手册将被生成到  <literal>phpdoc</literal> 
   目录的 <filename>html</filename> 子目录下，同理 <literal>make phpweb</literal> 
   命令将把文件存放到 <filename>php</filename> 目录中。指引文档（HOWTO）的 HTML 文件将
   被存放到 <filename>howto/html</filename> 目录下。
  </para>
  
  <para>
   如果一切都进行的很顺利，您将得到一份包括您所作的更新的 PHP 文档。
  </para>

 </chapter>

 <chapter id="chapter-using-xsl">
  <title>使用 XSL 样式表单</title>

  <para>
   目前系统对利用 XML 样式表单来生成 XML 文件的输出格式的支持，不如利用 DSSSL 样式表单的支
   持。这是因为 XSL 样式表单不像 DSSSL 的那样可以灵活定制，而且 XSL 的工具尚未标准化，因此
   没有被广泛的使用。
  </para>
  
  <para>
   目前，在 <filename>Makefile</filename> 文件中对 XSL 尚无明确的指示。这是因为目前还没
   有标准化的方法来调用 XSLT 处理器。如果需要使用 XSL 样式表单，您必须运行  <filename>
   configure</filename> 脚本并提供您 XSL DocBook 样式表单存放的位置。大部分的 XSLT 处理
   器都使用 URL 而非文件名，所以请务必在路径前加上 <literal>file:///</literal> 标记：
   <informalexample>
    <programlisting>
$ autoconf
$ ./configure --with-xsl=file:///path/to/docbook/xsl/styles
    </programlisting>
   </informalexample>
  </para>
  
  <para>
   Configure 脚本将从其它文件中生成四个文件：
   <filename>html.xsl</filename>，
   <filename>bightml.xsl</filename>，
   <filename>htmlhelp.xsl</filename>，
   <filename>print.xsl</filename>。这些文件可以被用来生成需要的输出格式。
   <filename>html.xsl</filename> 将生成一系列小的 HTML 文档，<filename>bightml.xsl
   </filename> 将生成单个大型的 HTML 文档，<filename>htmlhelp.xsl</filename> 文件将
   生成能够被 HTML Help Workshop 处理的源文件，而 <filename>print.xsl</filename> 将
   生成具有 FO 对象的文档，以便可以被某些 FO 处理器进行进一步的处理。
  </para>
  
  <para>
   XSLT 处理器的调用因处理器不同而不同。我们现在假设您已经有称为 <filename>saxon</filename> 
   的外壳脚本，它能够调用 Saxon 处理器，请看以下的范例：
   <informalexample>
    <programlisting>
$ mkdir html
$ saxon manual.xml html.xsl
$ saxon manual.xml htmlhelp.xsl
$ saxon -o bigmanual.html manual.xml bightml.xsl
$ saxon -o manual.fo manual.xml print.xsl
    </programlisting>
   </informalexample>
   根据以上所描述的，您可以使用对应的命令来输出需要的格式。如果您希望输出 HTML 帮助格式，您
   需要在处理完成后运行微软超文本帮助编译器。要利用 FO 文档 获取 PDF 格式，您需要运行某个 FO 
   处理器来调用 <filename>manual.fo</filename> 文件。
  </para>
  
  <note>
   <para>
    在赛扬 400 的机器上利用 Saxon（基于 JDK 1.3）生成 <filename>bigmanual.html</filename> 
    文件需要大概两分钟时间。生成 FO 文档需要大概两倍于此地时间，不包括运行 FO 处理器需要的时
    间。生成单个大型的 HTML 版本或者 HTML 帮助版本需要大概 60 分钟的时间。
   </para>
  </note>
  
  <note>
   <para>
    XSL 并非支持 DSSSL 所有的设定，因此利用 XSL 输出的某些方面会不如<emphasis>目前
    </emphasis> DSSSL 的输出。
   </para>
  </note>
 </chapter>

 <chapter id="chapter-online-generation">
  <title>在线生成系统</title>

  <para>
   PHP 文档的在线生成系统运行在 <ulink url="&url.php.rsync;">&url.php.rsync;</ulink>。
  </para>
  <para>
   该系统利用某语言版本目录下的 <filename>language-defs.ent</filename> 文件，可以生成
   任何语言的 PHP 手册。尽管如此，在 <ulink url="&url.php.docs;">&url.php.docs;</ulink> 
   和 <ulink url="&url.php.docdownload;">&url.php.docdownload;</ulink> 的语言列表
   是静态的，因此只有手动添加过的语言才会被显示在该列表中。
  </para>
  <para>
   该在线生成系统仅生成一份新的在线手册以及某个语言新的可下载文档，如果这些更新是在一天的时间
   内完成的。对于一种语言，生成的过程也需要花费好几个小时，因此并非所有语言的版本的生成工作能
   够在一天内完成。在生成过程中系统会自动保存 <filename>build.log</filename> 文件，该文
   件包含生成过程的详细信息。关于 <filename>build.log</filename> 文件的详细内容，请查阅
   <link linkend="translation-practical">翻译者必读</link>一节。在生成过程中发生的错误
   也将被记录在该文件中。
  </para>
  <para>
   该自动生成过程将更新在线手册以及所有可下载的文档，但不包含 CHM 版本。CHM 版本也是每日更新，
   但由于其编译器仅能在 Microsoft Windows 平台下工作，因此该工作是在另外一台独立的 Windows 
   主机上完成的。
  </para>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"howto.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

