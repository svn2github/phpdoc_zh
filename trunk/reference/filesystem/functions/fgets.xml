<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 304534 Maintainer: HonestQiao Status: ready -->
<!-- Reviewed: no Maintainer: HonestQiao -->
<refentry xml:id="function.fgets" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>fgets</refname>
  <refpurpose>从文件指针中读取一行</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>fgets</methodname>
   <methodparam><type>int</type><parameter>handle</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>length</parameter></methodparam>
  </methodsynopsis>
  <para>
   从 <parameter>handle</parameter>
   指向的文件中读取一行并返回长度最多为 <parameter>length</parameter> - 1
   字节的字符串。碰到换行符（包括在返回值中）、EOF 或者已经读取了 length - 1
   字节后停止（看先碰到那一种情况）。如果没有指定
   <parameter>length</parameter>，则默认为 1K，或者说 1024 字节。
  </para>
  <para>
   出错时返回 &false;。
  </para>
  <para>
   通常的缺陷：
  </para>
  <simpara>
   习惯了 C 语言中 <function>fgets</function> 语法的人应该注意到 <literal>EOF</literal>
   是怎样被返回的。
  </simpara>
  &fs.validfp.all;
  <para>
   以下是一个简单例子：
   <example>
    <title>逐行读取文件</title>
    <programlisting role="php">
<![CDATA[
<?php
$handle = @fopen("/tmp/inputfile.txt", "r");
if ($handle) {
    while (!feof($handle)) {
        $buffer = fgets($handle, 4096);
        echo $buffer;
    }
    fclose($handle);
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <note>
   <simpara>
    <parameter>length</parameter> 参数从 PHP 4.2.0
    起成为可选项，如果忽略，则行的长度被假定为 1024。从 PHP 4.3 开始，忽略掉
    <parameter>length</parameter> 将继续从流中读取数据直到行结束。如果文件中的大多数行都大于
    8KB，则在脚本中指定最大行的长度在利用资源上更为有效。
   </simpara>
  </note>
  <note>
   <simpara>
    从 PHP 4.3 开始本函数可以安全用于二进制文件。早期的版本则不行。
   </simpara>
  </note>
  &note.line-endings;
  <para>
   参见 <function>fgetss</function>，<function>fread</function>，<function>fgetc</function>，<function>stream_get_line</function>，<function>fopen</function>，<function>popen</function>，<function>fsockopen</function>
   和 <function>stream_set_timeout</function>。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>handle</parameter></term>
     <listitem>
      &fs.validfp.all;
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>length</parameter></term>
     <listitem>
      <para>
       Reading ends when <parameter>length</parameter> - 1 bytes have been
       read, on a newline (which is included in the return value), or on EOF
       (whichever comes first). If no length is specified, it will keep
       reading from the stream until it reaches the end of the line.
      </para>
      <note>
       <para>
        Until PHP 4.3.0, omitting it would assume 1024 as the line length.
        If the majority of the lines in the file are all larger than 8KB,
        it is more resource efficient for your script to specify the maximum
        line length.
       </para>
      </note>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns a string of up to <parameter>length</parameter> - 1 bytes read from
   the file pointed to by <parameter>handle</parameter>. If there is no more data 
   to read in the file pointer, then &false; is returned.
  </para>
  <para>
   If an error occurs, &false; is returned.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>4.3.0</entry>
       <entry>
        <function>fgets</function> is now binary safe
       </entry>
      </row>
      <row>
       <entry>4.2.0</entry>
       <entry>
        The <parameter>length</parameter> parameter became optional
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Reading a file line by line</title>
    <programlisting role="php">
<![CDATA[
<?php
$handle = @fopen("/tmp/inputfile.txt", "r");
if ($handle) {
    while (($buffer = fgets($handle, 4096)) !== false) {
        echo $buffer;
    }
    if (!feof($handle)) {
        echo "Error: unexpected fgets() fail\n";
    }
    fclose($handle);
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.line-endings;
  <note>
   <para>
    People used to the 'C' semantics of <function>fgets</function>
    should note the difference in how <literal>EOF</literal> is returned.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>fgetss</function></member>
    <member><function>fread</function></member>
    <member><function>fgetc</function></member>
    <member><function>stream_get_line</function></member>
    <member><function>fopen</function></member>
    <member><function>popen</function></member>
    <member><function>fsockopen</function></member>
    <member><function>stream_set_timeout</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
