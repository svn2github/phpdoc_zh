<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- $Author$ -->
<!-- EN-Revision: n/a Maintainer: dallas Status: ready -->
<refentry xml:id="function.file-put-contents" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>file_put_contents</refname>
  <refpurpose>将一个字符串写入文件</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
   <methodsynopsis>
    <type>int</type><methodname>file_put_contents</methodname>
    <methodparam><type>string</type><parameter>filename</parameter></methodparam>
    <methodparam><type>string</type><parameter>data</parameter></methodparam>
    <methodparam choice="opt"><type>int</type><parameter>flags</parameter></methodparam>
    <methodparam choice="opt"><type>resource</type><parameter>context</parameter></methodparam>
   </methodsynopsis>
  <simpara>
   和依次调用 <function>fopen</function>，<function>fwrite</function>
   以及 <function>fclose</function> 功能一样。
  </simpara>
  <para>
   参数 <parameter>data</parameter> 可以是数组（但不能为多维数组），这就相当于
   <literal>file_put_contents($filename, join('', $array))</literal>
  </para>
  <para>
   自 PHP 5.1.0 起，<parameter>data</parameter>
   参数也可以被指定为 stream 资源，这里 stream
   中所保存的缓存数据将被写入到指定文件中，这种用法就相似于使用
   <function>stream_copy_to_stream</function> 函数。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>filename</parameter></term>
     <listitem>
      <para>
       要被写入数据的文件名。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>data</parameter></term>
     <listitem>
      <para>
       要写入的数据。类型可以是 <type>string</type>，<type>array</type>
       或者是 <type>stream</type> 资源（如上面所说的那样）。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       <parameter>flags</parameter> 可以是
       <constant>FILE_USE_INCLUDE_PATH</constant>，<constant>FILE_APPEND</constant>
       和／或 <constant>LOCK_EX</constant>（获得一个独占锁定），然而使用
       <constant>FILE_USE_INCLUDE_PATH</constant> 时要特别谨慎。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>context</parameter></term>
     <listitem>
      <para>
       一个 context 资源。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   该函数将返回写入到文件内数据的字节数。
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.1.0</entry>
       <entry>
        添加了对 <constant>LOCK_EX</constant> 的支持和 <parameter>data</parameter>
        参数处理 stream 资源的功能。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.bin-safe;
  &note.context-support;
  &tip.fopen-wrapper;
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>fopen</function></member>
    <member><function>fwrite</function></member>
    <member><function>file_get_contents</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
