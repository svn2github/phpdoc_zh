<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- $Author$ -->
<!-- EN-Revision: n/a Maintainer: nio Status: ready -->
<!-- splitted from ./en/functions/var.xml, last change in rev 1.2 -->
  <refentry xml:id="function.unserialize" xmlns="http://docbook.org/ns/docbook">
   <refnamediv>
    <refname>unserialize</refname>
    <refpurpose>
     从已存储的表示中创建 PHP 的值
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>描述</title>
     <methodsynopsis>
      <type>mixed</type><methodname>unserialize</methodname>
      <methodparam><type>string</type><parameter>str</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>callback</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     <function>unserialize</function> 对单一的已序列化的变量进行操作，将其转换回 
     PHP 的值。返回的是转换之后的值，可为 
     <type>integer</type>、<type>float</type>、<type>string</type>、<type>array</type>
     或 <type>object</type>。如果传递的字符串不可解序列化，则返回 &false;。
    </simpara>
    <note>
     <title>unserialize_callback_func 指令</title>
     <para>
      如果在解序列化的时候需要实例化一个未定义类，则可以设置回调函数以供调用（以免得到的是不完整的
      <type>object</type> “__PHP_Incomplete_Class”）。可通过
      &php.ini;、<function>ini_set</function> 或 &htaccess; 
      定义‘unserialize_callback_func’。每次实例化一个未定义类时它都会被调用。若要禁止这个特性，只需置空此设定。还需要注意的是
      unserialize_callback_func 指令是从 PHP 4.2.0 开始提供使用的。
     </para>
    </note>
    <note>
     <para>
     <parameter>callback</parameter> 参数是在 PHP 4.2.0 中添加的
     </para>
    </note>
    <para>
     若被解序列化的变量是一个对象，在成功地重新构造对象之后，PHP
     会自动地试图去调用 <function>__wakeup</function>
     成员函数（如果存在的话）。 
     <example>
      <title>unserialize_callback_func 示例</title>
      <programlisting role="php">
<![CDATA[
<?php
$serialized_object='O:1:"a":1:{s:5:"value";s:3:"100";}';

// unserialize_callback_func 从 PHP 4.2.0 起可用
ini_set('unserialize_callback_func','mycallback'); // 设置您的回调函数

function mycallback($classname) {
    // 只需包含含有类定义的文件
    // $classname 指出需要的是哪一个类
}
?>
]]>
      </programlisting>
     </example>
    </para>
    <note>
     <para>
      在 PHP 3 中，解序列化一个对象时是不保存方法的。而
      PHP 4 打破了这个限制，同时保存了属性和方法。请参见<link 
     linkend="language.oop5">类与对象</link>中的<link 
     linkend="language.oop5.serialization">序列化对象</link>部分获取更多信息。
     </para>
    </note>
    <para>
     <example>
      <title><function>unserialize</function> 示例</title>
      <programlisting role="php">
<![CDATA[
<?php
// 这里，我们使用 unserialize() 装载来自数据库的 $session_data 数组中的会话数据。
// 此例是描述 serialize() 的那个例子的补充。

$conn = odbc_connect ("webdb", "php", "chicken");
$stmt = odbc_prepare ($conn, "SELECT data FROM sessions WHERE id = ?");
$sqldata = array ($PHP_AUTH_USER);
if (!odbc_execute ($stmt, &$sqldata) || !odbc_fetch_into ($stmt, &$tmp)) {
    // 如果执行出错或返回错误，则初始化为空数组
    $session_data = array();
} else {
    // 现在我们需要的是 $tmp[0] 中已序列化的数据。
    $session_data = unserialize ($tmp[0]);
    if (!is_array ($session_data)) {
        // 出错，初始化为空数组
        $session_data = array();
    }
}
?>
]]>
      </programlisting>
     </example>
    </para>
   <para>
    参见 <function>serialize</function>。
   </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
