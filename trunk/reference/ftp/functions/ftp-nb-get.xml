<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
<!-- $Author: avenger $ -->
<!-- EN-Revision: 1.3 Maintainer: Avenger Status: ready -->
  <refentry id="function.ftp-nb-get">
   <refnamediv>
    <refname>ftp_nb_get</refname>
    <refpurpose>重新得到一个 FTP 服务器上的文件并写入本地文件 (non-blocking)</refpurpose>
   </refnamediv>
   <refsect1>
    <title>描述</title>
     <methodsynopsis>
      <type>bool</type><methodname>ftp_nb_get</methodname>
      <methodparam><type>resource</type><parameter>ftp_stream</parameter></methodparam>
      <methodparam><type>string</type><parameter>local_file</parameter></methodparam>
      <methodparam><type>string</type><parameter>remote_file</parameter></methodparam>
      <methodparam><type>int</type><parameter>mode</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>resumepos</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>ftp_nb_get</function> 函数用来重新得到参数 <parameter>remote_file</parameter>
     指定的的远程文件，并保存到由参数 <parameter>local_file</parameter>
     指定的本地文件。传输模式参数
     <parameter>mode</parameter> 只能为 <constant>FTP_ASCII</constant> (文本模式) 或 <constant>FTP_BINARY</constant>
     (二进制模式) 两种。与 <function>ftp_get</function>     函数不同的是，此函数上传文件的时候采用的是异步传输模式，也就意味着在文件传送的过程中，你的程序可以继续干其它的事情。
    </para>
    <para>
     &return.success;
    </para>
    <para>
     <example>
      <title><function>ftp_nb_get</function> 实例</title>
      <programlisting role="php">
<![CDATA[
// 开始下载
$ret = ftp_nb_get($my_connection, "test", "README", FTP_BINARY);
while ($ret == FTP_MOREDATA) {
   
   // 这里可以插入其它代码
   echo ".";

   // 继续下载...
   $ret = ftp_nb_continue ($my_connection);
}
if ($ret != FTP_FINISHED) {
   echo "下载中出错...";
   exit(1);
}
]]>
      </programlisting>
     </example>
     <example>
      <title>使用 <function>ftp_nb_get</function> 函数恢复下载文件</title>
      <programlisting role="php">
<![CDATA[
// 开始
$ret = ftp_nb_get ($my_connection, "test", "README", FTP_BINARY, 
                      filesize("test"));
// 或: $ret = ftp_nb_get ($my_connection, "test", "README", 
//                           FTP_BINARY, FTP_AUTORESUME);
while ($ret == FTP_MOREDATA) {
   
   // 可以插入其它代码
   echo ".";

   // 继续传送...
   $ret = ftp_nb_continue ($my_connection);
}
if ($ret != FTP_FINISHED) {
   echo "下载出错...";
   exit(1);
}
]]>
      </programlisting>
     </example>
     <example>
      <title>
       Resuming a download at position 100 to a new
       file with <function>ftp_nb_get</function>
      </title>
      <programlisting role="php">
<![CDATA[
// 禁止自动搜寻
ftp_set_option ($my_connection, FTP_AUTOSEEK, FALSE);

// 开始
$ret = ftp_nb_get ($my_connection, "newfile", "README", FTP_BINARY, 100);
while ($ret == FTP_MOREDATA) {

   ...
   
   // 继续下载...
   $ret = ftp_nb_continue ($my_connection);
}
]]>
      </programlisting>
     </example>
    </para>
    <para>
     在上边的例子中，<filename>"newfile"</filename> 文件比服务器上的文件
     <filename>"README"</filename> 要小 100 字节。这是因为我们是从文件的偏移量 100
     处开始读取的，如果我们把参数 <constant>FTP_AUTOSEEK</constant> 禁止掉，则新文件的前 100
     字节将会是 <literal>'\0'</literal>。
    </para>
    <para>
     参考函数 <function>ftp_nb_fget</function>, 
     <function>ftp_nb_continue</function>,
     <function>ftp_get</function> and <function>ftp_fget</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
