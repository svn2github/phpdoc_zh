<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 329574 Maintainer: anonymous #27375 Status: ready -->
<!-- Reviewed: no -->

<!-- Generated by xml_proto.php v2.1. Found in /scripts directory of phpdoc. -->
<appendix xml:id="pdo.constants" xmlns="http://docbook.org/ns/docbook">
 &reftitle.constants;
 &extension.constants;
 <warning>
  <para>
   自 PHP 5.1 起，开始使用类常量。以前的版本使用类似 <constant>PDO_PARAM_BOOL</constant> 这样的全局常量。
  </para>
 </warning>
 <variablelist>
  <varlistentry xml:id="pdo.constants.param-bool">
   <term>
    <constant>PDO::PARAM_BOOL</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
    表示布尔数据类型。
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="pdo.constants.param-null">
   <term>
    <constant>PDO::PARAM_NULL</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
    表示 SQL 中的 NULL 数据类型。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-int">
   <term>
    <constant>PDO::PARAM_INT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
      表示 SQL 中的整型。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-str">
   <term>
    <constant>PDO::PARAM_STR</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     表示 SQL 中的 CHAR、VARCHAR 或其他字符串类型。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-lob">
   <term>
    <constant>PDO::PARAM_LOB</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     表示 SQL 中大对象数据类型。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-stmt">
   <term>
    <constant>PDO::PARAM_STMT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
      表示一个记录集类型。当前尚未被任何驱动支持。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-input-output">
   <term>
    <constant>PDO::PARAM_INPUT_OUTPUT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the parameter is an INOUT parameter for a stored
     procedure. You must bitwise-OR this value with an explicit
     PDO::PARAM_* data type.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-lazy">
   <term>
    <constant>PDO::FETCH_LAZY</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall return each row as an object with
     variable names that correspond to the column names returned in the result
     set. <constant>PDO::FETCH_LAZY</constant> creates the object variable names as they are accessed.
     Not valid inside <function>PDOStatement::fetchAll</function>.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-assoc">
   <term>
    <constant>PDO::FETCH_ASSOC</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall return each row as an array indexed
     by column name as returned in the corresponding result set. If the result
     set contains multiple columns with the same name,
     <constant>PDO::FETCH_ASSOC</constant> returns
     only a single value per column name.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-named">
   <term>
    <constant>PDO::FETCH_NAMED</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall return each row as an array indexed
     by column name as returned in the corresponding result set. If the result
     set contains multiple columns with the same name,
     <constant>PDO::FETCH_NAMED</constant> returns
     an array of values per column name.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-num">
   <term>
    <constant>PDO::FETCH_NUM</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall return each row as an array indexed
     by column number as returned in the corresponding result set, starting at
     column 0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-both">
   <term>
    <constant>PDO::FETCH_BOTH</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall return each row as an array indexed
     by both column name and number as returned in the corresponding result set,
     starting at column 0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-obj">
   <term>
    <constant>PDO::FETCH_OBJ</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall return each row as an object with
     property names that correspond to the column names returned in the result
     set.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-bound">
   <term>
    <constant>PDO::FETCH_BOUND</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall return TRUE and assign the values of
     the columns in the result set to the PHP variables to which they were
     bound with the <function>PDOStatement::bindParam</function> or
     <function>PDOStatement::bindColumn</function> methods.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-column">
   <term>
    <constant>PDO::FETCH_COLUMN</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall return only a single requested
     column from the next row in the result set.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-class">
   <term>
    <constant>PDO::FETCH_CLASS</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall return a new instance of the
     requested class, mapping the columns to named properties in the class.
    </simpara>
    <note>
     <simpara>
      The magic
      <link linkend="language.oop5.overloading.members"><methodname>__set</methodname></link>
      method is called if the property doesn't exist in the requested class
     </simpara>
    </note>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-into">
   <term>
    <constant>PDO::FETCH_INTO</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall update an existing instance of the
     requested class, mapping the columns to named properties in the class.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-func">
   <term>
    <constant>PDO::FETCH_FUNC</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Allows completely customize the way data is treated on the fly (only 
     valid inside <function>PDOStatement::fetchAll</function>).
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-group">
   <term>
    <constant>PDO::FETCH_GROUP</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Group return by values. Usually combined with
     <constant>PDO::FETCH_COLUMN</constant> or 
     <constant>PDO::FETCH_KEY_PAIR</constant>.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-unique">
   <term>
    <constant>PDO::FETCH_UNIQUE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     只取唯一值。
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="pdo.constants.fetch-key-pair">
   <term>
    <constant>PDO::FETCH_KEY_PAIR</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
      获取一个有两列的结果集到一个数组，其中第一列为键名，第二列为值。自 PHP 5.2.3 起可用。
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="pdo.constants.fetch-classtype">
   <term>
    <constant>PDO::FETCH_CLASSTYPE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     根据第一列的值确定类名。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-serialize">
   <term>
    <constant>PDO::FETCH_SERIALIZE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     类似 <constant>PDO::FETCH_INTO</constant> ，但是以一个序列化的字符串表示对象。自 PHP 5.1.0 起可用。从 PHP 5.3.0 开始，如果设置此标志，则类的构造函数从不会被调用。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-props-late">
   <term>
    <constant>PDO::FETCH_PROPS_LATE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     设置属性前调用构造函数。自 PHP 5.2.0 起可用。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-autocommit">
   <term>
    <constant>PDO::ATTR_AUTOCOMMIT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     如果此值为 &false; ，PDO 将试图禁用自动提交以便数据库连接开始一个事务。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-prefetch">
   <term>
    <constant>PDO::ATTR_PREFETCH</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     设置预取大小来为你的应用平衡速度和内存使用。并非所有的数据库/驱动组合都支持设置预取大小。较大的预取大小导致性能提高的同时也会占用更多的内存。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-timeout">
   <term>
    <constant>PDO::ATTR_TIMEOUT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     设置连接数据库的超时秒数。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-errmode">
   <term>
    <constant>PDO::ATTR_ERRMODE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     关于此属性的更多信息请参见 <link linkend="pdo.error-handling">错误及错误处理</link> 部分。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-server-version">
   <term>
    <constant>PDO::ATTR_SERVER_VERSION</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     此为只读属性；返回 PDO 所连接的数据库服务的版本信息。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-client-version">
   <term>
    <constant>PDO::ATTR_CLIENT_VERSION</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     此为只读属性；返回 PDO 驱动所用客户端库的版本信息。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-server-info">
   <term>
    <constant>PDO::ATTR_SERVER_INFO</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     此为只读属性。返回一些关于 PDO 所连接的数据库服务的元信息。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-connection-status">
   <term>
    <constant>PDO::ATTR_CONNECTION_STATUS</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-case">
   <term>
    <constant>PDO::ATTR_CASE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     用类似 <literal>PDO::CASE_*</literal> 的常量强制列名为指定的大小写。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-cursor-name">
   <term>
    <constant>PDO::ATTR_CURSOR_NAME</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     获取或设置使用游标的名称。当使用可滚动游标和定位更新时候非常有用。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-cursor">
   <term>
    <constant>PDO::ATTR_CURSOR</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Selects the cursor type.  PDO currently supports either
     <constant>PDO::CURSOR_FWDONLY</constant> and 
     <constant>PDO::CURSOR_SCROLL</constant>. Stick with
     <constant>PDO::CURSOR_FWDONLY</constant> unless you know that you need a
     scrollable cursor.
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="pdo.constants.attr-driver-name">
   <term>
    <constant>PDO::ATTR_DRIVER_NAME</constant>
     (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     返回驱动名称。
    </simpara>
    <para>
     <example><title>使用 <constant>PDO::ATTR_DRIVER_NAME</constant> 的例子</title>
     <programlisting role="php">
<![CDATA[
<?php
if ($db->getAttribute(PDO::ATTR_DRIVER_NAME) == 'mysql') {
  echo "Running on mysql; doing something mysql specific here\n";
}
?>
]]>
     </programlisting>
     </example>
     </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="pdo.constants.attr-oracle-nulls">
   <term>
    <constant>PDO::ATTR_ORACLE_NULLS</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     在获取数据时将空字符串转换成 SQL 中的 NULL 。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-persistent">
   <term>
    <constant>PDO::ATTR_PERSISTENT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara> 
    请求一个持久连接，而非创建一个新连接。关于此属性的更多信息请参见 <link linkend="pdo.connections">连接与连接管理</link> 。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-statement-class">
   <term>
    <constant>PDO::ATTR_STATEMENT_CLASS</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara> 

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-fetch-catalog-names">
   <term>
    <constant>PDO::ATTR_FETCH_CATALOG_NAMES</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara> 
     Prepend the containing catalog name to each column name returned in the
     result set. The catalog name and column name are separated by a decimal
     (.) character.  Support of this attribute is at the driver level; it may
     not be supported by your driver.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-fetch-table-names">
   <term>
    <constant>PDO::ATTR_FETCH_TABLE_NAMES</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara> 
     Prepend the containing table name to each column name returned in the
     result set. The table name and column name are separated by a decimal (.)
     character. Support of this attribute is at the driver level; it may not
     be supported by your driver.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-stringify-fetches">
   <term>
    <constant>PDO::ATTR_STRINGIFY_FETCHES</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara> 

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-max-column-len">
   <term>
    <constant>PDO::ATTR_MAX_COLUMN_LEN</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara> 

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-default-fetch-mode">
   <term>
    <constant>PDO::ATTR_DEFAULT_FETCH_MODE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara> 
     自 PHP 5.2.0 起可用。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-emulate-prepares">
   <term>
    <constant>PDO::ATTR_EMULATE_PREPARES</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
    自 PHP 5.1.3 起可用。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.errmode-silent">
   <term>
    <constant>PDO::ERRMODE_SILENT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     如果发生错误，则不显示错误或异常。希望开发人员显式地检查错误。此为默认模式。关于此属性的更多信息请参见 <link linkend="pdo.error-handling">错误与错误处理</link> 。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.errmode-warning">
   <term>
    <constant>PDO::ERRMODE_WARNING</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     如果发生错误，则显示一个 PHP <constant>E_WARNING</constant> 消息。关于此属性的更多信息请参见 <link linkend="pdo.error-handling">错误与错误处理</link>。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.errmode-exception">
   <term>
    <constant>PDO::ERRMODE_EXCEPTION</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     如果发生错误，则抛出一个 <classname>PDOException</classname>  异常。关于此属性的更多信息请参见 <link linkend="pdo.error-handling">错误与错误处理</link>。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.case-natural">
   <term>
    <constant>PDO::CASE_NATURAL</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     保留数据库驱动返回的列名。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.case-lower">
   <term>
    <constant>PDO::CASE_LOWER</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara> 
     强制列名小写。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.case-upper">
   <term>
    <constant>PDO::CASE_UPPER</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     强制列名大写。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.null-natural">
   <term>
    <constant>PDO::NULL_NATURAL</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.null-empty-string">
   <term>
    <constant>PDO::NULL_EMPTY_STRING</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.null-to-string">
   <term>
    <constant>PDO::NULL_TO_STRING</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-ori-next">
   <term>
    <constant>PDO::FETCH_ORI_NEXT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     在结果集中获取下一行。仅对可滚动游标有效。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-ori-prior">
   <term>
    <constant>PDO::FETCH_ORI_PRIOR</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     在结果集中获取上一行。仅对可滚动游标有效。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-ori-first">
   <term>
    <constant>PDO::FETCH_ORI_FIRST</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     在结果集中获取第一行。仅对可滚动游标有效。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-ori-last">
   <term>
    <constant>PDO::FETCH_ORI_LAST</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     在结果集中获取最后一行。仅对可滚动游标有效。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-ori-abs">
   <term>
    <constant>PDO::FETCH_ORI_ABS</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     根据行号从结果集中获取需要的行。仅对可滚动游标有效。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-ori-rel">
   <term>
    <constant>PDO::FETCH_ORI_REL</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     根据当前游标位置的相对位置从结果集中获取需要的行。仅对可滚动游标有效。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.cursor-fwdonly">
   <term>
    <constant>PDO::CURSOR_FWDONLY</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Create a <classname>PDOStatement</classname> object with a forward-only cursor.  This is the
     default cursor choice, as it is the fastest and most common data access
     pattern in PHP.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.cursor-scroll">
   <term>
    <constant>PDO::CURSOR_SCROLL</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Create a <classname>PDOStatement</classname> object with a scrollable cursor. Pass the
     <literal>PDO::FETCH_ORI_*</literal> constants to control the rows fetched from the result set.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.err-none">
   <term>
    <constant>PDO::ERR_NONE</constant>
     (<type>string</type>)
   </term>
   <listitem>
    <simpara> 
     Corresponds to SQLSTATE '00000', meaning that the SQL statement was
     successfully issued with no errors or warnings.  This constant is for
     your convenience when checking <function>PDO::errorCode</function> or
     <function>PDOStatement::errorCode</function> to determine if an error
     occurred.  You will usually know if this is the case by examining the
     return code from the method that raised the error condition anyway.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-evt-alloc">
   <term>
    <constant>PDO::PARAM_EVT_ALLOC</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     分配事件
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-evt-free">
   <term>
    <constant>PDO::PARAM_EVT_FREE</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     解除分配事件
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-evt-exec-pre">
   <term>
    <constant>PDO::PARAM_EVT_EXEC_PRE</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     执行一条预处理语句之前触发事件。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-evt-exec-post">
   <term>
    <constant>PDO::PARAM_EVT_EXEC_POST</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     执行一条预处理语句之后触发事件。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-evt-fetch-pre">
   <term>
    <constant>PDO::PARAM_EVT_FETCH_PRE</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     从一个结果集中取出一条结果之前触发事件。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-evt-fetch-post">
   <term>
    <constant>PDO::PARAM_EVT_FETCH_POST</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     从一个结果集中取出一条结果之后触发事件。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-evt-normalize">
   <term>
    <constant>PDO::PARAM_EVT_NORMALIZE</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Event triggered during bound parameter registration
     allowing the driver to normalize the parameter name.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
