<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.1 $ -->
<!-- $Author: dallas $ -->
<!-- EN-Revision: 1.2 Maintainer: dallas Status: ready -->
  <refentry id="function.mktime">
   <refnamediv>
    <refname>mktime</refname>
    <refpurpose>取得一个日期的 UNIX 时间戳</refpurpose>
   </refnamediv>
   <refsect1>
    <title>说明</title>
     <methodsynopsis>
      <type>int</type><methodname>mktime</methodname>
      <methodparam><type>int</type><parameter>hour</parameter></methodparam>
      <methodparam><type>int</type><parameter>minute</parameter></methodparam>
      <methodparam><type>int</type><parameter>second</parameter></methodparam>
      <methodparam><type>int</type><parameter>month</parameter></methodparam>
      <methodparam><type>int</type><parameter>day</parameter></methodparam>
      <methodparam><type>int</type><parameter>year</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>is_dst</parameter></methodparam>
     </methodsynopsis>
    <para>
     <emphasis>警告：</emphasis>注意参数的奇怪顺序，这和标准的 UNIX mktime()
     调用中的参数顺序不同。在脚本经常会混淆这些值而出错。
     <!-- 不太好翻，原文留着。
     Note the strange order of
     arguments, which differs from the order of arguments in a regular
     UNIX mktime() call and which does not lend itself well to leaving
     out parameters from right to left (see below). It is a common
     error to mix these values up in a script.
     -->
    </para>
    <para>
     根据给出的参数返回 Unix 时间戳。时间戳是一个长整数，包含了从
     Unix 新纪元（1970 年 1 月 1 日）到给定时间的秒数。
    </para>
    <para>
     参数可以从右向左省略，任何省略的参数会被设置成本地日期和时间的当前值。
    </para>
    <para>
     <parameter>is_dst</parameter> 在夏令时可以被设为 1，如果不是则设为
     0，或者不知道是否为夏令时的话设为 -1（默认值）。如果不知道，PHP
     会尝试自己判断。这可能会产生未预期（但不是错误）的结果。
    </para>
    <note>
     <para>
      <parameter>is_dst</parameter> 是 3.0.10 版新加的。
     </para>
    </note>
    <para>
     <function>mktime</function> 可以用来做日期计算和验证，对于超出范围的输入它可以自动计算出正确的值来。例如，下面的每一行都会输出字符串“Jan-01-1998”。
     <example>
      <title><function>mktime</function> 例子</title>
      <programlisting role="php">
<![CDATA[
echo date ("M-d-Y", mktime (0,0,0,12,32,1997));
echo date ("M-d-Y", mktime (0,0,0,13,1,1997));
echo date ("M-d-Y", mktime (0,0,0,1,1,1998));
echo date ("M-d-Y", mktime (0,0,0,1,1,98));
]]>
      </programlisting>
     </example>
     <parameter>Year</parameter> 可以是两位或四位数字，取值从
     0-69 表示 2000-2069 以及 70-99 表示 1970-1999（在如今很常见的
     time_t 是 32 位有符号整数的系统中，<parameter>year</parameter>
     的有效范围是 1902 到 2037）。
    </para>
    <para>
     给定月份的最后一天可以表达为下个月的第 "0" 天，而不是 -1
     天。下面两个例子都将产生字符串“The last day in Feb 2000 is: 29”。
     <example>
      <title>每个月的最后一天</title>
      <programlisting role="php">
<![CDATA[
$lastday = mktime (0,0,0,3,0,2000);
echo strftime ("Last day in Feb 2000 is: %d", $lastday);
     
$lastday = mktime (0,0,0,4,-31,2000);
echo strftime ("Last day in Feb 2000 is: %d", $lastday);
]]>
      </programlisting>
     </example>
    </para>
    <simpara>
    年，月，日都等于零的日期被认为是非法的（否则会被当作
    30.11.1999，这是很怪的行为）。
    </simpara>
    <para>
     参见 <function>date</function> 和 <function>time</function>。
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
