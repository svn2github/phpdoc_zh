<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 320399 Maintainer: HonestQiao Status: ready -->
<!-- Reviewed: no Maintainer: HonestQiao -->
<refentry xml:id="function.json-decode" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>json_decode</refname>
  <refpurpose>对 JSON 格式的字符串进行编码</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>json_decode</methodname>
   <methodparam><type>string</type><parameter>json</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>assoc</parameter></methodparam>
  </methodsynopsis>
  <para>
   接受一个 JSON 格式的字符串并且把它转换为 PHP 变量
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>json</parameter></term>
     <listitem>
      <para>
       待解码的 <parameter>json</parameter> <type>string</type> 格式的字符串。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>assoc</parameter></term>
     <listitem>
      <para>
       当该参数为 &true; 时，将返回 <type>array</type> 而非 <type>object</type> 。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns an <type>object</type> or if the optional
   <parameter>assoc</parameter> parameter is &true;, an associative 
   <type>array</type> is instead returned.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>json_decode</function> 的例子</title>
    <programlisting role="php">
<![CDATA[
<?php
$json = '{"a":1,"b":2,"c":3,"d":4,"e":5}';

var_dump(json_decode($json));
var_dump(json_decode($json, true));

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(stdClass)#1 (5) {
    ["a"] => int(1)
    ["b"] => int(2)
    ["c"] => int(3)
    ["d"] => int(4)
    ["e"] => int(5)
}

array(5) {
    ["a"] => int(1)
    ["b"] => int(2)
    ["c"] => int(3)
    ["d"] => int(4)
    ["e"] => int(5)
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    The JSON spec is not JavaScript, but a subset of JavaScript.
   </para>
  </note>
  <note>
   <para>
    In the event of a failure to decode, <function>json_last_error</function>
    can be used to determine the exact nature of the error.
   </para>
  </note>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.4.0</entry>
       <entry>
        The <parameter>options</parameter> parameter was added.
       </entry>
      </row>
      <row>
       <entry>5.3.0</entry>
       <entry>Added the optional <parameter>depth</parameter>. The default recursion depth was increased from 128 to 512</entry>
      </row>
      <row>
       <entry>5.2.3</entry>
       <entry>The nesting limit was increased from 20 to 128</entry>
      </row>
      <row>
       <entry>5.2.1</entry>
       <entry>
        Added support for JSON decoding of basic types.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>json_encode</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
