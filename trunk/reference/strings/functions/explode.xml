<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 315540 Maintainer: HonestQiao Status: ready -->
<!-- Reviewed: no Maintainer: HonestQiao -->
<refentry xml:id="function.explode" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>explode</refname>
  <refpurpose>使用一个字符串分割另一个字符串</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>explode</methodname>
   <methodparam><type>string</type><parameter>separator</parameter></methodparam>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>limit</parameter></methodparam>
  </methodsynopsis>
  <para>
   此函数返回由字符串组成的数组，每个元素都是
   <parameter>string</parameter>
   的一个子串，它们被字符串
   <parameter>separator</parameter>
   作为边界点分割出来。如果设置了
   <parameter>limit</parameter>
   参数，则返回的数组包含最多
   <parameter>limit</parameter>
   个元素，而最后那个元素将包含
   <parameter>string</parameter>
   的剩余部分。
  </para>
  <para>
   如果
   <parameter>separator</parameter>
   为空字符串（""），<function>explode</function>
   将返回 &false;。如果
   <parameter>separator</parameter>
   所包含的值在
   <parameter>string</parameter>
   中找不到，那么
   <function>explode</function>
   将返回包含 <parameter>string</parameter>
   单个元素的数组。
  </para>
  <para>
   如果
   <parameter>limit</parameter>
   参数是负数，则返回除了最后的
   -<parameter>limit</parameter>
   个元素外的所有元素。此特性是 PHP 5.1.0 中新增的。
  </para>
  <para>
   由于历史原因，虽然 <function>implode</function>
   可以接收两种参数顺序，但是
   <function>explode</function> 不行。你必须保证
   <parameter>separator</parameter> 参数在
   <parameter>string</parameter> 参数之前才行。
  </para>
  <note>
   <para>
    参数 <parameter>limit</parameter> 是在 PHP
    4.0.1 中加入的。
   </para>
  </note>
  <para>
   <example>
    <title><function>explode</function> 例子</title>
    <programlisting role="php">
<![CDATA[
<?php
// 示例 1
$pizza  = "piece1 piece2 piece3 piece4 piece5 piece6";
$pieces = explode(" ", $pizza);
echo $pieces[0]; // piece1
echo $pieces[1]; // piece2

// 示例 2
$data = "foo:*:1023:1000::/home/foo:/bin/sh";
list($user, $pass, $uid, $gid, $gecos, $home, $shell) = explode(":", $data);
echo $user; // foo
echo $pass; // *

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><parameter>limit</parameter> 参数例子</title>
    <programlisting role="php">
<![CDATA[
<?php
$str = 'one|two|three|four';

// 正数的 limit
print_r(explode('|', $str, 2));

// 负数的 limit（自 PHP 5.1 起）
print_r(explode('|', $str, -1));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [0] => one
    [1] => two|three|four
)
Array
(
    [0] => one
    [1] => two
    [2] => three
)
]]>
    </screen>
   </example>
  </para>

  &note.bin-safe;

  <para>
   参见 
   <function>preg_split</function>，<function>spliti</function>，<function>split</function>，<function>strtok</function>
   和 <function>implode</function>。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>delimiter</parameter></term>
     <listitem>
      <para>
       The boundary string.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       The input string.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>limit</parameter></term>
     <listitem>
      <para>
       If <parameter>limit</parameter> is set and positive, the returned array will contain
       a maximum of <parameter>limit</parameter> elements with the last
       element containing the rest of <parameter>string</parameter>.
      </para>
      <para>
       If the <parameter>limit</parameter> parameter is negative, all components
       except the last -<parameter>limit</parameter> are returned.
      </para>
      <para>
       If the <parameter>limit</parameter> parameter is zero, then this is treated as 1.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
  <para>
   Although <function>implode</function> can, for historical reasons,
   accept its parameters in either order,
   <function>explode</function> cannot. You must ensure that the
   <parameter>delimiter</parameter> argument comes before the
   <parameter>string</parameter> argument.
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns an <type>array</type> of <type>string</type>s
   created by splitting the <parameter>string</parameter> parameter on
   boundaries formed by the <parameter>delimiter</parameter>.
  </para>
  <para>
   If <parameter>delimiter</parameter> is an empty <type>string</type> (""),
   <function>explode</function> will return &false;.
   If <parameter>delimiter</parameter> contains a value that is not
   contained in <parameter>string</parameter> and a negative
   <parameter>limit</parameter> is used, then an empty <type>array</type> will be
   returned, otherwise an <type>array</type> containing
   <parameter>string</parameter> will be returned.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.1.0</entry>
       <entry>
        Support for negative <parameter>limit</parameter>s was added
       </entry>
      </row>
      <row>
       <entry>4.0.1</entry>
       <entry>
        The <parameter>limit</parameter> parameter was added
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>explode</function> examples</title>
    <programlisting role="php">
<![CDATA[
<?php
// Example 1
$pizza  = "piece1 piece2 piece3 piece4 piece5 piece6";
$pieces = explode(" ", $pizza);
echo $pieces[0]; // piece1
echo $pieces[1]; // piece2

// Example 2
$data = "foo:*:1023:1000::/home/foo:/bin/sh";
list($user, $pass, $uid, $gid, $gecos, $home, $shell) = explode(":", $data);
echo $user; // foo
echo $pass; // *

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><parameter>limit</parameter> parameter examples</title>
    <programlisting role="php">
<![CDATA[
<?php
$str = 'one|two|three|four';

// positive limit
print_r(explode('|', $str, 2));

// negative limit (since PHP 5.1)
print_r(explode('|', $str, -1));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [0] => one
    [1] => two|three|four
)
Array
(
    [0] => one
    [1] => two
    [2] => three
)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.bin-safe;
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>preg_split</function></member>
    <member><function>str_split</function></member>
    <member><function>mb_split</function></member>
    <member><function>str_word_count</function></member>
    <member><function>strtok</function></member>
    <member><function>implode</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
