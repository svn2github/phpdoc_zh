<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.4 $ -->
<!-- $Author: dallas $ -->
<!-- EN-Revision: 1.24 Maintainer: dallas Status: ready -->
<reference id="ref.image">
 <title>Image 图像函数</title>
 <titleabbrev>Image</titleabbrev>

 <partintro>
   <section id="image.intro">
    &reftitle.intro;
    <para>
     PHP 不仅限于只产生 HTML 的输出。还可以创建及操作多种不同图像格式的图像文件，包括
     gif，png，jpg，wbmp 和 xpm。更方便的是，PHP
     可以直接将图像流输出到浏览器。要处理图像，需要在编译 PHP 时加上图像函数的 GD 库。GD
     和 PHP 还可能需要其它的库，视乎需要支持哪些图像格式而定。
    </para>
    <para>
     可以在 PHP 中使用图像函数来得到
     <acronym>JPEG</acronym>，<acronym>GIF</acronym>，<acronym>PNG</acronym>，<acronym>SWF</acronym>，<acronym>TIFF</acronym>
     和 <acronym>JPEG2000</acronym> 图像的大小。
    </para>
    <para>
     <note>
      <simpara>
       阅读需求一节以了解怎样扩展图像能力来读取，写入和修改图像以及读取数码相机拍摄的照片中的元数据。
      </simpara>
     </note>
    </para>
   </section>

   <section id="image.requirements">
    &reftitle.required;
    <para>
     如果有 <acronym>GD</acronym> 库（在 <ulink
     url="&url.gd;">&url.gd;</ulink>），可以创建及操作图像。
    </para>
    <para>
     所能处理的图像格式取决于所安装的 <acronym>GD</acronym>
     版本，以及其它 <acronym>GD</acronym> 可能用到的来访问这些图像格式的库。低于
     gd-1.6 版本的 <acronym>GD</acronym> 支持 GIF 图像格式，不支持
     PNG，高于 gd-1.6 低于 gd-2.0.28 的版本支持 PNG，不支持 GIF。在
     gd-2.0.28 中又重新支持 GIF 了。
      <note>
       <simpara>
        自 PHP 4.3 起绑定了一个 GD
        库的版本。这个绑定的版本具有一些附加的特色例如透明混色，应优先使用此版本，因为它的代码维护得更好以及更加稳定。
       </simpara>
      </note>
    </para>
    <para>
     可能想要增加 GD 处理的图像格式。
     <table>
     <title>所支持的图像格式</title>
      <tgroup cols="3">
       <thead>
        <row>
         <entry>图像格式</entry>
         <entry>要下载的库</entry>
         <entry>注解</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry><literal>gif</literal></entry>
         <entry></entry>
         <entry>
          仅在低于 gd-1.6 与高于 gd-2.0.28 的 GD 版本中支持。PHP 4.3.0 以及绑定的 GD
          库中支持<emphasis>只读</emphasis>的 GIF。PHP 4.3.9 和 PHP 5.0.1
          起支持<emphasis>写入</emphasis>。
         </entry>
        </row>
        <row>
         <entry><literal>jpeg-6b</literal></entry>
         <entry><ulink url="&url.jpeg;">&url.jpeg;</ulink></entry>
         <entry></entry>
        </row>
        <row>
         <entry><literal>png</literal></entry>
         <entry><ulink url="&url.libpng;">&url.libpng;</ulink></entry>
         <entry>
          仅在高于 gd-1.6 的 GD 版本中支持。
         </entry>
        </row>
        <row>
         <entry><literal>xpm</literal></entry>
         <entry><ulink url="&url.libxpm;">&url.libxpm;</ulink></entry>
         <entry>
          如果系统中安装了 X 环境，则很可能已经有了这个库。
         </entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </para>

    <para>
     可能想要增强 GD 处理不同字体的能力。支持下列字库：
     <table>
     <title>所支持的字库</title>
      <tgroup cols="3">
       <thead>
        <row>
         <entry>字库</entry>
         <entry>下载位置</entry>
         <entry>注解</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry><literal>FreeType 1.x</literal></entry>
         <entry><ulink url="&url.freetype;">&url.freetype;</ulink></entry>
         <entry></entry>
        </row>
        <row>
         <entry><literal>FreeType 2</literal></entry>
         <entry><ulink url="&url.freetype;">&url.freetype;</ulink></entry>
         <entry></entry>
        </row>
        <row>
         <entry><literal>T1lib</literal></entry>
         <entry><ulink url="&url.t1lib;">&url.t1lib;</ulink>)</entry>
         <entry>
          支持 Type 1 字体。
         </entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </para>

    <para>
     如果 PHP 编译时指定了
     <option role="configure">--enable-exif</option>，就可以操作存储于
     <acronym>JPEG</acronym> 和 <acronym>TIFF</acronym>
     图像文件头中的信息。这样就可以读取上面提到的数码相机生成的照片中的元数据。这些函数不需要
     <acronym>GD</acronym> 库。
    </para>
   </section>

   &reference.image.configure;

   &reference.image.ini;

   <section id="image.resources">
    &reftitle.resources;
    &no.resource;
   </section>

   &reference.image.constants;

   <section id="image.examples">
    &reftitle.examples;
    <para>
     <example>
      <title>用 PHP 创建 PNG 图像</title>
      <programlisting role="php">
<![CDATA[
<?php

header("Content-type: image/png");
$string = $_GET['text'];
$im     = imagecreatefrompng("images/button1.png");
$orange = imagecolorallocate($im, 220, 210, 60);
$px     = (imagesx($im) - 7.5 * strlen($string)) / 2;
imagestring($im, 3, $px, 9, $string, $orange);
imagepng($im);
imagedestroy($im);

?>
]]>
      </programlisting>
     </example>
     本例应该在一个具有类似：&lt;img
     src=&quot;button.php?text=text&quot;&gt; 标签的页面中被调用。上述的
     button.php 脚本会取得
     &quot;text&quot; 字符串将其覆盖在原图上（本例中的
     &quot;images/button1.png&quot;）并输出作为结果的图像。用此方法可以很方便地修改按钮上的文字从而避免了每次都要新画一个按钮的图像。用此方法就可以动态生成了。
    </para>
   </section>
 </partintro>

 &reference.image.functions;

</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
