<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision$ -->
<!-- $Author$ -->
<!-- EN-Revision: n/a Maintainer: dallas Status: ready -->
  <refentry xml:id="function.preg-replace-callback" xmlns="http://docbook.org/ns/docbook">
   <refnamediv>
    <refname>preg_replace_callback</refname>
    <refpurpose>用回调函数执行正则表达式的搜索和替换</refpurpose>
   </refnamediv>
   <refsect1>
    <title>说明</title>
    <methodsynopsis>
     <type>mixed</type><methodname>preg_replace_callback</methodname>
     <methodparam><type>mixed</type><parameter>pattern</parameter></methodparam>
     <methodparam><type>callback</type><parameter>callback</parameter></methodparam>
     <methodparam><type>mixed</type><parameter>subject</parameter></methodparam>
     <methodparam choice="opt"><type>int</type><parameter>limit</parameter></methodparam>
    </methodsynopsis>
    <para>
     本函数的行为几乎和
     <function>preg_replace</function> 一样，除了不是提供一个
     <parameter>replacement</parameter> 参数，而是指定一个
     <parameter>callback</parameter> 函数。该函数将以目标字符串中的匹配数组作为输入参数，并返回用于替换的字符串。
    </para>
    <example>
     <title><function>preg_replace_callback</function> 例子</title>
     <programlisting role='php'>
<![CDATA[
<?php
  // 此文本是用于 2002 年的，
  // 现在想使其能用于 2003 年
  $text = "April fools day is 04/01/2002\n";
  $text.= "Last christmas was 12/24/2001\n";

  // 回调函数
  function next_year($matches) {
    // 通常：$matches[0] 是完整的匹配项
    // $matches[1] 是第一个括号中的子模式的匹配项
    // 以此类推
    return $matches[1].($matches[2]+1);
  }

  echo preg_replace_callback(
              "|(\d{2}/\d{2}/)(\d{4})|",
              "next_year",
              $text);

  // 结果为：
  // April fools day is 04/01/2003
  // Last christmas was 12/24/2002
?>
]]>
     </programlisting>
    </example>
    <para>
     You'll often need the <parameter>callback</parameter> function
     for a <function>preg_replace_callback</function> in just one place.
     In this case you can use <function>create_function</function> to
     declare an anonymous function as callback within the call to
     <function>preg_replace_callback</function>. By doing it this way
     you have all information for the call in one place and do not
     clutter the function namespace with a callback functions name
     not used anywhere else.
    </para>
    <example>
     <title><function>preg_replace_callback</function> 和 <function>create_function</function></title>
     <programlisting role='php'>
<![CDATA[
<?php
  /* 一个 UNIX 风格的命令行过滤器，将每个段落开头的
   * 大写字母转换成小写字母 */

  $fp = fopen("php://stdin", "r") or die("can't read stdin");
  while (!feof($fp)) {
      $line = fgets($fp);
      $line = preg_replace_callback(
          '|<p>\s*\w|',
          create_function(
              // 这里使用单引号很关键，
              // 否则就把所有的 $ 换成 \$
              '$matches',
              'return strtolower($matches[0]);'
          ),
          $line
      );
      echo $line;
  }
  fclose($fp);
?>
]]>
     </programlisting>
    </example>
    <para>
     参见 <function>preg_replace</function> 和
     <function>create_function</function>。
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
