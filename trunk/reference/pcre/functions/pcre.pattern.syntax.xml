<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.2 $ -->
<!-- $Author: dallas $ -->
<!-- EN-Revision: 1.5 Maintainer: dallas Status: partial -->
  <refentry id="pcre.pattern.syntax">
   <refnamediv>
    <refname>模式语法</refname>
    <refpurpose>解说 Perl 兼容正则表达式的语法</refpurpose>
   </refnamediv>

   <refsect1>
    <title>说明</title>
    <simpara>
     PCRE 库是一组用和 Perl 5
     相同的语法和语义实现了正则表达式模式匹配的函数，不过有少许区别（见下面）。当前
     PCRE 的实现是与 Perl 5.005 相符的。
    </simpara>
   </refsect1>

   <refsect1>
    <title>与 Perl 的区别</title>
    <para>
     这里谈到的区别是就 Perl 5.005 来说的。
    <orderedlist>
     <listitem>
      <simpara>
       默认情况下，空白字符是 C 语言库函数 isspace()
       所能识别的任何字符，尽管有可能与别的字符类型表编译在一起。通常
       isspace() 匹配空格，换页符，换行符，回车符，水平制表符和垂直制表符。Perl 5
       不再将垂直制表符包括在空白字符中了。事实上长久以来存在于 Perl
       文档中的转义序列 \v 从未被识别过，不过该字符至少到 5.002
       为止都被当成空白字符的。在 5.004 和 5.005 中 \s 不匹配此字符。
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       PCRE 不允许向前匹配重复的数量符。Perl
       允许这样，但可能不是你想象中的含义。例如，(?!a){3}
       并不匹配下面三个不是“a”的字符，而是匹配下一个不是“a”的字符三次。
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       捕获出现在排除模式断言中的子模式虽然被计数，但并未在偏移向量中设定其条目。Perl
       在匹配失败前从此种模式中设定其数字变量，但只在排触摸式断言只包含一个分支时。
       <!-- 费解！
     Capturing subpatterns that occur inside negative looka-
     head assertions are counted, but their entries in the
     offsets vector are never set. Perl sets its numerical variables
     from any such patterns that are matched before the
     assertion fails to match something (thereby succeeding), but
     only  if  the negative look ahead assertion contains just one
     branch.
       -->
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       尽管目标字符串中支持二进制的零字符，但不能出现在模式字符串中，因为它被当作普通的
       C 字符串传递，以二进制零终止。转义序列“\\x00”可以在模式中用来表示二进制零。
      </simpara>
      </listitem>
      <listitem>
       <simpara>
        不支持下列 Perl 转义序列：\l，\u，\L，\U，\E，\Q。事实上这些是由
        Perl 的字符串处理来实现的，并不是模式匹配引擎的一部分。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        不支持 Perl 的 \G 匹配，因为这和单个的模式匹配无关。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        很明显，PCRE 不支持 (?{code}) 结构。
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        当部分模式重复的时候，有关 Perl 5.005_02
        捕获字符串的设定有些古怪的地方。举例说，用模式
        /^(a(b)?)+$/ 去匹配 "aba" 会将 $2 设为 "b"，但是用模式
        /^(aa(bb)?)+$/ 去匹配 "aabbaa" 会使 $2 无值。然而，如果把模式改成
        /^(aa(b(b))?)+$/，则 $2（和 $3）就有值了。在
        Perl 5.004 中以上两种情况下 $2 都会被赋值，在 PCRE 中也是
        &true;。如果以后 Perl 改了，PCRE 可能也会跟着改。
       </simpara>
      </listitem>
      <listitem>
      <simpara>
       另一个未解决的矛盾是 Perl 5.005_02 中模式
       /^(a)?(?(1)a|b)+$/ 能匹配上字符串 "a"，但是 PCRE
       不会。然而，在 Perl 和 PCRE 中用 /^(a)?a/
       去匹配 "a" 会使 $1 没有值。
      </simpara>
      </listitem>
      <listitem>
       <para>
        PCRE 提供了一些对 Perl 正则表达式机制的扩展：
        <orderedlist>
         <listitem>
          <simpara>
           尽管向后断言必须匹配固定长度字符串，但每个向后断言的分支可以匹配不同长度的字符串。Perl
           5.005 要求所有分支的长度相同。
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          如果设定了
          <link linkend="pcre.pattern.modifiers">PCRE_DOLLAR_ENDONLY</link>
          而没有设定
          <link linkend="pcre.pattern.modifiers">PCRE_MULTILINE</link>，则
          $ 元字符只匹配字符串的最末尾。
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          如果设定了
          <link linkend="pcre.pattern.modifiers">PCRE_EXTRA</link>，反斜线后面跟一个没有特殊含义的字母会出错。
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          如果设定了
          <link linkend="pcre.pattern.modifiers">PCRE_UNGREEDY</link>，则重复的数量符的
          greed 被反转，即，默认时不是 greedy，但如果后面跟上一个问号就变成 greedy 了。
         </simpara>
        </listitem>
       </orderedlist>
      </para>
     </listitem>
    </orderedlist>
   </para>
   </refsect1>

   <refsect1 id="regexp.reference">
    <title>正则表达式详解</title>
     <refsect2 id="regexp.introduction">
      <title>介绍</title>
      <para>
     The syntax and semantics of  the  regular  expressions  sup-
     ported  by PCRE are described below. Regular expressions are
     also described in the Perl documentation and in a number  of
     other  books,  some  of which have copious examples. Jeffrey
     Friedl's  "Mastering  Regular  Expressions",  published   by
     O'Reilly  (ISBN 1-56592-257-3), covers them in great detail.
     The description here is intended as reference documentation.

     A regular expression is a pattern that is matched against  a
     subject string from left to right. Most characters stand for
     themselves in a pattern, and match the corresponding charac-
     ters in the subject. As a trivial example, the pattern
       <literal>The quick brown fox</literal>
     matches a portion of a subject string that is  identical  to
     itself.
    </para>
    </refsect2>
    <refsect2 id="regexp.reference.meta">
     <title>元字符</title>
     <para>
     The  power  of  regular  expressions comes from the
     ability to include alternatives and repetitions in the  pat-
     tern.  These  are encoded in the pattern by the use of <emphasis>meta</emphasis>-
     <emphasis>characters</emphasis>, which do not stand for  themselves  but  instead
     are interpreted in some special way.
     </para>
     <para>
     There are two different sets of meta-characters: those  that
     are  recognized anywhere in the pattern except within square
     brackets, and those that are recognized in square brackets.
     Outside square brackets, the meta-characters are as follows:
      <variablelist>
       <varlistentry>
        <term><emphasis>\</emphasis></term>
        <listitem>
         <simpara>
          有数种用途的通用转义符
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>^</emphasis></term>
        <listitem>
         <simpara>
          匹配目标的开头（或在多行模式下行的开头，即紧随一换行符之后）
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>$</emphasis></term>
        <listitem>
         <simpara>
          匹配目标的结尾（或在多行模式下行的结尾，即紧随一换行符之前）
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>.</emphasis></term>
        <listitem>
         <simpara>
          匹配除了换行符外的任意一个字符（默认情况下）
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>[</emphasis></term>
        <listitem>
         <simpara>
          字符类定义开始
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>]</emphasis></term>
        <listitem>
         <simpara>
          字符类定义结束
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>|</emphasis></term>
        <listitem>
         <simpara>
          开始一个多选一的分支
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>(</emphasis></term>
        <listitem>
         <simpara>
          子模式开始
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>)</emphasis></term>
        <listitem>
         <simpara>
          子模式结束
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>?</emphasis></term>
        <listitem>
         <simpara>
          扩展 ( 的含义，也是 0 或 1 数量限定符，以及数量限定符最小值
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>*</emphasis></term>
        <listitem>
         <simpara>
          匹配 0 个或多个的数量限定符
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>+</emphasis></term>
        <listitem>
         <simpara>
          匹配 1 个或多个的数量限定符
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>{</emphasis></term>
        <listitem>
         <simpara>
          最少／最多数量限定开始
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>}</emphasis></term>
        <listitem>
         <simpara>
          最少／最多数量限定结束
         </simpara>
        </listitem>
       </varlistentry>
      </variablelist>
      模式中方括号内的部分称为“字符类”。字符类中可用的元字符为：
      <variablelist>
       <varlistentry>
        <term><emphasis>\</emphasis></term>
        <listitem>
         <simpara>
          通用转义字符
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>^</emphasis></term>
        <listitem>
         <simpara>
          排除字符类，但仅当其为第一个字符时有效
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>-</emphasis></term>
        <listitem>
         <simpara>
          指出字符范围
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>]</emphasis></term>
        <listitem>
         <simpara>
          结束字符类
         </simpara>
        </listitem>
       </varlistentry>
      </variablelist>
      下面说明了每一个元字符的用法。
     </para>
    </refsect2>
    <refsect2 id="regexp.reference.backslash">
     <title>反斜线（\）</title>
     <para>
      反斜线字符有几种用途。首先，如果其后跟着一个非字母数字字符，则取消该字符可能具有的任何特殊含义。此种将反斜线用作转义字符的用法适用于无论是字符类之中还是之外。
     </para>
     <para>
      例如，如果想匹配一个“*”字符，则在模式中用“\*”。这适用于无论下一个字符是否会被当作元字符来解释，因此在非字母数字字符之前加上一个“\”来指明该字符就代表其本身总是安全的。尤其是，如果要匹配一个反斜线，用“\\”。
     </para>
     <para>
      如果模式编译时加上了
     <link linkend="pcre.pattern.modifiers">PCRE_EXTENDED</link>
     选项，模式中的空白字符（字符类中以外的）以及字符类之外的“#”到换行符之间的字符都被忽略。可以用转义的反斜线将空白字符或者“#”字符包括到模式中去。
     </para>
     <para>
      反斜线的第二种用途提供了一种在模式中以可见方式去编码不可打印字符的方法。
     A second use of backslash provides a way of encoding non-
     printing characters in patterns in a visible manner. There
     is no restriction on the appearance of non-printing  characters,
     apart from the binary zero that terminates a pattern,
     but when a pattern is being prepared by text editing, it is
     usually  easier to use one of the following escape sequences
     than the binary character it represents:
     </para>
     <para>
      <variablelist>
       <varlistentry>
        <term><emphasis>\a</emphasis></term>
        <listitem>
         <simpara>
          alarm，即 BEL 字符（0x07）
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>\cx</emphasis></term>
        <listitem>
         <simpara>
           "control-x"，其中 x 是任意字符
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>\e</emphasis></term>
        <listitem>
         <simpara>
          escape（0x1B）
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>\f</emphasis></term>
        <listitem>
         <simpara>
          换页符 formfeed（0x0C）
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>\n</emphasis></term>
        <listitem>
         <simpara>
          换行符 newline（0x0A）
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>\r</emphasis></term>
        <listitem>
         <simpara>
          回车符 carriage return（0x0D）
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>\t</emphasis></term>
        <listitem>
         <simpara>
          制表符 tab（0x09）
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>\xhh</emphasis></term>
        <listitem>
         <simpara>
          十六进制代码为 hh 的字符
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>\ddd</emphasis></term>
        <listitem>
         <simpara>
          八进制代码为 ddd 的字符，或 backreference
         </simpara>
        </listitem>
       </varlistentry>
      </variablelist>
     </para>
     <para>
      “<literal>\cx</literal>”的精确效果如下：如果“<literal>x</literal>”是小写字母，则被转换为大写字母。接着字符中的第
      6 位（0x40）被反转。从而“<literal>\cz</literal>”成为
      0x1A，但“<literal>\c{</literal>”成为
      0x3B，而“<literal>\c;</literal>”成为 0x7B。
     </para>
     <para>
      在“<literal>\x</literal>”之后最多再读取两个十六进制数字（其中的字母可以是大写或小写）。
     </para>
     <para>
      在“<literal>\0</literal>”之后最多再读取两个八进制数字。以上两种情况下，如果少于两个数字，则只使用已出现的。因此序列“<literal>\0\x\07</literal>”代表两个二进制的零加一个
      BEL 字符。如果是八进制数字则确保在开始的零后面再提供两个数字。
     </para>
     <para>
      处理反斜线后面跟着一个不是 0
      的数字比较复杂。在字符类之外，PCRE
      以十进制数字读取该数字及其后面的数字。如果数字小于
      10，或者之前表达式中捕获到至少该数字的左圆括号，则这个序列将被作为<emphasis>逆向引用</emphasis>。有关此如何运作的说明在后面，以及括号内的子模式。
     </para>
     <para>
      在字符类之中，或者如果十进制数字大于 9
      并且之前没有那么多捕获的子模式，PCRE 重新从反斜线开始读取其后的最多三个八进制数字，并以最低位的
      8 个比特产生出一个单一字节。任何其后的数字都代表自身。例如：
     </para>
     <para>
      <variablelist>
       <varlistentry>
        <term><emphasis>\040</emphasis></term>
        <listitem>
         <simpara>
          另一种表示空格的方法
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>\40</emphasis></term>
        <listitem>
         <simpara>
          同上，如果之前捕获的子模式少于 40 个的话
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>\7</emphasis></term>
        <listitem>
         <simpara>
          总是一个逆向引用
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>\11</emphasis></term>
        <listitem>
         <simpara>
          可能是个逆向引用，或者是制表符 tab
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>\011</emphasis></term>
        <listitem>
         <simpara>
          总是表示制表符 tab
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>\0113</emphasis></term>
        <listitem>
         <simpara>
          表示制表符 tab 后面跟着一个字符“3”
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>\113</emphasis></term>
         <listitem>
         <simpara>
          表示八进制代码为 113 的字符（因为不能超过 99 个逆向引用）
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>\377</emphasis></term>
        <listitem>
         <simpara>
          表示一个所有的比特都是 1 的字节
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>\81</emphasis></term>
        <listitem>
         <simpara>
          要么是一个逆向引用，要么是一个二进制的零后面跟着两个字符“8”和“1”
         </simpara>
        </listitem>
       </varlistentry>
      </variablelist>
     </para>
     <para>
      注意八进制值 100 或更大的值之前不能以零打头，因为不会读取（反斜线后）超过三个八进制数字。
     </para>
     <para>
      所有的定义了一个单一字节的序列可以用于字符类之中或之外。此外，在字符类之中，序列“<literal>\b</literal>”被解释为反斜线字符（0x08），而在字符类之外有不同含义（见下面）。
     </para>
     <para>
      反斜线的第三个用法是指定通用字符类型：
     </para>
     <para>
      <variablelist>
       <varlistentry>
        <term><emphasis>\d</emphasis></term>
        <listitem>
         <simpara>
          任何十进制数
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>\D</emphasis></term>
        <listitem>
         <simpara>
          任何非十进制数的字符
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>\s</emphasis></term>
        <listitem>
         <simpara>
          任何空白字符
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>\S</emphasis></term>
        <listitem>
         <simpara>
          任何非空白字符
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>\w</emphasis></term>
        <listitem>
         <simpara>
          任何“字”的字符
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>\W</emphasis></term>
        <listitem>
         <simpara>
          任何“非字”的字符
         </simpara>
        </listitem>
       </varlistentry>
      </variablelist>
     </para>
     <para>
     Each pair of escape sequences partitions the complete set of
     characters into two disjoint sets. Any given character
     matches one, and only one, of each pair.
     </para>
     <para>
     A "word" character is any letter or digit or the underscore
     character,  that  is,  any  character which can be part of a
     Perl "<literal>word</literal>". The definition of letters and digits is
     controlled by PCRE's character tables, and may vary if locale-specific
     matching is taking place (see  "Locale  support"
     above). For example, in the "fr" (French) locale, some char-
     acter codes greater than 128 are used for accented letters,
     and these are matched by <literal>\w</literal>.
     </para>
     <para>
     These character type sequences can appear both inside and
     outside  character classes. They each match one character of
     the appropriate type. If the current matching  point is at
     the end of the subject string, all of them fail, since there
     is no character to match.
     </para>
     <para>
     The fourth use of backslash is  for  certain  simple  asser-
     tions. An assertion specifies a condition that has to be met
     at a particular point in  a match, without consuming any
     characters from the subject string. The use of subpatterns
     for more complicated assertions is described below. The
     backslashed assertions are
     </para>
     <para>
      <variablelist>
       <varlistentry>
        <term><emphasis>\b</emphasis></term>
        <listitem>
         <simpara>
          字分界线
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>\B</emphasis></term>
        <listitem>
         <simpara>
          非字分界线
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>\A</emphasis></term>
        <listitem>
         <simpara>
          目标的开头（与多行模式无关）
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>\Z</emphasis></term>
        <listitem>
         <simpara>
          目标的结尾或结尾的换行符（与多行模式无关）
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><emphasis>\z</emphasis></term>
        <listitem>
         <simpara>
          目标的结尾（与多行模式无关）
         </simpara>
        </listitem>
       </varlistentry>
      </variablelist>
     </para>
     <para>
     These assertions may not appear in  character  classes  (but
     note that "<literal>\b</literal>" has a different meaning, namely the backspace
     character, inside a character class).
     </para>
     <para>
     A word boundary is a position in the subject string where
     the current character and the previous character do not both
     match <literal>\w</literal> or <literal>\W</literal> (i.e. one matches
     <literal>\w</literal> and  the  other  matches
     <literal>\W</literal>), or the start or end of the string if the first
     or last character matches \w, respectively.
     </para>
     <para>
     The <literal>\A</literal>, <literal>\Z</literal>, and
     <literal>\z</literal> assertions differ  from  the  traditional
     circumflex  and  dollar  (described below) in that they only
     ever match at the very start and end of the subject  string,
     whatever  options  are  set.  They  are  not affected by the
     <link linkend="pcre.pattern.modifiers">PCRE_NOTBOL</link> or
     <link linkend="pcre.pattern.modifiers">PCRE_NOTEOL</link> options.
     The  difference  between <literal>\Z</literal> and
     <literal>\z</literal>  is that <literal>\Z</literal>
     matches before a newline that is the
     last character of the string as well as at the  end  of  the
     string, whereas <literal>\z</literal> matches only at the end.
     </para>
    </refsect2>

    <refsect2 id="regexp.reference.circudollar">
     <title>音调符（^）和美元符（$）</title>
     <literallayout>
     Outside a character class, in the default matching mode, the
     circumflex  character  is an assertion which is true only if
     the current matching point is at the start  of  the  subject
     string. Inside a character class, circumflex has an entirely
     different meaning (see below).

     Circumflex need not be the first character of the pattern if
     a number of alternatives are involved, but it should be the
     first thing in each alternative in which it appears  if  the
     pattern is ever to match that branch. If all possible alter-
     natives start with a circumflex, that is, if the pattern  is
     constrained to match only at the start of the subject, it is
     said to be an "anchored" pattern. (There are also other con-
     structs that can cause a pattern to be anchored.)

     A dollar character is an assertion which is &true; only if the
     current  matching point is at the end of the subject string,
     or immediately before a newline character that is  the  last
     character in the string (by default). Dollar need not be the
     last character of the pattern if a  number  of  alternatives
     are  involved,  but it should be the last item in any branch
     in which it appears.  Dollar has no  special  meaning  in  a
     character class.

     The meaning of dollar can be changed so that it matches only
     at   the   very   end   of   the   string,  by  setting  the
     <link linkend="pcre.pattern.modifiers">PCRE_DOLLAR_ENDONLY</link>
     option at compile or matching time. This
     does not affect the \Z assertion.

     The meanings of the circumflex  and  dollar  characters  are
     changed  if  the  <link linkend="pcre.pattern.modifiers">PCRE_MULTILINE</link>  option is set. When this is
     the case,  they  match  immediately  after  and  immediately
     before an internal "\n" character, respectively, in addition
     to matching at the start and end of the subject string.  For
     example,  the  pattern  /^abc$/  matches  the subject string
     "def\nabc" in multiline  mode,  but  not  otherwise.  Conse-
     quently,  patterns  that  are  anchored  in single line mode
     because all branches start with "^" are not anchored in mul-
     tiline  mode.  The  <link linkend="pcre.pattern.modifiers">PCRE_DOLLAR_ENDONLY</link>  option is ignored if
     <link linkend="pcre.pattern.modifiers">PCRE_MULTILINE</link>  is set.

     Note that the sequences \A, \Z, and \z can be used to  match
     the  start  and end of the subject in both modes, and if all
     branches of a pattern start with \A is it  always  anchored,
     whether <link linkend="pcre.pattern.modifiers">PCRE_MULTILINE</link>  is set or not.
     </literallayout>
    </refsect2>

    <refsect2 id="regexp.reference.dot">
     <title>FULL STOP</title>
     <literallayout>
     Outside a character class, a dot in the pattern matches  any
     one  character  in  the  subject,  including  a non-printing
     character, but not (by default) newline.  If the <link linkend="pcre.pattern.modifiers">PCRE_DOTALL</link>
     option  is  set,  then dots match newlines as well. The han-
     dling of dot is entirely independent of the handling of cir-
     cumflex  and  dollar,  the only relationship being that they
     both involve newline characters.  Dot has no special meaning
     in a character class.
     </literallayout>
    </refsect2>

    <refsect2 id="regexp.reference.squarebrackets">
     <title>Square brackets</title>
     <literallayout>
     An opening square bracket introduces a character class, ter-
     minated  by  a  closing  square  bracket.  A  closing square
     bracket on its own is  not  special.  If  a  closing  square
     bracket  is  required as a member of the class, it should be
     the first data character in the class (after an initial cir-
     cumflex, if present) or escaped with a backslash.

     A character class matches a single character in the subject;
     the  character  must  be in the set of characters defined by
     the class, unless the first character in the class is a cir-
     cumflex,  in which case the subject character must not be in
     the set defined by the class. If a  circumflex  is  actually
     required  as  a  member  of  the class, ensure it is not the
     first character, or escape it with a backslash.

     For example, the character class [aeiou] matches  any  lower
     case vowel, while [^aeiou] matches any character that is not
     a lower case vowel. Note that a circumflex is  just  a  con-
     venient  notation for specifying the characters which are in
     the class by enumerating those that are not. It  is  not  an
     assertion:  it  still  consumes a character from the subject
     string, and fails if the current pointer is at  the  end  of
     the string.

     When caseless matching  is  set,  any  letters  in  a  class
     represent  both their upper case and lower case versions, so
     for example, a caseless [aeiou] matches "A" as well as  "a",
     and  a caseless [^aeiou] does not match "A", whereas a case-
     ful version would.

     The newline character is never treated in any special way in
     character  classes,  whatever the setting of the <link linkend="pcre.pattern.modifiers">PCRE_DOTALL</link>
     or <link linkend="pcre.pattern.modifiers">PCRE_MULTILINE</link>  options is. A  class  such  as  [^a]  will
     always match a newline.

     The minus (hyphen) character can be used to specify a  range
     of  characters  in  a  character  class.  For example, [d-m]
     matches any letter between d and m, inclusive.  If  a  minus
     character  is required in a class, it must be escaped with a
     backslash or appear in a position where it cannot be  inter-
     preted as indicating a range, typically as the first or last
     character in the class.

     It is not possible to have the literal character "]" as  the
     end  character  of  a  range.  A  pattern such as [W-]46] is
     interpreted as a class of two characters ("W" and "-")  fol-
     lowed by a literal string "46]", so it would match "W46]" or
     "-46]". However, if the "]" is escaped with a  backslash  it
     is  interpreted  as  the end of range, so [W-\]46] is inter-
     preted as a single class containing a range followed by  two
     separate characters. The octal or hexadecimal representation
     of "]" can also be used to end a range.

     Ranges operate in ASCII collating sequence. They can also be
     used  for  characters  specified  numerically,  for  example
     [\000-\037]. If a range that includes letters is  used  when
     caseless  matching  is set, it matches the letters in either
     case. For example, [W-c] is equivalent  to  [][\^_`wxyzabc],
     matched  caselessly,  and  if  character tables for the "fr"
     locale are in use, [\xc8-\xcb] matches accented E characters
     in both cases.

     The character types \d, \D, \s, \S,  \w,  and  \W  may  also
     appear  in  a  character  class, and add the characters that
     they match to the class. For example, [\dABCDEF] matches any
     hexadecimal  digit.  A  circumflex  can conveniently be used
     with the upper case character types to specify a  more  res-
     tricted set of characters than the matching lower case type.
     For example, the class [^\W_] matches any letter  or  digit,
     but not underscore.

     All non-alphanumeric characters other than \,  -,  ^  (at  the
     start)  and  the  terminating ] are non-special in character
     classes, but it does no harm if they are escaped.
     </literallayout>
    </refsect2>

    <refsect2 id="regexp.reference.verticalbar">
     <title>Vertical bar</title>
     <literallayout>
     Vertical bar characters are  used  to  separate  alternative
     patterns. For example, the pattern

       gilbert|sullivan

     matches either "gilbert" or "sullivan". Any number of alternatives
     may  appear,  and an empty alternative is permitted
     (matching the empty string).   The  matching  process  tries
     each  alternative in turn, from left to right, and the first
     one that succeeds is used. If the alternatives are within  a
     subpattern  (defined  below),  "succeeds" means matching the
     rest of the main pattern as well as the alternative  in  the
     subpattern.
     </literallayout>
    </refsect2>

    <refsect2 id="regexp.reference.internal-options">
     <title>Internal option setting</title>
     <literallayout>
     The settings of <link linkend="pcre.pattern.modifiers">PCRE_CASELESS</link> ,
     <link linkend="pcre.pattern.modifiers">PCRE_MULTILINE</link> ,
     <link linkend="pcre.pattern.modifiers">PCRE_DOTALL</link> ,
     and  <link linkend="pcre.pattern.modifiers">PCRE_EXTENDED</link>  can be changed from within the pattern by
     a sequence of Perl option letters enclosed between "(?"  and
     ")". The option letters are

       i  for <link linkend="pcre.pattern.modifiers">PCRE_CASELESS</link>
       m  for <link linkend="pcre.pattern.modifiers">PCRE_MULTILINE</link>
       s  for <link linkend="pcre.pattern.modifiers">PCRE_DOTALL</link>
       x  for <link linkend="pcre.pattern.modifiers">PCRE_EXTENDED</link>

     For example, (?im) sets caseless, multiline matching. It  is
     also possible to unset these options by preceding the letter
     with a hyphen, and a combined setting and unsetting such  as
     (?im-sx),  which sets <link linkend="pcre.pattern.modifiers">PCRE_CASELESS</link>  and <link linkend="pcre.pattern.modifiers">PCRE_MULTILINE</link>  while
     unsetting <link linkend="pcre.pattern.modifiers">PCRE_DOTALL</link>  and <link linkend="pcre.pattern.modifiers">PCRE_EXTENDED</link> , is also  permitted.
     If  a  letter  appears both before and after the hyphen, the
     option is unset.

     The scope of these option changes depends on  where  in  the
     pattern  the  setting  occurs. For settings that are outside
     any subpattern (defined below), the effect is the same as if
     the  options were set or unset at the start of matching. The
     following patterns all behave in exactly the same way:

       (?i)abc
       a(?i)bc
       ab(?i)c
       abc(?i)

     which in turn is the same as compiling the pattern abc  with
     <link linkend="pcre.pattern.modifiers">PCRE_CASELESS</link> set.
     In  other words, such "top level" settings apply to the whole
     pattern  (unless  there  are  other changes  inside subpatterns).
     If there is more than one setting of the same option at top level,
     the rightmost  setting is used.

     If an option change occurs inside a subpattern,  the  effect
     is  different.  This is a change of behaviour in Perl 5.005.
     An option change inside a subpattern affects only that  part
     of the subpattern that follows it, so

       (a(?i)b)c

     matches  abc  and  aBc  and  no  other   strings   (assuming
     <link linkend="pcre.pattern.modifiers">PCRE_CASELESS</link>   is  not used).  By this means, options can be
     made to have different settings in different  parts  of  the
     pattern.  Any  changes  made  in one alternative do carry on
     into subsequent branches within  the  same  subpattern.  For
     example,

       (a(?i)b|c)

     matches "ab", "aB", "c", and "C", even though when  matching
     "C" the first branch is abandoned before the option setting.
     This is because the effects of  option  settings  happen  at
     compile  time. There would be some very weird behaviour otherwise.

     The PCRE-specific options <link linkend="pcre.pattern.modifiers">PCRE_UNGREEDY</link>  and
     <link linkend="pcre.pattern.modifiers">PCRE_EXTRA</link>   can
     be changed in the same way as the Perl-compatible options by
     using the characters U and X  respectively.  The  (?X)  flag
     setting  is  special in that it must always occur earlier in
     the pattern than any of the additional features it turns on,
     even when it is at top level. It is best put at the start.
     </literallayout>
    </refsect2>

    <refsect2 id="regexp.reference.subpatterns">
     <title>subpatterns</title>
     <literallayout>
     Subpatterns are delimited by parentheses  (round  brackets),
     which can be nested.  Marking part of a pattern as a subpattern
     does two things:

     1. It localizes a set of alternatives. For example, the pat-
     tern

       cat(aract|erpillar|)

     matches one of the words "cat",  "cataract",  or  "caterpillar".
     Without  the  parentheses, it would match "cataract",
     "erpillar" or the empty string.

     2. It sets up the subpattern as a capturing  subpattern  (as
     defined  above).   When the whole pattern matches, that portion
     of the subject string that matched  the  subpattern  is
     passed  back  to  the  caller  via  the  <emphasis>ovector</emphasis>
     argument of
     <function>pcre_exec</function>. Opening parentheses are counted
     from  left  to right (starting from 1) to obtain the numbers of the
     capturing subpatterns.

     For example, if the string "the red king" is matched against
     the pattern

       the ((red|white) (king|queen))

     the captured substrings are "red king", "red",  and  "king",
     and are numbered 1, 2, and 3.

     The fact that plain parentheses fulfil two functions is  not
     always  helpful.  There are often times when a grouping subpattern
     is required without a capturing requirement.  If  an
     opening parenthesis is followed by "?:", the subpattern does
     not do any capturing, and is not counted when computing  the
     number of any subsequent capturing subpatterns. For example,
     if the string "the  white  queen"  is  matched  against  the
     pattern

       the ((?:red|white) (king|queen))

     the captured substrings are "white queen" and  "queen",  and
     are  numbered  1  and 2. The maximum number of captured substrings
     is 99, and the maximum number  of  all  subpatterns,
     both capturing and non-capturing, is 200.

     As a  convenient  shorthand,  if  any  option  settings  are
     required  at  the  start  of a non-capturing subpattern, the
     option letters may appear between the "?" and the ":".  Thus
     the two patterns

       (?i:saturday|sunday)
       (?:(?i)saturday|sunday)

     match exactly the same set of strings.  Because  alternative
     branches  are  tried from left to right, and options are not
     reset until the end of the subpattern is reached, an  option
     setting  in  one  branch does affect subsequent branches, so
     the above patterns match "SUNDAY" as well as "Saturday".
     </literallayout>
    </refsect2>

    <refsect2 id="regexp.reference.repetition">
     <title>Repetition</title>
     <literallayout>
     Repetition is specified by quantifiers, which can follow any
     of the following items:

       a single character, possibly escaped
       the . metacharacter
       a character class
       a back reference (see next section)
       a parenthesized subpattern (unless it is  an  assertion  -
     see below)

     The general repetition quantifier specifies  a  minimum  and
     maximum  number  of  permitted  matches,  by  giving the two
     numbers in curly brackets (braces), separated  by  a  comma.
     The  numbers  must be less than 65536, and the first must be
     less than or equal to the second. For example:

       z{2,4}

     matches "zz", "zzz", or "zzzz". A closing brace on  its  own
     is not a special character. If the second number is omitted,
     but the comma is present, there is no upper  limit;  if  the
     second number and the comma are both omitted, the quantifier
     specifies an exact number of required matches. Thus

       [aeiou]{3,}

     matches at least 3 successive vowels,  but  may  match  many
     more, while

       \d{8}

     matches exactly 8 digits.  An  opening  curly  bracket  that
     appears  in a position where a quantifier is not allowed, or
     one that does not match the syntax of a quantifier, is taken
     as  a literal character. For example, {,6} is not a quantifier,
     but a literal string of four characters.

     The quantifier {0} is permitted, causing the  expression  to
     behave  as  if the previous item and the quantifier were not
     present.

     For convenience (and  historical  compatibility)  the  three
     most common quantifiers have single-character abbreviations:

       *    is equivalent to {0,}
       +    is equivalent to {1,}
       ?    is equivalent to {0,1}

     It is possible to construct infinite loops  by  following  a
     subpattern  that  can  match no characters with a quantifier
     that has no upper limit, for example:

       (a?)*

     Earlier versions of Perl and PCRE used to give an  error  at
     compile  time  for such patterns. However, because there are
     cases where this  can  be  useful,  such  patterns  are  now
     accepted,  but  if  any repetition of the subpattern does in
     fact match no characters, the loop is forcibly broken.

     By default, the quantifiers  are  "greedy",  that  is,  they
     match  as much as possible (up to the maximum number of permitted
     times), without causing the rest of  the  pattern  to
     fail. The classic example of where this gives problems is in
     trying to match comments in C programs. These appear between
     the  sequences /* and */ and within the sequence, individual
     * and / characters may appear. An attempt to  match  C  comments
     by applying the pattern

       /\*.*\*/

     to the string

       /* first command */  not comment  /* second comment */

     fails, because it matches  the  entire  string  due  to  the
     greediness of the .*  item.

     However, if a quantifier is followed  by  a  question  mark,
     then it ceases to be greedy, and instead matches the minimum
     number of times possible, so the pattern

       /\*.*?\*/

     does the right thing with the C comments. The meaning of the
     various  quantifiers is not otherwise changed, just the preferred
     number of matches.  Do not confuse this use of  ques-
     tion  mark  with  its  use as a quantifier in its own right.
     Because it has two uses, it can sometimes appear doubled, as
     in

       \d??\d

     which matches one digit by preference, but can match two  if
     that is the only way the rest of the pattern matches.

     If the <link linkend="pcre.pattern.modifiers">PCRE_UNGREEDY</link>  option is set (an option which  is  not
     available  in  Perl)  then the quantifiers are not greedy by
     default, but individual ones can be made greedy by following
     them  with  a  question mark. In other words, it inverts the
     default behaviour.

     When a parenthesized subpattern is quantified with a minimum
     repeat  count  that is greater than 1 or with a limited maximum,
     more store is required for the  compiled  pattern,  in
     proportion to the size of the minimum or maximum.

     If a pattern starts with .* or  .{0,}  and  the  <link linkend="pcre.pattern.modifiers">PCRE_DOTALL</link>
     option (equivalent to Perl's /s) is set, thus allowing the .
     to match newlines, then the pattern is implicitly  anchored,
     because whatever follows will be tried against every character
     position in the subject string, so there is no point  in
     retrying  the overall match at any position after the first.
     PCRE treats such a pattern as though it were preceded by \A.
     In  cases where it is known that the subject string contains
     no newlines, it is worth setting <link linkend="pcre.pattern.modifiers">PCRE_DOTALL</link>  when  the  pattern begins with .* in order to
     obtain this optimization, or
     alternatively using ^ to indicate anchoring explicitly.

     When a capturing subpattern is repeated, the value  captured
     is the substring that matched the final iteration. For example, after

       (tweedle[dume]{3}\s*)+

     has matched "tweedledum tweedledee" the value  of  the  captured
     substring  is  "tweedledee".  However,  if  there are
     nested capturing  subpatterns,  the  corresponding  captured
     values  may  have been set in previous iterations. For example,
     after

       /(a|(b))+/

     matches "aba" the value of the second captured substring  is
     "b".
     </literallayout>
    </refsect2>

    <refsect2 id="regexp.reference.back-references">
     <title>BACK REFERENCES</title>
     <literallayout>
     Outside a character class, a backslash followed by  a  digit
     greater  than  0  (and  possibly  further  digits) is a back
     reference to a capturing subpattern  earlier  (i.e.  to  its
     left)  in  the  pattern,  provided there have been that many
     previous capturing left parentheses.

     However, if the decimal number following  the  backslash  is
     less  than  10,  it is always taken as a back reference, and
     causes an error only if there are not  that  many  capturing
     left  parentheses in the entire pattern. In other words, the
     parentheses that are referenced need not be to the  left  of
     the  reference  for  numbers  less  than 10. See the section
     entitled "Backslash" above for further details of  the  handling
     of digits following a backslash.

     A back reference matches whatever actually matched the  capturing
     subpattern in the current subject string, rather than
     anything matching the subpattern itself. So the pattern

       (sens|respons)e and \1ibility

     matches "sense and sensibility" and "response and  responsibility",
     but  not  "sense  and  responsibility". If caseful
     matching is in force at the time of the back reference, then
     the case of letters is relevant. For example,

       ((?i)rah)\s+\1

     matches "rah rah" and "RAH RAH", but  not  "RAH  rah",  even
     though  the  original  capturing subpattern is matched caselessly.

     There may be more than one back reference to the  same  subpattern.
     If  a  subpattern  has not actually been used in a
     particular match, then any  back  references  to  it  always
     fail. For example, the pattern

       (a|(bc))\2

     always fails if it starts to match  "a"  rather  than  "bc".
     Because  there  may  be up to 99 back references, all digits
     following the backslash are taken as  part  of  a  potential
     back reference number. If the pattern continues with a digit
     character, then some delimiter must be used to terminate the
     back reference. If the <link linkend="pcre.pattern.modifiers">PCRE_EXTENDED</link>  option is set, this can
     be whitespace.  Otherwise an empty comment can be used.

     A back reference that occurs inside the parentheses to which
     it  refers  fails when the subpattern is first used, so, for
     example, (a\1) never matches.  However, such references  can
     be useful inside repeated subpatterns. For example, the pattern

       (a|b\1)+

     matches any number of "a"s and also "aba", "ababaa" etc.  At
     each iteration of the subpattern, the back reference matches
     the character string corresponding to  the  previous  iteration.
     In order for this to work, the pattern must be such
     that the first iteration does not need  to  match  the  back
     reference.  This  can  be  done using alternation, as in the
     example above, or by a quantifier with a minimum of zero.
     </literallayout>
    </refsect2>

    <refsect2 id="regexp.reference.assertions">
     <title>Assertions</title>
     <literallayout>
     An assertion is  a  test  on  the  characters  following  or
     preceding  the current matching point that does not actually
     consume any characters. The simple assertions coded  as  \b,
     \B,  \A,  \Z,  \z, ^ and $ are described above. More complicated
     assertions are coded as  subpatterns.  There  are  two
     kinds:  those that look ahead of the current position in the
     subject string, and those that look behind it.

     An assertion subpattern is matched in the normal way, except
     that  it  does not cause the current matching position to be
     changed. Lookahead assertions start with  (?=  for  positive
     assertions and (?! for negative assertions. For example,

       \w+(?=;)

     matches a word followed by a semicolon, but does not include
     the semicolon in the match, and

       foo(?!bar)

     matches any occurrence of "foo"  that  is  not  followed  by
     "bar". Note that the apparently similar pattern

       (?!foo)bar

     does not find an occurrence of "bar"  that  is  preceded  by
     something other than "foo"; it finds any occurrence of "bar"
     whatsoever, because the assertion  (?!foo)  is  always  &true;
     when  the  next  three  characters  are  "bar". A lookbehind
     assertion is needed to achieve this effect.

     Lookbehind assertions start with (?&lt;=  for  positive  assertions
     and (?&lt;! for negative assertions. For example,

       (?&lt;!foo)bar

     does find an occurrence of "bar" that  is  not  preceded  by
     "foo". The contents of a lookbehind assertion are restricted
     such that all the strings  it  matches  must  have  a  fixed
     length.  However, if there are several alternatives, they do
     not all have to have the same fixed length. Thus

       (?&lt;=bullock|donkey)

     is permitted, but

       (?&lt;!dogs?|cats?)

     causes an error at compile time. Branches  that  match  different
     length strings are permitted only at the top level of
     a lookbehind assertion. This is an extension  compared  with
     Perl  5.005,  which  requires all branches to match the same
     length of string. An assertion such as

       (?&lt;=ab(c|de))

     is not permitted, because its single  top-level  branch  can
     match two different lengths, but it is acceptable if rewritten
     to use two top-level branches:

       (?&lt;=abc|abde)

     The implementation of lookbehind  assertions  is,  for  each
     alternative,  to  temporarily move the current position back
     by the fixed width and then  try  to  match.  If  there  are
     insufficient  characters  before  the  current position, the
     match is deemed to fail.  Lookbehinds  in  conjunction  with
     once-only  subpatterns can be particularly useful for matching
     at the ends of strings; an example is given at  the  end
     of the section on once-only subpatterns.

     Several assertions (of any sort) may  occur  in  succession.
     For example,

       (?&lt;=\d{3})(?&lt;!999)foo

     matches "foo" preceded by three digits that are  not  "999".
     Notice  that each of the assertions is applied independently
     at the same point in the subject string. First  there  is  a
     check  that  the  previous  three characters are all digits,
     then there is a check that the same three characters are not
     "999".   This  pattern  does not match "foo" preceded by six
     characters, the first of which are digits and the last three
     of  which  are  not  "999".  For  example,  it doesn't match
     "123abcfoo". A pattern to do that is

       (?&lt;=\d{3}...)(?&lt;!999)foo

     This time the first assertion looks  at  the  preceding  six
     characters,  checking  that  the first three are digits, and
     then the second assertion checks that  the  preceding  three
     characters are not "999".

     Assertions can be nested in any combination. For example,

       (?&lt;=(?&lt;!foo)bar)baz

     matches an occurrence of "baz" that  is  preceded  by  "bar"
     which in turn is not preceded by "foo", while

       (?&lt;=\d{3}(?!999)...)foo

     is another pattern which matches  "foo"  preceded  by  three
     digits and any three characters that are not "999".

     Assertion subpatterns are not capturing subpatterns, and may
     not  be  repeated,  because  it makes no sense to assert the
     same thing several times. If any kind of assertion  contains
     capturing  subpatterns  within it, these are counted for the
     purposes of numbering the capturing subpatterns in the whole
     pattern.   However,  substring capturing is carried out only
     for positive assertions, because it does not make sense  for
     negative assertions.

     Assertions count towards the maximum  of  200  parenthesized
     subpatterns.
     </literallayout>
    </refsect2>

    <refsect2 id="regexp.reference.onlyonce">
     <title>Once-only subpatterns</title>
     <literallayout>
     With both maximizing and minimizing repetition,  failure  of
     what  follows  normally  causes  the repeated item to be re-
     evaluated to see if a different number of repeats allows the
     rest  of  the  pattern  to  match. Sometimes it is useful to
     prevent this, either to change the nature of the  match,  or
     to  cause  it fail earlier than it otherwise might, when the
     author of the pattern knows there is no  point  in  carrying
     on.

     Consider, for example, the pattern \d+foo  when  applied  to
     the subject line

       123456bar

     After matching all 6 digits and then failing to match "foo",
     the normal action of the matcher is to try again with only 5
     digits matching the \d+ item, and then with 4,  and  so  on,
     before ultimately failing. Once-only subpatterns provide the
     means for specifying that once a portion of the pattern  has
     matched,  it  is  not to be re-evaluated in this way, so the
     matcher would give up immediately on failing to match  "foo"
     the  first  time.  The  notation  is another kind of special
     parenthesis, starting with (?&gt; as in this example:

       (?&gt;\d+)bar

     This kind of parenthesis "locks up" the  part of the pattern
     it  contains once it has matched, and a failure further into
     the pattern is prevented from backtracking  into  it.  Back-
     tracking  past  it to previous items, however, works as normal.

     An alternative description is that a subpattern of this type
     matches  the  string  of  characters that an identical standalone
     pattern would match, if anchored at the current point
     in the subject string.

     Once-only subpatterns are not capturing subpatterns.  Simple
     cases  such as the above example can be thought of as a maximizing
     repeat that must  swallow  everything  it  can.  So,
     while both \d+ and \d+? are prepared to adjust the number of
     digits they match in order to make the rest of  the  pattern
     match, (?&gt;\d+) can only match an entire sequence of digits.

     This construction can of course contain arbitrarily  complicated
     subpatterns, and it can be nested.

     Once-only subpatterns can be used in conjunction with  look-
     behind  assertions  to specify efficient matching at the end
     of the subject string. Consider a simple pattern such as

       abcd$

     when applied to a long string which does not match.  Because
     matching  proceeds  from  left  to right, PCRE will look for
     each "a" in the subject and then see if what follows matches
     the rest of the pattern. If the pattern is specified as

       ^.*abcd$

     then the initial .* matches the entire string at first,  but
     when  this  fails  (because  there  is no following "a"), it
     backtracks to match all but the last character, then all but
     the  last  two  characters, and so on. Once again the search
     for "a" covers the entire string, from right to left, so  we
     are no better off. However, if the pattern is written as

       ^(?>.*)(?&lt;=abcd)

     then there can be no backtracking for the .*  item;  it  can
     match  only  the  entire  string.  The subsequent lookbehind
     assertion does a single test on the last four characters. If
     it  fails,  the  match  fails immediately. For long strings,
     this approach makes a significant difference to the processing time.

     When a pattern contains an unlimited repeat inside a subpattern
     that can itself be repeated an unlimited number of
     times, the use of a once-only subpattern is the only way  to
     avoid  some  failing matches taking a very long time indeed.
     The pattern

       (\D+|&lt;\d+>)*[!?]

     matches an unlimited number of substrings that  either  consist
     of  non-digits,  or digits enclosed in &lt;>, followed by
     either ! or ?. When it matches, it runs quickly. However, if
     it is applied to

       aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa

     it takes a long  time  before  reporting  failure.  This  is
     because the string can be divided between the two repeats in
     a large number of ways, and all have to be tried. (The example
     used  [!?]  rather  than a single character at the end,
     because both PCRE and Perl have an optimization that  allows
     for  fast  failure  when  a  single  character is used. They
     remember the last single character that is  required  for  a
     match,  and  fail early if it is not present in the string.)
     If the pattern is changed to

       ((?>\D+)|&lt;\d+>)*[!?]

     sequences of non-digits cannot be broken, and  failure  happens quickly.
     </literallayout>
    </refsect2>

    <refsect2 id="regexp.reference.conditional">
     <title>Conditional subpatterns</title>
     <literallayout>
     It is possible to cause the matching process to obey a  subpattern
     conditionally  or to choose between two alternative
     subpatterns, depending on the result  of  an  assertion,  or
     whether  a previous capturing subpattern matched or not. The
     two possible forms of conditional subpattern are

       (?(condition)yes-pattern)
       (?(condition)yes-pattern|no-pattern)

     If the condition is satisfied, the yes-pattern is used; otherwise
     the  no-pattern  (if  present) is used. If there are
     more than two alternatives in the subpattern, a compile-time
     error occurs.

     There are two kinds of condition. If the  text  between  the
     parentheses  consists  of  a  sequence  of  digits, then the
     condition is satisfied if the capturing subpattern  of  that
     number  has  previously matched. Consider the following pattern,
     which contains non-significant white space to make  it
     more  readable  (assume  the  <link linkend="pcre.pattern.modifiers">PCRE_EXTENDED</link>   option)  and to
     divide it into three parts for ease of discussion:

       ( \( )?    [^()]+    (?(1) \) )

     The first part matches an optional opening parenthesis,  and
     if  that character is present, sets it as the first captured
     substring. The second part matches one  or  more  characters
     that  are  not  parentheses. The third part is a conditional
     subpattern that tests whether the first set  of  parentheses
     matched  or  not.  If  they did, that is, if subject started
     with an opening parenthesis, the condition is &true;,  and  so
     the  yes-pattern  is  executed  and a closing parenthesis is
     required. Otherwise, since no-pattern is  not  present,  the
     subpattern  matches  nothing.  In  other words, this pattern
     matches a sequence of non-parentheses,  optionally  enclosed
     in parentheses.

     If the condition is not a sequence of digits, it must be  an
     assertion.  This  may be a positive or negative lookahead or
     lookbehind assertion. Consider this pattern, again  containing
     non-significant  white space, and with the two alternatives on
     the second line:

       (?(?=[^a-z]*[a-z])
       \d{2}-[a-z]{3}-\d{2}  |  \d{2}-\d{2}-\d{2} )

     The condition is a positive lookahead assertion that matches
     an optional sequence of non-letters followed by a letter. In
     other words, it tests for  the  presence  of  at  least  one
     letter  in the subject. If a letter is found, the subject is
     matched against  the  first  alternative;  otherwise  it  is
     matched  against the second. This pattern matches strings in
     one of the two forms dd-aaa-dd or dd-dd-dd,  where  aaa  are
     letters and dd are digits.
     </literallayout>
    </refsect2>

    <refsect2 id="regexp.reference.comments">
     <title>Comments</title>
     <literallayout>
     The  sequence  (?#  marks  the  start  of  a  comment  which
     continues   up  to  the  next  closing  parenthesis.  Nested
     parentheses are not permitted. The characters that make up a
     comment play no part in the pattern matching at all.

     If the <link linkend="pcre.pattern.modifiers">PCRE_EXTENDED</link>  option is set, an unescaped # character
     outside  a character class introduces a comment that contin-
     ues up to the next newline character in the pattern.
     </literallayout>
    </refsect2>

    <refsect2 id="regexp.reference.recursive">
     <title>Recursive patterns</title>
     <literallayout>
     Consider the problem of matching a  string  in  parentheses,
     allowing  for  unlimited nested parentheses. Without the use
     of recursion, the best that can be done is to use a  pattern
     that  matches  up  to some fixed depth of nesting. It is not
     possible to handle an arbitrary nesting depth. Perl 5.6  has
     provided   an  experimental  facility  that  allows  regular
     expressions to recurse (amongst other things).  The  special
     item (?R) is  provided for  the specific  case of recursion.
     This PCRE  pattern  solves the  parentheses  problem (assume
     the <link linkend="pcre.pattern.modifiers">PCRE_EXTENDED</link>
     option is set so that white space is
     ignored):

       \( ( (?>[^()]+) | (?R) )* \)

     First it matches an opening parenthesis. Then it matches any
     number  of substrings which can either be a sequence of non-
     parentheses, or a recursive  match  of  the  pattern  itself
     (i.e. a correctly parenthesized substring). Finally there is
     a closing parenthesis.

     This particular example pattern  contains  nested  unlimited
     repeats, and so the use of a once-only subpattern for matching
     strings of non-parentheses is  important  when  applying
     the  pattern to strings that do not match. For example, when
     it is applied to

       (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa()

     it yields "no match" quickly. However, if a  once-only  subpattern
     is  not  used,  the match runs for a very long time
     indeed because there are so many different ways the + and  *
     repeats  can carve up the subject, and all have to be tested
     before failure can be reported.

     The values set for any capturing subpatterns are those  from
     the outermost level of the recursion at which the subpattern
     value is set. If the pattern above is matched against

       (ab(cd)ef)

     the value for the capturing parentheses is  "ef",  which  is
     the  last  value  taken  on  at the top level. If additional
     parentheses are added, giving

       \( ( ( (?>[^()]+) | (?R) )* ) \)
          ^                        ^
          ^                        ^ then the string they capture
     is "ab(cd)ef", the contents of the top level parentheses. If
     there are more than 15 capturing parentheses in  a  pattern,
     PCRE  has  to  obtain  extra  memory  to store data during a
     recursion, which it does by using  pcre_malloc,  freeing  it
     via  pcre_free  afterwards. If no memory can be obtained, it
     saves data for the first 15 capturing parentheses  only,  as
     there is no way to give an out-of-memory error from within a
     recursion.
     </literallayout>
    </refsect2>

    <refsect2 id="regexp.reference.performances">
     <title>Performances</title>
     <literallayout>
     Certain items that may appear in patterns are more efficient
     than  others.  It is more efficient to use a character class
     like [aeiou] than a set of alternatives such as (a|e|i|o|u).
     In  general,  the  simplest  construction  that provides the
     required behaviour is usually the  most  efficient.  Jeffrey
     Friedl's  book contains a lot of discussion about optimizing
     regular expressions for efficient performance.

     When a pattern begins with .* and the <link linkend="pcre.pattern.modifiers">PCRE_DOTALL</link>  option  is
     set,  the  pattern  is implicitly anchored by PCRE, since it
     can match only at the start of a subject string. However, if
     <link linkend="pcre.pattern.modifiers">PCRE_DOTALL</link>   is not set, PCRE cannot make this optimization,
     because the . metacharacter does not then match  a  newline,
     and if the subject string contains newlines, the pattern may
     match from the character immediately following one  of  them
     instead of from the very start. For example, the pattern

       (.*) second

     matches the subject "first\nand second" (where \n stands for
     a newline character) with the first captured substring being
     "and". In order to do this, PCRE  has  to  retry  the  match
     starting after every newline in the subject.

     If you are using such a pattern with subject strings that do
     not  contain  newlines,  the best performance is obtained by
     setting <link linkend="pcre.pattern.modifiers">PCRE_DOTALL</link> , or starting the  pattern  with  ^.*  to
     indicate  explicit anchoring. That saves PCRE from having to
     scan along the subject looking for a newline to restart at.

     Beware of patterns that contain nested  indefinite  repeats.
     These  can  take a long time to run when applied to a string
     that does not match. Consider the pattern fragment

       (a+)*

     This can match "aaaa" in 33 different ways, and this  number
     increases  very  rapidly  as  the string gets longer. (The *
     repeat can match 0, 1, 2, 3, or 4 times,  and  for  each  of
     those  cases other than 0, the + repeats can match different
     numbers of times.) When the remainder of the pattern is such
     that  the entire match is going to fail, PCRE has in principle
     to try every possible variation, and this  can  take  an
     extremely long time.

     An optimization catches some of the more simple  cases  such
     as

       (a+)*b

     where a literal character follows. Before embarking  on  the
     standard matching procedure, PCRE checks that there is a "b"
     later in the subject string, and if there is not,  it  fails
     the  match  immediately. However, when there is no following
     literal this optimization cannot be used. You  can  see  the
     difference by comparing the behaviour of

       (a+)*\d

     with the pattern above. The former gives  a  failure  almost
     instantly  when  applied  to a whole line of "a" characters,
     whereas the latter takes an appreciable  time  with  strings
     longer than about 20 characters.
     </literallayout>
    </refsect2>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
