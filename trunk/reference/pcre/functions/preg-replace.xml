<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- $Author$ -->
<!-- EN-Revision: n/a Maintainer: dallas Status: ready -->
  <refentry xml:id="function.preg-replace" xmlns="http://docbook.org/ns/docbook">
   <refnamediv>
    <refname>preg_replace</refname>
    <refpurpose>执行正则表达式的搜索和替换</refpurpose>
   </refnamediv>
   <refsect1>
    <title>说明</title>
    <methodsynopsis>
     <type>mixed</type><methodname>preg_replace</methodname>
     <methodparam><type>mixed</type><parameter>pattern</parameter></methodparam>
     <methodparam><type>mixed</type><parameter>replacement</parameter></methodparam>
     <methodparam><type>mixed</type><parameter>subject</parameter></methodparam>
     <methodparam choice="opt"><type>int</type><parameter>limit</parameter></methodparam>
    </methodsynopsis>
    <para>
     在
     <parameter>subject</parameter> 中搜索
     <parameter>pattern</parameter> 模式的匹配项并替换为
     <parameter>replacement</parameter>。如果指定了
     <parameter>limit</parameter>，则仅替换
     <parameter>limit</parameter> 个匹配，如果省略
     <parameter>limit</parameter> 或者其值为 -1，则所有的匹配项都会被替换。
    </para>
    <para>
     <parameter>replacement</parameter> 可以包含
     <literal>\\<replaceable>n</replaceable></literal>
     形式或（自 PHP 4.0.4 起）<literal><replaceable>$n</replaceable></literal>
     形式的逆向引用，首选使用后者。每个此种引用将被替换为与第
     <replaceable>n</replaceable>
     个被捕获的括号内的子模式所匹配的文本。<replaceable>n</replaceable>
     可以从 0 到 99，其中
     <literal>\\0</literal> 或 <literal>$0</literal>
     指的是被整个模式所匹配的文本。对左圆括号从左到右计数（从 1 开始）以取得子模式的数目。
    </para>
    <para>
     对替换模式在一个逆向引用后面紧接着一个数字时（即：紧接在一个匹配的模式后面的数字），不能使用熟悉的
     <literal>\\1</literal> 符号来表示逆向引用。举例说
     <literal>\\11</literal>，将会使
     <function>preg_replace</function> 搞不清楚是想要一个
     <literal>\\1</literal> 的逆向引用后面跟着一个数字
     <literal>1</literal> 还是一个
     <literal>\\11</literal> 的逆向引用。本例中的解决方法是使用
     <literal>\${1}1</literal>。这会形成一个隔离的
     <literal>$1</literal> 逆向引用，而使另一个
     <literal>1</literal> 只是单纯的文字。
    </para>
    <para>
     <example>
      <title>逆向引用后面紧接着数字的用法</title>
      <programlisting role="php">
<![CDATA[
<?php
$string = "April 15, 2003";
$pattern = "/(\w+) (\d+), (\d+)/i";
$replacement = "\${1}1,\$3";
print preg_replace($pattern, $replacement, $string);

/* Output
   ======

April1,2003

 */
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     如果搜索到匹配项，则会返回被替换后的
     <parameter>subject</parameter>，否则返回原来不变的
     <parameter>subject</parameter>。
    </para>
    <para>
     <function>preg_replace</function> 的每个参数（除了
     <parameter>limit</parameter>）都可以是一个数组。如果
     <parameter>pattern</parameter> 和
     <parameter>replacement</parameter> 都是数组，将以其键名在数组中出现的顺序来进行处理。这<emphasis>不一定</emphasis>和索引的数字顺序相同。如果使用索引来标识哪个
     <parameter>pattern</parameter> 将被哪个
     <parameter>replacement</parameter> 来替换，应该在调用
     <function>preg_replace</function> 之前用
     <function>ksort</function> 对数组进行排序。
    </para>
    <para>
     <example>
      <title>在 <function>preg_replace</function> 中使用索引数组</title>
      <programlisting role="php">
<![CDATA[
<?php
$string = "The quick brown fox jumped over the lazy dog.";

$patterns[0] = "/quick/";
$patterns[1] = "/brown/";
$patterns[2] = "/fox/";

$replacements[2] = "bear";
$replacements[1] = "black";
$replacements[0] = "slow";

print preg_replace($patterns, $replacements, $string);

/* Output
   ======

The bear black slow jumped over the lazy dog.

*/

/* By ksorting patterns and replacements,
   we should get what we wanted. */

ksort($patterns);
ksort($replacements);

print preg_replace($patterns, $replacements, $string);

/* Output
   ======

The slow black bear jumped over the lazy dog.

*/

?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     如果
     <parameter>subject</parameter> 是个数组，则会对
     <parameter>subject</parameter> 中的每个项目执行搜索和替换，并返回一个数组。
    </para>
    <para>
     如果
     <parameter>pattern</parameter> 和
     <parameter>replacement</parameter> 都是数组，则
     <function>preg_replace</function> 会依次从中分别取出值来对
     <parameter>subject</parameter> 进行搜索和替换。如果
     <parameter>replacement</parameter> 中的值比
     <parameter>pattern</parameter> 中的少，则用空字符串作为余下的替换值。如果
     <parameter>pattern</parameter> 是数组而
     <parameter>replacement</parameter> 是字符串，则对
     <parameter>pattern</parameter> 中的每个值都用此字符串作为替换值。反过来则没有意义了。
    </para>
    <para>
     <literal>/e</literal> 修正符使
     <function>preg_replace</function> 将
     <parameter>replacement</parameter> 参数当作
     PHP 代码（在适当的逆向引用替换完之后）。提示：要确保
     <parameter>replacement</parameter> 构成一个合法的
     PHP 代码字符串，否则
     PHP 会在报告在包含
     <function>preg_replace</function> 的行中出现语法解析错误。
    </para>
    <para>
     <example>
      <title>替换数个值</title>
      <programlisting role="php">
<![CDATA[
<?php
$patterns = array ("/(19|20)(\d{2})-(\d{1,2})-(\d{1,2})/",
                   "/^\s*{(\w+)}\s*=/");
$replace = array ("\\3/\\4/\\1\\2", "$\\1 =");
print preg_replace ($patterns, $replace, "{startDate} = 1999-5-27");
?>
]]>
      </programlisting>
      <para>
       本例将输出：
      </para>
      <screen>
<![CDATA[
$startDate = 5/27/1999
]]>
      </screen>
     </example>
    </para>
    <para>
     <example>
      <title>使用 /e 修正符</title>
      <programlisting role="php">
<![CDATA[
<?php
preg_replace ("/(<\/?)(\w+)([^>]*>)/e",
              "'\\1'.strtoupper('\\2').'\\3'",
              $html_body);
?>
]]>
      </programlisting>
      <para>
       这将使输入字符串中的所有 HTML 标记变成大写。
      </para>
     </example>
    </para>
    <para>
     <example>
      <title>将 HTML 转换成文本</title>
      <programlisting role="php">
<![CDATA[
<?php
// $document 应包含一个 HTML 文档。
// 本例将去掉 HTML 标记，javascript 代码
// 和空白字符。还会将一些通用的
// HTML 实体转换成相应的文本。

$search = array ("'<script[^>]*?>.*?</script>'si",  // 去掉 javascript
                 "'<[\/\!]*?[^<>]*?>'si",           // 去掉 HTML 标记
                 "'([\r\n])[\s]+'",                 // 去掉空白字符
                 "'&(quot|#34);'i",                 // 替换 HTML 实体
                 "'&(amp|#38);'i",
                 "'&(lt|#60);'i",
                 "'&(gt|#62);'i",
                 "'&(nbsp|#160);'i",
                 "'&(iexcl|#161);'i",
                 "'&(cent|#162);'i",
                 "'&(pound|#163);'i",
                 "'&(copy|#169);'i",
                 "'&#(\d+);'e");                    // 作为 PHP 代码运行

$replace = array ("",
                  "",
                  "\\1",
                  "\"",
                  "&",
                  "<",
                  ">",
                  " ",
                  chr(161),
                  chr(162),
                  chr(163),
                  chr(169),
                  "chr(\\1)");

$text = preg_replace ($search, $replace, $document);
?>
]]>
      </programlisting>
     </example>
    </para>
    <note>
     <para>
      <parameter>limit</parameter> 参数是 PHP 4.0.1pl2 之后加入的。
     </para>
    </note>
    <para>
     参见 <function>preg_match</function>，<function>preg_match_all</function>
     和 <function>preg_split</function>。
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
