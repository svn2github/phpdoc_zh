<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.4 $ -->
<!-- $Author: dallas $ -->
<!-- EN-Revision: 1.25 Maintainer: Avenger Status: ready -->
  <refentry id="function.header">
   <refnamediv>
    <refname>header</refname>
    <refpurpose>向浏览器发送一个 HTTP 头部信息</refpurpose>
   </refnamediv>
   <refsect1>
    <title>描述</title>
     <methodsynopsis>
      <type>void</type><methodname>header</methodname>
      <methodparam><type>string</type><parameter>string</parameter></methodparam>
      <methodparam choice="opt"><type>bool</type><parameter>replace</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>http_response_code</parameter></methodparam>
    <para>
     <function>header</function> 函数用来发送一个 <acronym>HTTP</acronym>
     头部信息到客户端的浏览器。有关 <acronym>HTTP</acronym> 头部信息的更多内容参见官方文档
     <ulink url="&url.rfc;2616">HTTP/1.1 specification</ulink>。
    </para>
    <para>
     可选参数 <parameter>replace</parameter>
     用来表示当出现两个相似的头部信息时，是替换前一个相同的头部信息还是增加一个相同的头部信息。默认为替换，如果你将其设为
     &false; 则可以多次发送相同的头部信息。例如:
    </para>
    <para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
header('WWW-Authenticate: Negotiate');
header('WWW-Authenticate: NTLM', false);
?>
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     第二个可选参数 <parameter>http_response_code</parameter> 表示 HTTP
     的头部信息的代码。(此参数在PHP 4.3.0 被加入。)
    </para>
    <para>
     头部信息的格式有两种形式。一种情况是以字符 “<literal>HTTP/</literal>” (不区分大小写)开头的，which will be used to figure out the HTTP status
     code to send。例如,如果你使用的 WEB 服务器是 Apache 的话，如果要制作一个找不到文章的错误处理页面
     (使用 <literal>ErrorDocument</literal> 指令)，你可能会需要用它来产生一些适当的状态代码。
    </para>
    <para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
header("HTTP/1.0 404 Not Found")
?>
]]>
      </programlisting>
     </informalexample>
    </para>
     <note>
      <para>
       HTTP 头部信息通常是首先被发送到客户端的，它并不管你的 <function>header</function>
       函数是否是在第一行。在通常的情况下The status may be overridden
       by calling <function>header</function> with a new status line
       at any time unless the HTTP headers have already been sent.
       除非 HTTP 头部信息已经被发送。
      </para>
     </note>
     <note>
      <para>
       在 PHP 3 中，此函数只在 PHP 以 Apache 的模块化运行的时候有效。你可以使用 <literal>Status</literal>
       来达到相同的效果。
       <informalexample>
        <programlisting role="php">
<![CDATA[
<?php
header("Status: 404 Not Found");
?>
]]>
        </programlisting>
       </informalexample>
      </para>
     </note>
    </para>
    <para>
    第二种特殊情况是以 "Location:" 开头的信息。它不只是简单的向浏览器发送一些头部信息，通常它会向浏览器发送出一个 <literal>REDIRECT</literal>
    (302) (跳转) 状态代码，除非一些类似于 <literal>3xx</literal> 的状态代码已经被发送。
    </para>
    <para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
header("Location: http://www.example.com/"); /* 重定向浏览器 */
exit;                 /* 确保重定时，后续代码不会被执行 */
?>
]]>
      </programlisting>
     </informalexample>
    </para>
    <note>
     <para>
      HTTP/1.1 标准需要一个绝对地址的 <acronym>URI</acronym> 做为
      <ulink url="&spec.http1.1;-sec14.html#sec14.30">Location:</ulink>
      的参数, 但有一些客户端支持虚拟的路径。你通常可以使用
      <literal>$_SERVER['HTTP_HOST']</literal>、<literal>$_SERVER['PHP_SELF']</literal>
      及 <function>dirname</function> 函数来自己获取所需要的绝对路径:
      <informalexample>
       <programlisting>
<![CDATA[
<?php
header("Location: http://".$_SERVER['HTTP_HOST']
                      .dirname($_SERVER['PHP_SELF'])
                      ."/".$relative_url);
?>
]]>
       </programlisting>
      </informalexample>
     </para>
    </note>
    <para>
     PHP 脚本通常是动态改变的。可有些客户端或一些代理服务器会把一些浏览过的内容给缓冲起来，这样您更新的脚本就不能被客户端及时的发现，你可以通过发送一些类似下面例子中的头部信息来禁止他们缓存你的网页。
     </para>
    <para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
// Date in the past
header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");

// always modified
header("Last-Modified: " . gmdate("D, d M Y H:i:s") . " GMT");

// HTTP/1.1
header("Cache-Control: no-store, no-cache, must-revalidate");

header("Cache-Control: post-check=0, pre-check=0", false);

// HTTP/1.0
header("Pragma: no-cache");
?>
]]>
      </programlisting>
     </informalexample>
    </para>
    <note>
     <para>
      你可能会发现即使你没有把上边的代码全部输出你的网页也没有被缓冲起来。这是因为一些用户在他们的浏览器的一些选项设置中设置了禁止缓存文件的选项。
     </para>
     <para>
      另外，当 session 在代码中被使用时，利用 <function>session_cache_limiter</function> 函数和
      <literal>session.cache_limiter</literal> 选项可以自动的产生相关的缓冲区。
     </para>
    </note>
    <para>
     要牢记 <function>header</function>
     要使用在任何网页输出前。包括一些非 HTML 标签和空行都不允许在其之前输出。在使用 <function>include</function>
     、<function>require</function> 函数或一些其它的文件存取类函数时，这是一个很常犯的错误。同样在一个单独的 PHP/HTML
     文件中这个错误也很普遍。
    </para>
    <para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
<html>
<?php
/* 这将产生一个错误，因为在调 header()
 * 之前已经输出了东西 */
header('Location: http://www.example.com/');
?>
]]>
      </programlisting>
     </informalexample>
    </para>
    <note>
     <para>
      在 PHP 4里，你可以通过一些输出缓冲函数来解决这个问题。这样做，你可以把所有的输出都缓冲到服务，直到你下命令发送它们。你可以在你的代码中使用 <function>ob_start</function> 及 <function>ob_end_flush</function>
      来实现这样的功能，或者通过修改你的 &php.ini; 中的 <literal>output_buffering</literal>
      选项来实现，也可以通过修改你的服务器配置文件来实现。
     </para>
    </note>
    <para>
     如果你想提示用户下载并保存一个文件，例如一个 PDF
     文件，你可以通过发送 <ulink url="&url.rfc;2183">Content-Disposition</ulink> 信息来使客户端机器弹出下载对话框来下载您需要处理的文件。
    </para>
    <para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
// 这样将会直接输出一个 PDF 文件
header('Content-type: application/pdf');

// 这样做就会提示下载 PDF 文件 downloaded.pdf
header('Content-Disposition: attachment; filename="downloaded.pdf"');

// 这是 original.pdf 的源文件
readfile('original.pdf');
?>
]]>
      </programlisting>
     </informalexample>
    </para>
    <note>
     <para>
      Microsoft Internet Explorer 4.01 中的一个漏洞使得该机制无法正常工作。在
      Microsoft Internet Explorer 5
      中这个漏洞依然存在，升级 Service Pack 2 及其以后版本中这个漏洞将不复存在。
     </para>
    </note>
    <note>
     <simpara>
      如果 PHP 运行在安全模式 (<link linkend="ini.safe-mode">safe mode</link>)
      下，当前使用者的标识号 (UID) 会附加到头部信息 <literal>WWW-Authenticate</literal>
      的 <literal>realm</literal> 部分一起发送。(可以用来做 HTTP 认证)。
     </simpara>
    </note>
    <para>
     参见 <function>headers_sent</function>,
     <function>setcookie</function>
     及 <link linkend="features.http-auth">HTTP authentication</link> 章节.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
