<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.8 $ -->
<!-- $Author: dallas $ -->
<!-- EN-Revision: 1.29 Maintainer: Avenger Status: ready -->
<!-- CREDITS: dallas -->
<refentry id="function.header">
 <refnamediv>
  <refname>header</refname>
  <refpurpose>发送一个原始 HTTP 标头</refpurpose>
 </refnamediv>
 <refsect1>
  <title>说明</title>
  <methodsynopsis>
   <type>void</type><methodname>header</methodname>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>replace</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>http_response_code</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>header</function> 函数用来发送一个原始 <acronym>HTTP</acronym>
   标头。有关 <acronym>HTTP</acronym> 标头的更多内容见
   <ulink url="&url.rfc;2616">HTTP/1.1 规范</ulink>。
  </para>
  <para>
   可选参数 <parameter>replace</parameter>
   指明是替换掉前一条类似的标头还是增加一条相同类型的标头。默认为替换，但如果将其设为
   &false; 则可以强制发送多个同类标头。例如:
  </para>
  <para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
header('WWW-Authenticate: Negotiate');
header('WWW-Authenticate: NTLM', false);
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  <para>
   第二个可选参数 <parameter>http_response_code</parameter> 强制将 HTTP
   响应代码设为指定值（此参数是 PHP 4.3.0 新加的）。
  </para>
  <para>
   有两种特殊的 header 调用。第一种是标头以字符串“<literal>HTTP/</literal>”（大小写不重要）开头的，可以用来确定要发送的
   HTTP 状态码。例如，如果配置了 Apache 用 PHP
   来处理找不到文件的错误处理请求（使用
   <literal>ErrorDocument</literal> 指令），需要确保脚本产生了正确的状态码。
  </para>
  <para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
header("HTTP/1.0 404 Not Found")
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  <note>
   <para>
    HTTP 状态码标头行总是第一个被发送到客户端，而并不管实际的
    <function>header</function> 调用是否是第一个。除非
    HTTP 标头已经发送出去，任何时候都可以通过用新的状态行调用
    <function>header</function> 函数来覆盖原先的。
   </para>
  </note>
  <para>
   第二种特殊情况是以“Location:”标头。它不只是把这个标头发送回浏览器，它还将一个
   <literal>REDIRECT</literal>（302）状态码返回给浏览器，除非之前已经发出了某个
   <literal>3xx</literal> 状态码。
  </para>
  <para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
header("Location: http://www.example.com/"); /* 重定向浏览器 */

/* 确保重定向后，后续代码不会被执行 */
exit;
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  <note>
   <para>
    HTTP/1.1 标准需要一个绝对地址的 <acronym>URI</acronym> 做为
    <ulink url="&spec.http1.1;-sec14.html#sec14.30">Location:</ulink>
    的参数, 但有一些客户端支持相对 URI。通常可以使用
    <literal>$_SERVER['HTTP_HOST']</literal>、<literal>$_SERVER['PHP_SELF']</literal>
    及 <function>dirname</function> 函数来自己从相对 URI 产生出绝对 URI：
    <informalexample>
     <programlisting>
<![CDATA[
<?php
/* 重定向到当前请求目录中的另一个页面 */
$host  = $_SERVER['HTTP_HOST'];
$uri   = rtrim(dirname($_SERVER['PHP_SELF']), '/\\');
$extra = 'mypage.php';
header("Location: http://$host$uri/$extra");
exit;
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </note>
  <note>
   <para>
    即使启用了
    <link linkend="ini.session.use-trans-sid">session.use_trans_sid</link>，Session
    ID 也不会随着 Location 头信息被传递。必须手工用 <constant>SID</constant>
    常量来传递。
   </para>
  </note>
  <para>
   PHP 脚本通常会产生一些动态内容，这些内容必须不被浏览器或代理服务器缓存。很多代理服务器和浏览器都可以被下面的方法禁止缓存：
  </para>
  <para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
header("Cache-Control: no-cache, must-revalidate"); // HTTP/1.1
header("Expires: Mon, 26 Jul 1997 05:00:00 GMT"); // 过去的时间
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  <note>
   <para>
    可能会发现即使不输出上面所有的代码，网页也没有被缓冲。用户有很多选项可以设置来改变浏览器的默认缓存行为。通过发送上述标头，应该可以覆盖任何可以导致脚本页面被缓存的设置。
   </para>
   <para>
    另外，当使用了 session 时，利用 <function>session_cache_limiter</function> 函数和
    <literal>session.cache_limiter</literal> 选项可以用来自动产生正确的缓存相关标头。
   </para>
  </note>
  <para>
   要记住 <function>header</function>
   必须在任何实际输出之前调用，不论是来自普通的 HTML 标记，空行或者
   PHP。有一个常见错误就是在通过
   <function>include</function>，<function>require</function>
   或一些其它的文件存取类函数读取代码时，有一些空格或者空行在调用
   <function>header</function> 之前被发送了出去。同样在一个单独的
   PHP/HTML 文件中这个错误也很普遍。
  </para>
  <para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<html>
<?php
/* 这将产生一个错误，因为在调 header()
 * 之前已经输出了东西 */
header('Location: http://www.example.com/');
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  <note>
   <para>
    自 PHP 4 起，可以通过一些输出缓冲函数来解决这个问题。代价是把所有向浏览器的输出都缓存在服务器，直到下命令发送它们。可以在代码中使用
    <function>ob_start</function> 及 <function>ob_end_flush</function>
    来实现这样的功能，或者通过修改 &php.ini; 中的 <literal>output_buffering</literal>
    配置选项来实现，也可以通过修改服务器配置文件来实现。
   </para>
  </note>
  <para>
   如果想提示用户保存所发送的数据，例如一个生成的 PDF
   文件，可以通过发送 <ulink url="&url.rfc;2183">Content-Disposition</ulink>
   标头提供推荐的文件名来强制浏览器弹出一个保存文件对话框。
  </para>
  <para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
// 这样将会直接输出一个 PDF 文件
header('Content-type: application/pdf');

// 这样做就会提示下载 PDF 文件 downloaded.pdf
header('Content-Disposition: attachment; filename="downloaded.pdf"');

// 这是 original.pdf 的源文件
readfile('original.pdf');
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  <note>
   <para>
    Microsoft Internet Explorer 4.01
    中的一个漏洞使得该机制无法正常工作，无解决方案。在
    Microsoft Internet Explorer 5.5
    中也有个漏洞影响到这一点，升级到 Service Pack 2 或更高版本可以解决。
   </para>
  </note>
  <note>
   <simpara>
    在<link linkend="ini.safe-mode">安全模式</link>下，如果设定了
    <literal>WWW-Authenticate</literal> 标头（用于 HTTP
    认证）则脚本的 UID 会添加到其中的 <literal>realm</literal> 部分中去。
   </simpara>
  </note>
  <para>
   参见 <function>headers_sent</function>，<function>setcookie</function>
   和 <link linkend="features.http-auth">HTTP 认证</link>一章。
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
