<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision$ -->
<!-- $Author$ -->
<!-- EN-Revision: 1.37 Maintainer: Avenger Status: ready -->
<!-- CREDITS: dallas -->
<refentry xml:id="function.setcookie" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>setcookie</refname>
  <refpurpose>发送一个 cookie 信息</refpurpose>
 </refnamediv>
 <refsect1>
  <title>说明</title>
  <methodsynopsis>
   <type>bool</type><methodname>setcookie</methodname>
   <methodparam><type>string</type><parameter>name</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>value</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>expire</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>path</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>domain</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>secure</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>setcookie</function> 定义一个和其余的 HTTP 标头一起发送的
   cookie。和其它标头一样，cookie
   必须在脚本的任何其它输出<emphasis>之前</emphasis>发送（这是协议限制）。这需要将本函数的调用放到任何输出之前，包括
   <literal>&lt;html&gt;</literal> 和 <literal>&lt;head&gt;</literal>
   标签以及任何空格。如果在调用 <function>setcookie</function>
   之前有任何输出，本函数将失败并返回 &false;。如果
   <function>setcookie</function> 函数成功运行，将返回
   &true;。这并不说明用户是否接受了 cookie。
  </para>
  <note>
   <para>
    自 PHP 4
    起，可以用输出缓存来在调用本函数前输出内容，代价是把所有向浏览器的输出都缓存在服务器，直到下命令发送它们。可以在代码中使用
    <function>ob_start</function> 及 <function>ob_end_flush</function>
    来实现这样的功能，或者通过修改 &php.ini; 中的 <literal>output_buffering</literal>
    配置选项来实现，也可以通过修改服务器配置文件来实现。
   </para>
  </note>
  <para>
   除了 <parameter>name</parameter>
   外，其它所有参数都是可选的。可以用空字符串（<emphasis>&quot;&quot;</emphasis>）替换某参数以跳过该参数。因为参数
   <parameter>expire</parameter> 是整型，不能用空字符串掉过，可以用零（<emphasis>0</emphasis>）来代替 。下面的表格对
   <function>setcookie</function>
   的每一个参数都进行了解释。可以对照
   <link xlink:href="&spec.cookies;">Netscape cookie 规范</link>以了解
   <function>setcookie</function> 的每一个参数的细节以及通过阅读
   <link xlink:href="&url.rfc;2965">RFC 2965</link> 了解 HTTP cookie 的工作方式。
  </para>
  <para>
   <table>
    <title><function>setcookie</function> 参数详解</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>参数</entry>
       <entry>说明</entry>
       <entry>举例</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry><parameter>name</parameter></entry>
       <entry>
        Cookie 的名字。
       </entry>
       <entry>
        使用 <varname>$_COOKIE['cookiename']</varname> 调用名为 cookiename 的 cookie。
       </entry>
      </row>
      <row>
       <entry><parameter>value</parameter></entry>
       <entry>
        Cookie 的值。此值保存在客户端，不要用来保存敏感数据。
       </entry>
       <entry>
        假定 <parameter>name</parameter> 是 'cookiename'，可以通过
        <varname>$_COOKIE['cookiename']</varname> 取得其值。
       </entry>
      </row>
      <row>
       <entry><parameter>expire</parameter></entry>
       <entry>
        Cookie 过期的时间。这是个 Unix 时间戳，即从 Unix
        纪元开始的秒数。换而言之，通常用
        <function>time</function> 函数再加上秒数来设定 cookie 的失效期。或者用
        <function>mktime</function>来实现。
       </entry>
       <entry>
        <literal>time()+60*60*24*30</literal> 将设定 cookie
        30 天后失效。如果未设定，cookie
        将会在会话结束后（一般是浏览器关闭）失效。
       </entry>
      </row>
      <row>
       <entry><parameter>path</parameter></entry>
       <entry>
        Cookie 在服务器端的有效路径。
       </entry>
       <entry>
        如果该参数设为 <literal>'/'</literal> 的话，cookie 就在整个
        <parameter>domain</parameter> 内有效，如果设为
        <literal>'/foo/'</literal>，cookie
        就只在 <parameter>domain</parameter> 下的
        <literal>/foo/</literal> 目录及其子目录内有效，例如
        <literal>/foo/bar/</literal>。默认值为设定 cookie 的当前目录。
       </entry>
      </row>
      <row>
       <entry><parameter>domain</parameter></entry>
       <entry>
        该 cookie 有效的域名。
       </entry>
       <entry>
        要使 cookie 能在如 example.com 域名下的所有子域都有效的话，该参数应该设为
        <literal>'.example.com'</literal>。虽然 <literal>.</literal>
        并不必须的，但加上它会兼容更多的浏览器。如果该参数设为
        <literal>www.example.com</literal> 的话，就只在
        <literal>www</literal> 子域内有效。细节见
        <link xlink:href="&spec.cookies;">Cookie 规范</link>中的 tail matching。
       </entry>
      </row>
      <row>
       <entry><parameter>secure</parameter></entry>
       <entry>
        指明 cookie 是否仅通过安全的 HTTPS 连接传送。当设成 &true;
        时，cookie 仅在安全的连接中被设置。默认值为 &false;。
       </entry>
       <entry>
        <literal>0</literal> 或 <literal>1</literal>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>
  <para>
   当 cookie 被设置后，便可以在其它页面通过 <link linkend="reserved.variables.cookies">$_COOKIE</link>
   或 <varname>$HTTP_COOKIE_VARS</varname> 数组取得其值。需要注意的是，<link linkend="language.variables.superglobals">autoglobals</link>
   的 <varname>$_COOKIE</varname> 形式适用于 PHP
   <link xlink:href="&url.php.release4.1.0;">4.1.0</link> 或更高版本。而
   <varname>$HTTP_COOKIE_VARS</varname> 则从 PHP 3 起就可以使用。Cookie
   的值也会被保存到 <link linkend="reserved.variables.request">$_REQUEST</link> 数组中。
  </para>
  <note>
   <para>
    如果 PHP 的选项 <link linkend="ini.register-globals">register_globals</link>
    被设为 <literal>on</literal> 的话，cookie
    的值仍然会被斌到变量内。在下面的例子中，<varname>$TestCookie</varname>
    会被注册，但是仍然推荐使用 <varname>$_COOKIE</varname> 数组。
   </para>
  </note>
  <para>
   常见缺陷：
   <itemizedlist>
    <listitem>
     <simpara>
     Cookies 不会在设置它的本页生效，要测试一个 cookie
     是否被成功的设定，可以在其到期之前通过另外一个页面来访问其值。过期时间是通过参数
     <parameter>expire</parameter> 来设置的。可以简单地使用
     <literal>print_r($_COOKIE);</literal> 来调试现有的 cookies。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Cookie 必须用和设定时的同样的参数才能删除。如果其值一个空字符串，或者是
      &false;，并且其它的参数都和前一次调用 setcookie 时相同，那么所指定名称的
      cookie 将会在远程客户端被删除。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      由于把 cookie 的值设为 &false; 会使客户端尝试删除这个 cookie，所以要在 cookie
      上保存 &true; 或 &false; 时不应该直接使用 boolean 值，而应该用 <emphasis>0</emphasis>
      来表示 &false;，用 <emphasis>1</emphasis> 来表示 &true;
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      可以把 cookie 的名称设置成一个数组，但是数组 cookie
      中的每个元素的值将会被单独保存在用户的系统中。考虑使用
      <function>explode</function>
      函数用多个名称和值设定一个 cookie。不推荐将
      <function>serialize</function> 用于此目的，因为它可能会导致一个安全漏洞。
     </simpara>
    </listitem>
   </itemizedlist>
  </para>
  <simpara>
   在 PHP 3 中，在同一个 PHP 脚本中多次使用 <function>setcookie</function>
   来设置 cookie，将会按照倒序的方式来分别执行，如果想要在插入另外一个 cookie
   之前删除一个 cookie，要把插入放到删除之前。自 PHP 4 起，多次调用
   <function>setcookie</function> 则是按照顺序来执行的。
  </simpara>
  <para>
   下面一些例子说明了如何发送 cookie：
   <example>
    <title><function>setcookie</function> 发送例子</title>
    <programlisting role="php">
<![CDATA[
$value = 'something from somewhere';

setcookie("TestCookie", $value);
setcookie("TestCookie", $value,time()+3600);  /* expire in 1 hour */
setcookie("TestCookie", $value,time()+3600, "/~rasmus/", ".utoronto.ca", 1);
]]>
    </programlisting>
   </example>
  </para>
  <para>
   注意 cookie
   中值的部分在发送的时候会被自动用 urlencode
   编码并在接收到的时候被自动解码并把值赋给与自己同名的 cookie 变量。如果不想这样并且在使用
   PHP 5 的话，可以用 <function>setrawcookie</function>
   来代替。下面这个简单的例子可以得到刚才所设定的 cookie 的值：
  </para>
  <para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
// 输出单独的 cookie
echo $_COOKIE["TestCookie"];
echo $HTTP_COOKIE_VARS["TestCookie"];

// 另一个调试的方法就是输出所有的 cookie
print_r($_COOKIE);
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  <para>
   要删除 cookie
   需要确保它的失效期是在过去，才能触发浏览器的删除机制。下面的例子说明了如何删除刚才设置的 cookie：
   <example>
    <title><function>setcookie</function> 删除例子</title>
    <programlisting role="php">
<![CDATA[
// 将过期时间设为一小时前
setcookie("TestCookie", "", time() - 3600);
setcookie("TestCookie", "", time() - 3600, "/~rasmus/", ".utoronto.ca", 1);
]]>
    </programlisting>
   </example>
  </para>
  <para>
   也可以通过在 cookie 名称中使用数组符号来设定数组
   cookie，可以设定多个 cookie 作为数组单元，在脚本提取 cookie
   时所有的值都放在一个数组种：
  </para>
  <para>
   <example>
    <title><function>setcookie</function> 中使用数组的例子</title>
    <programlisting role="php">
<![CDATA[
<?php
// 设定 cookie
setcookie("cookie[three]", "cookiethree");
setcookie("cookie[two]", "cookietwo");
setcookie("cookie[one]", "cookieone");

// 刷新页面后，显示出来
if (isset($_COOKIE['cookie'])) {
    foreach ($_COOKIE['cookie'] as $name => $value) {
        echo "$name : $value <br />\n";
    }
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
three : cookiethree
two : cookietwo
one : cookieone
]]>
    </screen>
   </example>
  </para>
  <note>
   <para>
    下面的一些 RFC 也具参考价值：<link xlink:href="&url.rfc;2109">RFC 2109</link> 和
    <link xlink:href="&url.rfc;2965">RFC 2695</link>。
   </para>
   <para>
    注意 <parameter>expire</parameter> 参数的接受的是 Unix
    时间戳，而不是日期格式
    <literal>Wdy, DD-Mon-YYYY HH:MM:SS GMT</literal>，这是因为 PHP
    在内部进行了转换。
   </para>
   <para>
    <parameter>expire</parameter> 是与客户端的时间相比较，和服务器时间可能不同。
   </para>
  </note>
  <note>
   <simpara>
    向 Microsoft Internet Explorer 4 Service Pack 1 不能正确处理设定了
    path 的 cookie。
   </simpara>
   <simpara>
    Netscape Communicator 4.05 及 Microsoft Internet Explorer 3.x
    不能正确处理没有设定 path 和 time 的 cookie。
   </simpara>
  </note>
  <para>
   参见 <function>header</function>，<function>setrawcookie</function>
   和本手册中的 <link linkend="features.cookies">cookie</link> 一章。
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
