<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 324354 Maintainer: daijie Status: ready -->
<!-- Reviewed: no -->

<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.getopt">
 <refnamediv>
  <refname>getopt</refname>
  <refpurpose>从命令行参数列表中获取选项</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>getopt</methodname>
   <methodparam><type>string</type><parameter>options</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>longopts</parameter></methodparam>
  </methodsynopsis>
  <para>
   解析传入脚本的选项。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <simpara>
       该字符串中的每个字符会被当做选项字符，匹配传入脚本的选项以单个连字符(-)开头。
      </simpara>
      <simpara>
       比如，一个选项字符串 <literal>"x"</literal> 识别了一个选项 <literal>-x</literal>。
      </simpara>
      <simpara>
       只允许 a-z、A-Z 和 0-9。
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>longopts</parameter></term>
     <listitem>
      <simpara>
       选项数组。此数组中的每个元素会被作为选项字符串，匹配了以两个连字符(<literal>--</literal>)传入到脚本的选项。
      </simpara>
      <simpara>
       例如，长选项元素 <literal>"opt"</literal> 识别了一个选项 <literal>--opt</literal>。
      </simpara>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
  <para>
   <parameter>options</parameter> 可能包含了以下元素：
   <simplelist>
    <member>单独的字符（不接受值）</member>
    <member>后面跟随冒号的字符（此选项需要值）</member>
    <member>后面跟随两个冒号的字符（此选项的值可选）</member>
   </simplelist>
   选项的值是字符串后的第一个参数。它不介意值之前是否有空格。
   <note>
    <simpara>
     选项的值不接受空格（<literal>" "</literal>）作为分隔符。
    </simpara>
   </note>
  </para>
  <note>
   <para>
    <parameter>options</parameter> 和 <parameter>longopts</parameter> 的格式几乎是一样的，唯一的不同之处是 <parameter>longopts</parameter> 需要是选项的数组（每个元素为一个选项），而 <parameter>options</parameter> 需要一个字符串（每个字符是个选项）。
   </para>
  </note>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   此函数会返回选项/参数对，失败时返回 &false;。
  </para>
  <note>
   <para>
    选项的解析会终止于找到的第一个非选项，之后的任何东西都会被丢弃。
   </para>
  </note>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.3.0</entry>
       <entry>
        支持 "=" 作为 参数和值的分隔符。
       </entry>
      </row>
      <row>
       <entry>5.3.0</entry>
       <entry>
        增加了可选值的支持（用"::"指定）。
       </entry>
      </row>
      <row>
       <entry>5.3.0</entry>
       <entry>
        参数 <parameter>longopts</parameter> 在所有系统平台上均可用。
       </entry>
      </row>
      <row>
       <entry>5.3.0</entry>
       <entry>
        此函数不再依赖于操作系统，现在也能够在 Windows 上运行。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example xml:id="getopt.examples-1">
    <title><function>getopt</function> 例子</title>
    <programlisting role="php">
<![CDATA[
<?php
$options = getopt("f:hp:");
var_dump($options);
?>
]]>
    </programlisting>
    <para>
     通过 <literal>php script.php -fvalue -h</literal> 运行以上脚本会输出：
    </para>
    <screen>
<![CDATA[
array(2) {
  ["f"]=>
  string(5) "value"
  ["h"]=>
  bool(false)
}
]]>
    </screen>
   </example>
  </para>
  <para>
   <example xml:id="getopt.examples-2">
    <title><function>getopt</function> 例子#2</title>
    <programlisting role="php">
<![CDATA[
<?php
$shortopts  = "";
$shortopts .= "f:";  // Required value
$shortopts .= "v::"; // Optional value
$shortopts .= "abc"; // These options do not accept values

$longopts  = array(
    "required:",     // Required value
    "optional::",    // Optional value
    "option",        // No value
    "opt",           // No value
);
$options = getopt($shortopts, $longopts);
var_dump($options);
?>
]]>
    </programlisting>
    <para>
     通过 <literal>php script.php -f "value for f" -v
     -a --required value --optional="optional value" --option</literal> 运行以上脚本会输出：
    </para>
    <screen>
<![CDATA[
array(6) {
  ["f"]=>
  string(11) "value for f"
  ["v"]=>
  bool(false)
  ["a"]=>
  bool(false)
  ["required"]=>
  string(5) "value"
  ["optional"]=>
  string(14) "optional value"
  ["option"]=>
  bool(false)
}
]]>
    </screen>
   </example>
  </para>
  <para>
   <example xml:id="getopt.examples-3">
    <title><function>getopt</function> 例子#3</title>
    <para>传递同一多个选项</para>
    <programlisting role="php">
<![CDATA[
<?php
$options = getopt("abc");
var_dump($options);
?>
]]>
    </programlisting>
    <para>
     使用 <literal>php script.php -aaac</literal> 运行以上脚本会输出：
    </para>
    <screen>
<![CDATA[
array(2) {
  ["a"]=>
  array(3) {
    [0]=>
    bool(false)
    [1]=>
    bool(false)
    [2]=>
    bool(false)
  }
  ["c"]=>
  bool(false)
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><link linkend="reserved.variables.argv"><varname>$argv</varname></link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
