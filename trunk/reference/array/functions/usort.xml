<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.8 $ -->
<!-- $Author: dallas $ -->
<!-- EN-Revision: 1.12 Maintainer: dallas Status: ready -->
  <refentry id="function.usort">
   <refnamediv>
    <refname>usort</refname>
    <refpurpose>
     使用用户自定义的比较函数对数组中的值进行排序
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>说明</title>
     <methodsynopsis>
      <type>void</type><methodname>usort</methodname>
      <methodparam><type>array</type><parameter>array</parameter></methodparam>
      <methodparam><type>callback</type><parameter>cmp_function</parameter></methodparam>
     </methodsynopsis>
    <para>
     本函数将用用户自定义的比较函数对一个数组中的值进行排序。如果要排序的数组需要用一种不寻常的标准进行排序，那么应该使用此函数。
    </para>
    <para>
     比较函数必须在第一个参数被认为小于，等于或大于第二个参数时分别返回一个小于，等于或大于零的整数。
    </para>
    <para>
     <note>
      <para>
       如果两个成员比较结果相同，则它们在排序后的数组中的顺序未经定义。直到
       PHP 4.0.6 为止，用户自定义函数将保留这些单元的原有顺序。但是由于在
       4.1.0 中引进了新的排序算法，结果将不是这样了，对此也没有一个有效的解决方案。
      </para>
     </note>
    </para>
    <para>
     <example>
      <title><function>usort</function> 例子</title>
      <programlisting role="php">
<![CDATA[
<?php
function cmp ($a, $b) {
    if ($a == $b) return 0;
    return ($a < $b) ? -1 : 1;
}

$a = array (3, 2, 5, 6, 1);

usort ($a, "cmp");

while (list ($key, $value) = each ($a)) {
    echo "$key: $value\n";
}
?>
]]>
      </programlisting>
      <para>
       本例将显示：
      </para>
      <screen>
<![CDATA[
0: 1
1: 2
2: 3
3: 5
4: 6
]]>
      </screen>
     </example>
    </para>
    <note>
     <para>
      很明显在这个小例子中用 <function>sort</function> 函数更合适。
     </para>
    </note>
    <para>
     <example>
      <title>
       使用多维数组的 <function>usort</function> 例子
      </title>
      <programlisting role="php">
<![CDATA[
<?php
function cmp ($a, $b) {
    return strcmp($a["fruit"], $b["fruit"]);
}

$fruits[0]["fruit"] = "lemons";
$fruits[1]["fruit"] = "apples";
$fruits[2]["fruit"] = "grapes";

usort($fruits, "cmp");

while (list ($key, $value) = each ($fruits)) {
    echo "\$fruits[$key]: " . $value["fruit"] . "\n";
}
?>
]]>
      </programlisting>
      <para>
       当排序多维数组时，$a 和 $b 包含到数组第一个索引的引用。
      </para>
      <para>
       本例将显示：
      </para>
      <screen>
<![CDATA[
$fruits[0]: apples
$fruits[1]: grapes
$fruits[2]: lemons
]]>
      </screen>
     </example>
    </para>
    <para>
     <example>
      <title>
       使用对象的成员函数的 <function>usort</function> 例子
      </title>
      <programlisting role="php">
<![CDATA[
<?php
class TestObj {
    var $name;

    function TestObj($name)
    {
        $this->name = $name;
    }

    /* This is the static comparing function: */
    function cmp_obj($a, $b)
    {
        $al = strtolower($a->name);
        $bl = strtolower($b->name);
        if ($al == $bl) return 0;
        return ($al > $bl) ? +1 : -1;
    }
}

$a[] = new TestObj("c");
$a[] = new TestObj("b");
$a[] = new TestObj("d");

usort($a, array ("TestObj", "cmp_obj"));

foreach ($a as $item) {
    print $item->name."\n";
}
?>
]]>
      </programlisting>
      <para>
       本例将显示：
      </para>
      <screen>
<![CDATA[
b
c
d
]]>
      </screen>
     </example>
    </para>
    <para>
     参见
     <function>uasort</function>，<function>uksort</function>，<function>sort</function>，<function>asort</function>，<function>arsort</function>，<function>ksort</function>，<function>natsort</function>
     和 <function>rsort</function>。
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
