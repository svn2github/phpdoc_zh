<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 324055 Maintainer: HonestQiao Status: ready -->
<!-- Reviewed: no Maintainer: HonestQiao -->
<refentry xml:id="function.sort" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>sort</refname>
  <refpurpose>对数组排序</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>sort</methodname>
   <methodparam><type>array</type><parameter role="reference">array</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>sort_flags</parameter></methodparam>
  </methodsynopsis>
  <para>
   本函数对数组进行排序。当本函数结束时数组单元将被从最低到最高重新安排。
  </para>
  &note.no-key-association;
  <para>
   &return.success;
  </para>
  <para>
   <example>
    <title><function>sort</function> 例子</title>
    <programlisting role="php">
<![CDATA[
<?php

$fruits = array("lemon", "orange", "banana", "apple");
sort($fruits);
foreach ($fruits as $key => $val) {
    echo "fruits[".$key."] = " . $val . "\n";
}

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
fruits[0] = apple
fruits[1] = banana
fruits[2] = lemon
fruits[3] = orange
]]>
    </screen>
   </example>
  </para>
  <para>
   fruits 被按照字母顺序排序。
  </para>
  <para>
   可选的第二个参数 <parameter>sort_flags</parameter>
   可以用以下值改变排序的行为：
  </para>
  <para>
   排序类型标记：
   <itemizedlist>
    <listitem>
     <simpara><constant>SORT_REGULAR</constant> - 正常比较单元（不改变类型）</simpara>
    </listitem>
    <listitem>
     <simpara><constant>SORT_NUMERIC</constant> - 单元被作为数字来比较</simpara>
    </listitem>
    <listitem>
     <simpara><constant>SORT_STRING</constant> - 单元被作为字符串来比较</simpara>
    </listitem>
    <listitem>
     <simpara>
      <constant>SORT_LOCALE_STRING</constant> -
      根据当前的区域（locale）设置来把单元当作字符串比较。PHP 4.4.0 和 5.0.2 新加。在
      PHP 6 之前，使用了系统的区域设置，可以用
      <function>setlocale</function> 来改变。自 PHP 6 起，必须用
      <function>i18n_loc_set_default</function> 函数。
     </simpara>
    </listitem>
   </itemizedlist>
  </para>
  <note>
   <para>
    第二个参数是 PHP 4 新加的。
   </para>
  </note>
  <warning>
   <simpara>
    在对含有混合类型值的数组排序时要小心，因为
    <function>sort</function> 可能会产生不可预知的结果。
   </simpara>
  </warning>
  <para>
   参见
   <function>arsort</function>，<function>asort</function>，<function>ksort</function>，<function>krsort</function>，<function>natsort</function>，<function>natcasesort</function>，<function>rsort</function>，<function>usort</function>，<function>array_multisort</function>
   和 <function>uksort</function>。
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>array</parameter></term>
     <listitem>
      <para>
       The input array.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>sort_flags</parameter></term>
     <listitem>
      <para>
       The optional second parameter <parameter>sort_flags</parameter>
       may be used to modify the sorting behavior using these values:
      </para>
      <para>
       Sorting type flags:
       <itemizedlist>
        <listitem>
         <simpara><constant>SORT_REGULAR</constant> - compare items normally
         (don't change types)</simpara>
        </listitem>
        <listitem>
         <simpara><constant>SORT_NUMERIC</constant> - compare items numerically</simpara>
        </listitem>
        <listitem>
         <simpara><constant>SORT_STRING</constant> - compare items as strings</simpara>
        </listitem>
        <listitem>
         <simpara><constant>SORT_LOCALE_STRING</constant> - compare items as
          strings, based on the current locale. Added in PHP 4.4.0 and 5.0.2, it
          uses the locale, which can be changed using <function>setlocale</function>.
          <!-- FIXME PHP_6
          Before PHP 6, it uses the system locale, which can be changed using
          <function>setlocale</function>. Since PHP 6, you must use the
          <function>i18n_loc_set_default</function> function.
          -->
         </simpara>
        </listitem>
        <listitem>
         <simpara><constant>SORT_NATURAL</constant> - compare items as strings
         using "natural ordering" like <function>natsort</function>. Added in
         PHP 5.4.0.</simpara>
        </listitem>
        <listitem>
         <simpara><constant>SORT_FLAG_CASE</constant> - can be combined
         (bitwise OR) with
         <constant>SORT_STRING</constant> or
         <constant>SORT_NATURAL</constant> to sort strings case-insensitively. Added in PHP 5.4.0.</simpara>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>sort</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php

$fruits = array("lemon", "orange", "banana", "apple");
sort($fruits);
foreach ($fruits as $key => $val) {
    echo "fruits[" . $key . "] = " . $val . "\n";
}

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
fruits[0] = apple
fruits[1] = banana
fruits[2] = lemon
fruits[3] = orange
]]>
    </screen>
   </example>
  </para>
  <para>
   The fruits have been sorted in alphabetical order.
  </para>
  <para>
   <example>
    <title><function>sort</function> example using case-insensitive natural
    ordering</title>
    <programlisting role="php">
<![CDATA[
<?php

$fruits = array(
	"Orange1", "orange2", "Orange3", "orange20"
);
sort($fruits, SORT_NATURAL | SORT_FLAG_CASE);
foreach ($fruits as $key => $val) {
    echo "fruits[" . $key . "] = " . $val . "\n";
}

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
fruits[0] = Orange1
fruits[1] = orange2
fruits[2] = Orange3
fruits[3] = orange20
]]>
    </screen>
   </example>
  </para>
  <para>
   The fruits have been sorted like <function>natcasesort</function>.
  </para>
 </refsect1>
 <refsect1 role="notes">
  &reftitle.notes;
  &note.no-key-association;
  <note>
   <simpara>
    Like most PHP sorting functions, <function>sort</function> uses an
    implementation of <link
    xlink:href="&url.wiki.quicksort;">Quicksort</link>.
   </simpara>
  </note>
  <warning>
   <simpara>
    Be careful when sorting arrays with mixed types values because
    <function>sort</function> can produce unpredictable results.
   </simpara>
  </warning>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>asort</function></member>
    <member>&seealso.array.sorting;</member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
