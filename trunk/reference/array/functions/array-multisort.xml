<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.3 $ -->
<!-- $Author: dallas $ -->
<!-- EN-Revision: 1.4 Maintainer: dallas Status: ready -->
  <refentry id="function.array-multisort">
   <refnamediv>
    <refname>array_multisort</refname>
    <refpurpose>对多个数组或多维数组进行排序</refpurpose>
   </refnamediv>
   <refsect1>
    <title>说明</title>
     <methodsynopsis>
      <type>bool</type><methodname>array_multisort</methodname>
      <methodparam><type>array</type><parameter>ar1</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>arg</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
      <methodparam choice="opt"><type>array</type><parameter>...</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>array_multisort</function> 可以用来一次对多个数组进行排序或者根据某一维对多维数组进行排序。排序时保留原有的键名关联。
    </para>
    <para>
     输入数组被当成一个表的列并以行来排序 － 这类似于 SQL 的 ORDER BY
     子句的功能。第一个数组是要排序的主要数组。数组中的行（值）比较为相同的话就按照下一个输入数组中相应值的大小来排序，依此类推。
    </para>
    <para>
     本函数的参数结构有些不同寻常，但是非常灵活。第一个参数必须是一个数组。接下来的每个参数可以是数组或者是下面列出的排序标志。
    </para>
    <para>
     排序顺序标志：
     <itemizedlist>
      <listitem>
       <simpara>SORT_ASC - 按照上升顺序排序</simpara>
      </listitem>
      <listitem>
       <simpara>SORT_DESC - 按照下降顺序排序</simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     排序类型标志：
     <itemizedlist>
      <listitem>
       <simpara>SORT_REGULAR - 将项目按照通常方法比较</simpara>
      </listitem>
      <listitem>
       <simpara>SORT_NUMERIC - 将项目按照数值比较</simpara>
      </listitem>
      <listitem>
       <simpara>SORT_STRING - 将项目按照字符串比较</simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     每个数组之后不能指定两个同类的排序标志。每个数组后指定的排序标志仅对该数组有效，默认值为
     SORT_ASC 和 SORT_REGULAR。
    </para>
    <para>
     &return.success;
    </para>
    <para>
     <example>
      <title>对多个数组排序</title>
      <programlisting role="php">
<![CDATA[
$ar1 = array ("10", 100, 100, "a");
$ar2 = array (1, 3, "2", 1);
array_multisort ($ar1, $ar2);
]]>
      </programlisting>
     </example>
    </para>
    <para>
     本例中经过排序后，第一个数组将包含
     10，"a"，100，100。第二个数组将包含
     1，1，"2"，3。第二个数组中的项目顺序完全和第一个数组中相应的项目（100 和 100）顺序一致。
    </para>
    <para>
     <example>
      <title>对多维数组排序</title>
      <programlisting role="php">
<![CDATA[
$ar = array (array ("10", 100, 100, "a"), array (1, 3, "2", 1));
array_multisort ($ar[0], SORT_ASC, SORT_STRING,
                 $ar[1], SORT_NUMERIC, SORT_DESC);
]]>
      </programlisting>
     </example>
    </para>
    <para>
     本例中经过排序后，第一个数组将包含
     10，100，100，"a"（作为字符串上升排序），第二个数组将包含
     1，3，"2"，1（作为数值下降排序）。
    </para>
    <para>
     【译者注】本函数相当费解，为有助于理解，请再看下面两个例子：
    </para>
    <para>
     <example>
      <title>数组排序</title>
      <programlisting role="php">
<![CDATA[
$ar1 = array ("200", 100.0, 400, "300");
$ar2 = array (    3,     1, "4",     2);
array_multisort ($ar1, $ar2);
// 排序后的结果是：
// $ar1 = array (100.0, "200", "300", 400);
// $ar2 = array (    1,     3,     2, "4");

$ar1 = array ("100", 100.0, 100, "100");
$ar2 = array (    3,     1, "4",     2);
array_multisort ($ar1, $ar2);
// 排序后的结果是：
// $ar1 = array (100.0, "100", "100", 100);
// $ar2 = array (     1,    2,     3, "4");
]]>
      </programlisting>
     </example>
    </para>
    <para>
     前一个例子中对
     <literal>$ar1</literal> 的排序当无异议，按照默认的排序标志从小到大排列好，同时
     <literal>$ar2</literal> 中和
     <literal>$ar1</literal> 相对应的单元也完全按照
     <literal>$ar1</literal> 的顺序排列了。但是后一个例子中无论用何种排序标志
     <literal>$ar1</literal> 中的单元都比较不出顺序，这时
     <literal>$ar1</literal> 中的单元就会按照
     <literal>$ar2</literal> 中的单元排序结果来排序。可以用
     <function>var_dump</function> 函数来查看
     <literal>$ar1</literal> 中单元的顺序。
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
