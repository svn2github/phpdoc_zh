<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- $Author$ -->
<!-- EN-Revision: n/a Maintainer: dallas Status: ready -->
<refentry xml:id="function.array-udiff-uassoc" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>array_udiff_uassoc</refname>
  <refpurpose>带索引检查计算数组的差集，用回调函数比较数据和索引</refpurpose>
 </refnamediv>
 <refsect1>
  <title>说明</title>
  <methodsynopsis>
   <type>array</type><methodname>array_udiff_uassoc</methodname>
   <methodparam><type>array</type><parameter>array1</parameter></methodparam>
   <methodparam><type>array</type><parameter>array2</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter> ...</parameter></methodparam>
   <methodparam><type>callback</type><parameter>data_compare_func</parameter></methodparam>
   <methodparam><type>callback</type><parameter>key_compare_func</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>array_udiff_uassoc</function> 返回一个数组，该数组包括了所有在
   <parameter>array1</parameter> 中但是不在任何其它参数数组中的值。注意和
   <function>array_diff</function> 与 <function>array_udiff</function>
   不同的是键名也用于比较。数组数据的比较是用用户提供的回调函数
   <parameter>data_compare_func</parameter> 进行的。在此方面和
   <function>array_diff_assoc</function>
   的行为正好相反，后者是用内部函数进行比较的。对键名（索引）的检查也是由回调函数
   <parameter>key_compare_func</parameter> 进行的。这和
   <function>array_udiff_assoc</function> 的行为不同，后者是用内部函数比较索引的。
  </para>
  <para>
   <example>
    <title><function>array_udiff_uassoc</function> 例子</title>
    <programlisting role="php">
<![CDATA[
<?php
class cr {
    private $priv_member;
    function cr($val)
    {
        $this->priv_member = $val;
    }

    function comp_func_cr($a, $b)
    {
        if ($a->priv_member === $b->priv_member) return 0;
        return ($a->priv_member > $b->priv_member)? 1:-1;
    }

    function comp_func_key($a, $b)
    {
        if ($a === $b) return 0;
        return ($a > $b)? 1:-1;
    }
}
$a = array("0.1" => new cr(9), "0.5" => new cr(12), 0 => new cr(23), 1=> new cr(4), 2 => new cr(-15),);
$b = array("0.2" => new cr(9), "0.5" => new cr(22), 0 => new cr(3), 1=> new cr(4), 2 => new cr(-15),);

$result = array_udiff_uassoc($a, $b, array("cr", "comp_func_cr"), array("cr", "comp_func_key"));
print_r($result);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [0.1] => cr Object
        (
            [priv_member:private] => 9
        )

    [0.5] => cr Object
        (
            [priv_member:private] => 12
        )

    [0] => cr Object
        (
            [priv_member:private] => 23
        )
)
]]>
    </screen>
   </example>
  </para>
  <simpara>
   在上例中键值对 <literal>"1" =&gt; new cr(4)</literal>
   同时出现在两个数组中，因此不在本函数的输出中。要记住必须提供两个回调函数。
  </simpara>
  <simpara>
   此比较是通过用户提供的回调函数来进行的。如果认为第一个参数小于，等于，或大于第二个参数时必须分别返回一个小于零，等于零，或大于零的整数。
  </simpara>
  <note>
   <simpara>
    注意本函数只检查了多维数组中的一维。当然，可以用
    <literal>array_udiff_uassoc($array1[0], $array2[0], "data_compare_func", "key_compare_func");</literal>
    来检查更深的维度。
   </simpara>
  </note>
  <para>
   参见
   <function>array_diff</function>，<function>array_diff_assoc</function>，<function>array_diff_uassoc</function>，<function>array_udiff</function>，<function>array_udiff_assoc</function>，<function>array_intersect</function>，<function>array_intersect_assoc</function>，<function>array_uintersect</function>，<function>array_uintersect_assoc</function>
   和
   <function>array_uintersect_uassoc</function>。
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
