<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.2 $ -->
<!-- $Author: lm92 $ -->
<!-- EN-Revision: 1.9 Maintainer: yincheng Status: ready -->
<!-- splitted from ./en/functions/oci8.xml, last change in rev 1.2 -->
  <refentry id="function.ocinewdescriptor">
   <refnamediv>
    <refname>ocinewdescriptor</refname>
    <refpurpose>
    初始化一个新的空 LOB 或 FILE 描述符
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>描述</title>
     <methodsynopsis>
      <type>object</type><methodname>ocinewdescriptor</methodname>
      <methodparam><type>resource</type><parameter>connection</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>type</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>ocinewdescriptor</function> 分配空间存储描述符或 
LOB 定位器。
有效的 <parameter>type</parameter> 值是 <constant>OCI_D_FILE</constant>、
     <constant>OCI_D_LOB</constant> 和 <constant>OCI_D_ROWID</constant>。
对于 LOB 描述符，方法 load, save, 和 savefile 与描述符相关，而
 BFILE 只存在 load 方法。参见第二个例子的使用提示。 
    </para>
    <para>
     <example>
      <title><function>ocinewdescriptor</function></title>
      <programlisting role="php">
<![CDATA[
<?php   
    /* This script is designed to be called from a HTML form.
     * It expects $user, $password, $table, $where, and $commitsize
     * to be passed in from the form.  The script then deletes
     * the selected rows using the ROWID and commits after each
     * set of $commitsize rows. (Use with care, there is no rollback)
     */
    $conn = OCILogon($user, $password);
    $stmt = OCIParse($conn, "select rowid from $table $where");
    $rowid = OCINewDescriptor($conn, OCI_D_ROWID);
    OCIDefineByName($stmt, "ROWID", &$rowid);   
    OCIExecute($stmt);
    while (OCIFetch($stmt)) {
       $nrows = OCIRowCount($stmt);
       $delete = OCIParse($conn, "delete from $table where ROWID = :rid");
       OCIBindByName($delete, ":rid", &$rowid, -1, OCI_B_ROWID);
       OCIExecute($delete);      
       echo "$nrows\n";
       if (($nrows % $commitsize) == 0) {
           OCICommit($conn);      
       }   
    }
    $nrows = OCIRowCount($stmt);   
    echo "$nrows deleted...\n";
    OCIFreeStatement($stmt);  
    OCILogoff($conn);
?>  
]]>
      </programlisting>
      <programlisting role="php">
<![CDATA[
<?php
    /* This script demonstrates file upload to LOB columns
     * The formfield used for this example looks like this
     * <form action="upload.php" method="post" enctype="multipart/form-data">
     * <input type="file" name="lob_upload" />
     * ...
     */
  if (!isset($lob_upload) || $lob_upload == 'none'){
?>
<form action="upload.php" method="post" enctype="multipart/form-data">
Upload file: <input type="file" name="lob_upload" /><br />
<input type="submit" value="Upload" /> - <input type="reset" value="Reset" />
</form>
<?php
  } else {

     // $lob_upload contains the temporary filename of the uploaded file

     // see also the features section on file upload,
     // if you would like to use secure uploads
     
     $conn = OCILogon($user, $password);
     $lob = OCINewDescriptor($conn, OCI_D_LOB);
     $stmt = OCIParse($conn, "insert into $table (id, the_blob) 
               values(my_seq.NEXTVAL, EMPTY_BLOB()) returning the_blob into :the_blob");
     OCIBindByName($stmt, ':the_blob', &$lob, -1, OCI_B_BLOB);
     OCIExecute($stmt, OCI_DEFAULT);
     if ($lob->savefile($lob_upload)){
        OCICommit($conn);
        echo "Blob successfully uploaded\n";
     }else{
        echo "Couldn't upload Blob\n";
     }
     OCIFreeDesc($lob);
     OCIFreeStatement($stmt);
     OCILogoff($conn);
  }
?>
]]>
      </programlisting>
     </example>
     <example>
      <title><function>ocinewdescriptor</function></title>
      <programlisting role="php">
<![CDATA[
<?php   
    /* Calling PL/SQL stored procedures which contain clobs as input
     * parameters (PHP 4 >= 4.0.6). 
     * Example PL/SQL stored procedure signature is:
     *
     * PROCEDURE save_data
     *   Argument Name                  Type                    In/Out Default?
     *   ------------------------------ ----------------------- ------ --------
     *   KEY                            NUMBER(38)              IN
     *   DATA                           CLOB                    IN
     *
     */

    $conn = OCILogon($user, $password);
    $stmt = OCIParse($conn, "begin save_data(:key, :data); end;");
    $clob = OCINewDescriptor($conn, OCI_D_LOB);
   	OCIBindByName($stmt, ':key', $key);
    OCIBindByName($stmt, ':data', $clob, -1, OCI_B_CLOB);
   	$clob->WriteTemporary($data);
  	 OCIExecute($stmt, OCI_DEFAULT);
   	OCICommit($conn);
   	$clob->close();
   	$clob->free();
    OCIFreeStatement($stmt);
?>
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
