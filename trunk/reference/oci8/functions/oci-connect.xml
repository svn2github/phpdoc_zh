<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- $Author$ -->
<!-- EN-Revision: n/a Maintainer: yincheng Status: ready -->
<!-- CREDITS: dallas -->
<refentry xml:id="function.oci-connect" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>oci_connect</refname>
  <refpurpose>建立一个到 Oracle 服务器的连接</refpurpose>
 </refnamediv>
 <refsect1>
  <title>说明</title>
  <methodsynopsis>
   <type>resource</type><methodname>oci_connect</methodname>
   <methodparam><type>string</type><parameter>username</parameter></methodparam>
   <methodparam><type>string</type><parameter>password</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>db</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>charset</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>session_mode</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>oci_connect</function> 返回一个大多数 OCI
   调用都需要的连接标识符。可选的第三个参数可以包含想要连接的本地
   Oracle 的实例的或者在 <filename>tnsnames.ora</filename>
   中的条目的名字。如果没有指定可选的第三个参数，PHP
   使用环境变量 <constant>ORACLE_SID</constant>（Oracle 实例）或
   <constant>TWO_TASK</constant>（<filename>tnsnames.ora</filename>）来确定连接哪一个数据库。
  </para>
  <para>
   <parameter>session_mode</parameter> 参数自版本 1.1
   起可用并接受如下值：<constant>OCI_DEFAULT</constant>，<constant>OCI_SYSOPER</constant>
   和 <constant>OCI_SYSDBA</constant>。如果指定了
   <constant>OCI_SYSOPER</constant> 或 <constant>OCI_SYSDBA</constant>
   其中之一，<function>oci_connect</function>
   将尝试使用外部认证信息建立特权连接。特权连接默认被禁止。要启用，需要将
   <link linkend="ini.oci8.privileged-connect">oci8.privileged_connect</link>
   设为 On。
  </para>
  <note>
   <simpara>
    如果 PHP 用的是 Oracle Instant
    Client，可以用容易的命名连接方法，说明见这里：<link
    xlink:href="&url.oracle.oic.connect;">&url.oracle.oic.connect;</link>。基本上这意味着可以指定
    "//db_host[:port]/database_name"
    作为数据库名。但如果想用命名的旧方法则<emphasis>必须</emphasis>设定
    <constant>ORACLE_HOME</constant> 或 <constant>TNS_ADMIN</constant> 二者之一。
   </simpara>
  </note>
  <note>
   <simpara>
    对 <function>oci_connect</function>
    用同样的参数第二次及之后的调用将返回第一次调用所返回的连接句柄。也就是说对一个句柄发出的查询也适用于另一个句柄，因为它们是<emphasis>同一个</emphasis>句柄。此行为演示于下面的例
    1。如果需要两个句柄在事务上互相隔离开，应该使用
    <function>oci_new_connect</function> 来替代。
   </simpara>
  </note>
  &oci.charset;
  <para>
   <example>
    <title><function>oci_connect</function> 例子</title>
    <programlisting role="php">
<![CDATA[
<?php
echo "<pre>";
$db = "";

$c1 = oci_connect("scott", "tiger", $db);
$c2 = oci_connect("scott", "tiger", $db);

function create_table($conn)
{
  $stmt = oci_parse($conn, "create table scott.hallo (test varchar2(64))");
  oci_execute($stmt);
  echo $conn . " created table\n\n";
}

function drop_table($conn)
{
  $stmt = oci_parse($conn, "drop table scott.hallo");
  oci_execute($stmt);
  echo $conn . " dropped table\n\n";
}

function insert_data($conn)
{
  $stmt = oci_parse($conn, "insert into scott.hallo
            values('$conn' || ' ' || to_char(sysdate,'DD-MON-YY HH24:MI:SS'))");
  oci_execute($stmt, OCI_DEFAULT);
  echo $conn . " inserted hallo\n\n";
}

function delete_data($conn)
{
  $stmt = oci_parse($conn, "delete from scott.hallo");
  oci_execute($stmt, OCI_DEFAULT);
  echo $conn . " deleted hallo\n\n";
}

function commit($conn)
{
  oci_commit($conn);
  echo $conn . " committed\n\n";
}

function rollback($conn)
{
  oci_rollback($conn);
  echo $conn . " rollback\n\n";
}

function select_data($conn)
{
  $stmt = oci_parse($conn, "select * from scott.hallo");
  oci_execute($stmt, OCI_DEFAULT);
  echo $conn."----selecting\n\n";
  while (oci_fetch($stmt)) {
    echo $conn . " [" . oci_result($stmt, "TEST") . "]\n\n";
  }
  echo $conn . "----done\n\n";
}

create_table($c1);
insert_data($c1);   // Insert a row using c1
insert_data($c2);   // Insert a row using c2

select_data($c1);   // Results of both inserts are returned
select_data($c2);

rollback($c1);      // Rollback using c1

select_data($c1);   // Both inserts have been rolled back
select_data($c2);

insert_data($c2);   // Insert a row using c2
commit($c2);        // Commit using c2

select_data($c1);   // Result of c2 insert is returned

delete_data($c1);   // Delete all rows in table using c1
select_data($c1);   // No rows returned
select_data($c2);   // No rows returned
commit($c1);        // Commit using c1

select_data($c1);   // No rows returned
select_data($c2);   // No rows returned

drop_table($c1);
echo "</pre>";
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <function>oci_connect</function> 如果出错则返回 &false;。
  </para>
  <note>
   <para>
    在 PHP 5.0.0 之前的版本必须使用 <function>ocilogon</function>
    替代本函数。该函数名仍然可用，为向下兼容作为
    <function>oci_connect</function> 的别名。不过其已被废弃，不推荐使用。
   </para>
  </note>
  <simpara>
   参见 <function>oci_pconnect</function>，<function>oci_new_connect</function>
   和 <function>oci_close</function>。
  </simpara>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

