<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 321375 Maintainer: daijie Status: ready -->
<refentry xml:id="function.eval" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>eval</refname>
  <refpurpose>把字符串作为PHP代码执行</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
   <methodsynopsis>
   <type>mixed</type><methodname>eval</methodname>
   <methodparam><type>string</type><parameter>code</parameter></methodparam>
  </methodsynopsis>
  <para>
   把字符串 <parameter>code</parameter> 作为PHP代码执行。
  </para>
  
  <caution>
  <para>
   The <function>eval</function> language construct is <emphasis>very dangerous</emphasis>
    because it allows execution of arbitrary PHP code. <emphasis>Its use thus is
    discouraged.</emphasis> If you have carefully verified that there is no other option
    than to use this construct, pay special attention <emphasis>not to pass any user
    provided data</emphasis> into it without properly validating it beforehand.
  </para>
  </caution>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>code</parameter></term>
     <listitem>
      <para>
       需要被执行的字符串
      </para>
      <para>
      代码不能包含打开/关闭 <link
       linkend="language.basic-syntax.phpmode">PHP tags</link>。比如，<literal>'echo "Hi!";'</literal> must be passed instead of
       <literal>'&lt;? echo "Hi!"; &gt;'</literal>. It is still possible to leave and
       reenter PHP mode though using the appropriate PHP tags, e.g.
       <literal>'echo "In PHP mode!"; ?&gt;In HTML mode!&lt;? echo "Back in PHP mode!";'</literal>.
      </para>
      <para>
       Apart from that the passed code must be valid PHP. This includes that all statements
       must be properly terminated using a semicolon.
       <literal>'echo "Hi!"'</literal> for example will cause a parse error, whereas
       <literal>'echo "Hi!";'</literal> will work.
      </para>
      <para>
       <literal>return</literal> 语句会立即中止当前字符串的执行。
      </para>
      <para>
       The code will be executed in the scope of the code calling <function>eval</function>. Thus any
       variables defined or changed in the <function>eval</function> call will remain visible after
       it terminates.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>eval</function> 返回 &null;，除非在执行的代码中 <literal>return</literal> 了一个值，函数返回传递给 <literal>return</literal> 的值。
   如果在执行的代码中有一个解析错误，<function>eval</function> 返回
   &false;，之后的代码将正常执行。无法使用 <function>set_error_handler</function> 捕获 <function>eval</function> 中的解析错误。
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>eval</function> 例子 - 简单的文本合并</title>
    <programlisting role="php">
<![CDATA[
<?php
$string = 'cup';
$name = 'coffee';
$str = 'This is a $string with my $name in it.';
echo $str. "\n";
eval("\$str = \"$str\";");
echo $str. "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
This is a $string with my $name in it.
This is a cup with my coffee in it.
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;

  &note.language-construct;

  &tip.ob-capture;
  <note>
   <para>
    如果在执行的代码中产生了一个致命的错误（fatal error），整个脚本会退出。
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>call_user_func</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
