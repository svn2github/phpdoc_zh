<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- $Author$ -->
<!-- EN-Revision: n/a Maintainer: dallas Status: ready -->
  <refentry xml:id="function.pow" xmlns="http://docbook.org/ns/docbook">
   <refnamediv>
    <refname>pow</refname>
    <refpurpose>指数表达式</refpurpose>
   </refnamediv>
   <refsect1>
    <title>说明</title>
     <methodsynopsis>
      <type>number</type><methodname>pow</methodname>
      <methodparam><type>number</type><parameter>base</parameter></methodparam>
      <methodparam><type>number</type><parameter>exp</parameter></methodparam>
     </methodsynopsis>
    <para>
     返回 <parameter>base</parameter> 的
     <parameter>exp</parameter> 次方的幂。如果可能，本函数会返回
     <type>integer</type>。
    </para>
    <para>
     如果不能计算幂，将发出一条警告，<function>pow</function> 将返回 &false;。PHP 4.2.0
     版开始 <function>pow</function> 不要产生任何的警告。
    </para>
    <note>
     <para>
  	  PHP 不能处理负数的 <parameter>base</parameter>。
     </para>
    </note>
    <example>
     <title><function>pow</function> 例子</title>
     <programlisting role="php">
<![CDATA[
<?php

var_dump(pow(2, 8)); // int(256)
echo pow(-1, 20); // 1
echo pow(0, 0); // 1

echo pow(-1, 5.5); // error

?>
]]>
     </programlisting>
    </example>
    <warning>
     <para>
      在 PHP 4.0.6 及之前版本中，<function>pow</function>
      总是返回 <type>float</type>，并且不产生警告。
     </para>
    </warning>
    <para> 
     参见 <function>exp</function>，<function>sqrt</function>，<function>bcpow</function>
     <function>gmp_pow</function> 和。
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
