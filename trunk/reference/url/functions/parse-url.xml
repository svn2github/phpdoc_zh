<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision$ -->
<!-- $Author$ -->
<!-- EN-Revision: n/a Maintainer: nio Status: ready -->
<!-- CREDITS: dallas -->
<refentry xml:id="function.parse-url" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>parse_url</refname>
  <refpurpose>解析 URL，返回其组成部分</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>parse_url</methodname>
   <methodparam><type>string</type><parameter>url</parameter></methodparam>
  </methodsynopsis>
  <para>
   本函数解析一个 URL 并返回一个关联数组，包含在 URL 中出现的各种组成部分。
  </para>
  <para>
   本函数<emphasis role="strong">不是</emphasis>用来验证给定 URL
   的合法性的，只是将其分解为下面列出的部分。不完整的 URL
   也被接受，<function>parse_url</function> 会尝试尽量正确地将其解析。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>url</parameter></term>
     <listitem>
      <para>
       要解析的 URL
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   对严重不合格的 URL，<function>parse_url</function> 可能会返回
   &false; 并发出 <constant>E_WARNING</constant>。否则会返回一个关联数组，其组成部分为（至少有一个）：
   <itemizedlist>
    <listitem>
     <simpara>
      <varname remap="structfield">scheme</varname> - 如 http
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">host</varname> 
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">port</varname>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">user</varname>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">pass</varname>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">path</varname>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">query</varname>  - 在问号 <literal>?</literal> 之后
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">fragment</varname> -  在散列符号 <literal>#</literal> 之后
     </simpara>
    </listitem>
   </itemizedlist>
  </para>
 </refsect1> 

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>parse_url</function> 例子</title>
   <programlisting role="php">
<![CDATA[
<?php
$url = 'http://username:password@hostname/path?arg=value#anchor';

print_r(parse_url($url));
?>
]]>
    </programlisting>
    &example.outputs;
   <screen>
<![CDATA[
Array
(
    [scheme] => http
    [host] => hostname
    [user] => username
    [pass] => password
    [path] => /path
    [query] => arg=value
    [fragment] => anchor
)
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    本函数不能用于相对 URL。
   </para>
  </note>
  <note>
   <para>
    <function>parse_url</function> 是专门用来解析 URL 而不是 URI 的。不过为遵从 PHP
    向后兼容的需要有个例外，对 file:// 协议允许三个斜线（file:///...）。其它任何协议都不能这样。
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist> 
    <member><function>pathinfo</function></member>
    <member><function>parse_str</function></member>
    <member><function>dirname</function></member>
    <member><function>basename</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
