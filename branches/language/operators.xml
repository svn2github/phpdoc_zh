<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- $Author$ -->
<!-- EN-Revision: n/a Maintainer: Altair Status: ready -->
<!-- CREDITS: dallas -->
 <chapter xml:id="language.operators" xmlns="http://docbook.org/ns/docbook">
  <title>运算符</title>
  <simpara>
   运算符是可以通过给出的一或多个值（用编程行话来说，表达式）来产生另一个值（因而整个结构成为一个表达式）的东西。所以可以认为函数或任何会返回一个值（例如
   print）的结构是运算符，而那些没有返回值的（例如 echo）是别的东西。
  </simpara>
  <para>
   有三种类型的运算符。第一种是一元运算符，只运算一个值，例如
   !（取反运算符）或 ++（加一运算符）。第二种是有限二元运算符，PHP
   支持的大多数运算符都是这种。列表见下节<link
   linkend="language.operators.precedence">运算符优先级</link>。
  </para>
  <para>
   第三种是三元运算符：?:。它应该被用来根据一个表达式在另两个表达式中选择一个，而不是用来在两个语句或者程序路线中选择。把整个三元表达式放在扩号里是个很好的主意。
  </para>

  <sect1 xml:id="language.operators.precedence">
   <title>运算符优先级</title>
   <para>
    运算符优先级指定了两个表达式绑定得有多“紧密”。例如，表达式 <literal>1 + 5 *
    3</literal> 的结果是 <literal>16</literal> 而不是 <literal>18</literal>
    是因为乘号（“*”）的优先级比加号（“+”）高。必要时可以用括号来强制改变优先级。例如：<literal>(1
    + 5) * 3</literal> 的值为 <literal>18</literal>。如果运算符优先级相同，则使用从左到右的左联顺序。
   </para>
   <para>
    下表从高到低列出了运算符的优先级。同一行中的运算符具有相同优先级，此时它们的结合方向决定求值顺序。
    <table>
     <title>运算符优先级</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>结合方向</entry>
        <entry>运算符</entry>
        <entry>附加信息</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>非结合</entry>
        <entry>clone new</entry>
        <entry><link linkend="language.oop5.cloning">clone</link> 和 <link linkend="language.oop5.basic.new">new</link></entry>
       </row>
       <row>
        <entry>左</entry>
        <entry>[</entry>
        <entry><function>array</function></entry>
       </row>
       <row>
        <entry>非结合</entry>
        <entry>++ --</entry>
        <entry>
         <link linkend="language.operators.increment">递增／递减运算符</link>
        </entry>
       </row>
       <row>
        <entry>非结合</entry>
        <entry>~ - (int) (float) (string) (array) (object) (bool) @</entry>
        <entry>
         <link linkend="language.types">类型</link>
        </entry>
       </row>
       <row>
        <entry>非结合</entry>
        <entry>instanceof</entry>
        <entry>
         <link linkend="language.types">类型</link>
        </entry>
       </row>
       <row>
        <entry>右结合</entry>
        <entry>!</entry>
        <entry>
         <link linkend="language.operators.logical">逻辑操作符</link>
        </entry>
       </row>      
       <row>
        <entry>左</entry>
        <entry>* / %</entry>
        <entry>
         <link linkend="language.operators.arithmetic">算术运算符</link>
        </entry>
       </row>
       <row>
        <entry>左</entry>
        <entry>+ - .</entry>
        <entry>
         <link linkend="language.operators.arithmetic">算术运算符</link>和<link
         linkend="language.operators.string">字符串运算符</link></entry>
       </row>
       <row>
        <entry>左</entry>
        <entry>&lt;&lt; &gt;&gt;</entry>
        <entry>
         <link linkend="language.operators.bitwise">位运算符</link>
        </entry>
       </row>
       <row>
        <entry>非结合</entry>
        <entry>&lt; &lt;= &gt; &gt;= &lt;&gt;</entry>
        <entry>
         <link linkend="language.operators.comparison">比较运算符</link>
        </entry>
       </row>
       <row>
        <entry>非结合</entry>
        <entry>== != === !==</entry>
        <entry>
         <link linkend="language.operators.comparison">比较运算符</link>
        </entry>
       </row>
       <row>
        <entry>左</entry>
        <entry>&amp;</entry>
        <entry>
         <link linkend="language.operators.bitwise">位运算符</link>和<link
         linkend="language.references">引用</link></entry>
       </row>
       <row>
        <entry>左</entry>
        <entry>^</entry>
        <entry>
         <link linkend="language.operators.bitwise">位运算符</link>
        </entry>
       </row>
       <row>
        <entry>左</entry>
        <entry>|</entry>
        <entry>
         <link linkend="language.operators.bitwise">位运算符</link>
        </entry>
       </row>
       <row>
        <entry>左</entry>
        <entry>&amp;&amp;</entry>
        <entry>
         <link linkend="language.operators.logical">逻辑运算符</link>
        </entry>
       </row>
       <row>
        <entry>左</entry>
        <entry>||</entry>
        <entry>
         <link linkend="language.operators.logical">逻辑运算符</link>
        </entry>
       </row>
       <row>
        <entry>左</entry>
        <entry>? :</entry>
        <entry>
         <link linkend="language.operators.comparison.ternary">三元运算符</link>
        </entry>
       </row>
       <row>
        <entry>右</entry>
        <entry>
         = += -= *= /= .= %= &amp;= |= ^= &lt;&lt;= &gt;&gt;=
        </entry>
        <entry>
         <link linkend="language.operators.assignment">赋值运算符</link>
        </entry>
       </row>
       <row>
        <entry>左</entry>
        <entry>and</entry>
        <entry>
         <link linkend="language.operators.logical">逻辑运算符</link>
        </entry>
       </row>
       <row>
        <entry>左</entry>
        <entry>xor</entry>
        <entry>
         <link linkend="language.operators.logical">逻辑运算符</link>
        </entry>
       </row>
       <row>
        <entry>左</entry>
        <entry>or</entry>
        <entry>
         <link linkend="language.operators.logical">逻辑运算符</link>
        </entry>
       </row>
       <row>
        <entry>左</entry>
        <entry>,</entry>
        <entry>多处用到</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
   <para>
    左联表示表达式从左向右求值，右联相反。
    <example>
     <title>结合方向</title>
     <programlisting role="php">
<![CDATA[
<?php
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5
?>
]]>
     </programlisting>
    </example>
    使用括号可以增强代码的可读性。
   </para>
   <note>
    <para>
     尽管 <literal>=</literal> 比其它大多数的运算符的优先级低，PHP
     仍旧允许类似如下的表达式：<literal>if (!$a = foo())</literal>，在此例中
     <literal>foo()</literal> 的返回值被赋给了 <varname>$a</varname>。
    </para>
   </note>
  </sect1>

  <sect1 xml:id="language.operators.arithmetic">
   <title>算术运算符</title>
   <simpara>
    还记得学校里学到的基本数学知识吗？就和它们一样。
   </simpara>
   <table>
    <title>算术运算符</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>例子</entry>
       <entry>名称</entry>
       <entry>结果</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>-$a</entry>
       <entry>取反</entry>
       <entry>$a 的负值。</entry>
      </row>
      <row>
       <entry>$a + $b</entry>
       <entry>加法</entry>
       <entry>$a 和 $b 的和。</entry>
      </row>
      <row>
       <entry>$a - $b</entry>
       <entry>减法</entry>
       <entry>$a 和 $b 的差。</entry>
      </row>
      <row>
       <entry>$a * $b</entry>
       <entry>乘法</entry>
       <entry>$a 和 $b 的积。</entry>
      </row>
      <row>
       <entry>$a / $b</entry>
       <entry>除法</entry>
       <entry>$a 除以 $b 的商。</entry>
      </row>
      <row>
       <entry>$a % $b</entry>
       <entry>取模</entry>
       <entry>$a 除以 $b 的余数。</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <simpara>
    除法运算符总是返回符点数。只有在下列情况例外：两个操作数都是整数（或字符串转换成的整数）并且正好能整除，这时它返回一个整数。
   </simpara>
   <simpara>
   	取模运算符的操作数在运算之前都会转换成整数（除去小数部分）。
   </simpara>
   <note>
    <simpara>
     取模 <literal>$a % $b</literal> 在 <literal>$a</literal>
     为负值时的结果也是负值。
    </simpara>
   </note>
   <simpara>
    参见手册中的<link linkend="ref.math">数学函数</link>。
   </simpara>

  </sect1>

  <sect1 xml:id="language.operators.assignment">
   <title>赋值运算符</title>
   <simpara>
    基本的赋值运算符是“=”。一开始可能会以为它是“等于”，其实不是的。它实际上意味着把右边表达式的值赋给左边的运算数。
   </simpara>
   <para>
    赋值运算表达式的值也就是所赋的值。也就是说，“$a = 3”的值是 3。这样就可以做一些小技巧：
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

$a = ($b = 4) + 5; // $a 现在成了 9，而 $b 成了 4。

?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    在基本赋值运算符之外，还有适合于所有<link
    linkend="language.operators">二元算术</link>，数组集合和字符串运算符的“组合运算符”，这样可以在一个表达式中使用它的值并把表达式的结果赋给它，例如：
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

$a = 3;
$a += 5; // sets $a to 8, as if we had said: $a = $a + 5;
$b = "Hello ";
$b .= "There!"; // sets $b to "Hello There!", just like $b = $b . "There!";

?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    注意赋值运算将原变量的值拷贝到新变量中（传值赋值），所以改变其中一个并不影响另一个。这也适合于在很密集的循环中拷贝一些值例如大数组。也可以使用引用赋值，用 <computeroutput>$var =
    &amp;$othervar;</computeroutput> 语法。引用赋值意味着两个变量都指向同一个数据，没有任何数据的拷贝。有关引用的更多信息见<link
    linkend="language.references">引用的说明</link>。在
    PHP 5中，对象总是通过引用赋值的，除非明确使用新的 <link
    linkend="language.oop5.cloning">clone</link>关键字。
   </para>
  </sect1>

  <sect1 xml:id="language.operators.bitwise">
   <title>位运算符</title>
   <simpara>
    位运算符允许对整型数中指定的位进行置位。如果左右参数都是字符串，则位运算符将操作字符的
    ASCII 值。
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
echo 12 ^ 9; // 输出为 '5'

echo "12" ^ "9"; // 输出退格字符（ascii 8）
                    // ('1' (ascii 49)) ^ ('9' (ascii 57)) = #8

echo "hallo" ^ "hello"; // 输出 ascii 值 #0 #4 #0 #0 #0
                            // 'a' ^ 'e' = #4

echo 2 ^ "3"; // 输出 1
              // 2 ^ ((int)"3") == 1

echo "2" ^ 3; // 输出 1
              // ((int)"2") ^ 3 == 1                            
?>
]]>
     </programlisting>
    </informalexample>
   </para>

   <table>
    <title>位运算符</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>例子</entry>
       <entry>名称</entry>
       <entry>结果</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>$a &amp; $b</entry>
       <entry>And（按位与）</entry>
       <entry>将把 $a 和 $b 中都为 1 的位设为 1。</entry>
      </row>
      <row>
       <entry>$a | $b</entry>
       <entry>Or（按位或）</entry>
       <entry>将把 $a 或者 $b 中为 1 的位设为 1。</entry>
      </row>
      <row>
       <entry>$a ^ $b</entry>
       <entry>Xor（按位异或）</entry>
       <entry>将把 $a 和 $b 中不同的位设为 1。</entry>
      </row>
      <row>
       <entry>~ $a</entry>
       <entry>Not（按位非）</entry>
       <entry>将 $a 中为 0 的位设为 1，反之亦然。</entry>
      </row>
      <row>
       <entry>$a &lt;&lt; $b</entry>
       <entry>Shift left（左移）</entry>
       <entry>将 $a 中的位向左移动 $b 次（每一次移动都表示“乘以 2”）。</entry>
      </row>
      <row>
       <entry>$a &gt;&gt; $b</entry>
       <entry>Shift right（右移）</entry>
       <entry>将 $a 中的位向右移动 $b 次（每一次移动都表示“除以 2”）。</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <warning>
    <para>
     在 32 位系统上不要右移超过 32 位。不要在结果可能超过 32 位的情况下左移。
    </para>
   </warning>
  </sect1>

  <sect1 xml:id="language.operators.comparison">
   <title>比较运算符</title>
   <simpara>
    比较运算符，如同它们名称所暗示的，允许对两个值进行比较。还可以参考
    <link linkend="types.comparisons">PHP 类型比较表</link>看不同类型相互比较的例子。
   </simpara>
   <table>
    <title>比较运算符</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>例子</entry>
       <entry>名称</entry>
       <entry>结果</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>$a == $b</entry>
       <entry>等于</entry>
       <entry>&true;，如果 $a 等于 $b。</entry>
      </row>
      <row>
       <entry>$a === $b</entry>
       <entry>全等</entry>
       <entry>&true;，如果 $a 等于 $b，并且它们的类型也相同。（PHP 4 引进）</entry>
      </row>
      <row>
       <entry>$a != $b</entry>
       <entry>不等</entry>
       <entry>&true;，如果 $a 不等于 $b。</entry>
      </row>
      <row>
       <entry>$a &lt;&gt; $b</entry>
       <entry>不等</entry>
       <entry>&true;，如果 $a 不等于 $b。</entry>
      </row>
      <row>
       <entry>$a !== $b</entry>
       <entry>非全等</entry>
       <entry>&true;，如果 $a 不等于 $b，或者它们的类型不同。（PHP 4 引进）</entry>
      </row>
      <row>
       <entry>$a &lt; $b</entry>
       <entry>小与</entry>
       <entry>&true;，如果 $a 严格小于 $b。</entry>
      </row>
      <row>
       <entry>$a &gt; $b</entry>
       <entry>大于</entry>
       <entry>&true;，如果 $a 严格 $b。</entry>
      </row>
      <row>
       <entry>$a &lt;= $b</entry>
       <entry>小于等于</entry>
       <entry>&true;，如果 $a 小于或者等于 $b。</entry>
      </row>
      <row>
       <entry>$a &gt;= $b</entry>
       <entry>大于等于</entry>
       <entry>&true;，如果 $a 大于或者等于 $b。</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <para>
    如果比较一个整数和字符串，则字符串会被<link
    linkend="language.types.string.conversion">转换为整数</link>。如果比较两个数字字符串，则作为整数比较。此规则也适用于
    <link linkend="control-structures.switch">switch</link> 语句。
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
var_dump(0 == "a"); // 0 == 0 -> true
var_dump("1" == "01"); // 1 == 1 -> true
var_dump("1" == "1e0"); // 1 == 1 -> true
switch ("a") {
case 0:
    echo "0";
    break;
case "a": // never reached because "a" is already matched with 0
    echo "a";
    break;
}
?>
]]>
     </programlisting>
    </informalexample>
   </para>

   <para>
    对于多种类型，比较运算符根据下表比较（按顺序）。
   </para>
   <table xml:id="language.operators.comparison.types">
    <title>比较多种类型</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>运算数 1 类型</entry>
       <entry>运算数 1 类型</entry>
       <entry>结果</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry><type>null</type> 或 <type>string</type></entry>
       <entry><type>string</type></entry>
       <entry>将 &null; 转换为 ""，进行数字或词汇比较</entry>
      </row>
      <row>
       <entry><type>bool</type> 或 <type>null</type></entry>
       <entry>任何其它类型</entry>
       <entry>转换为 <type>bool</type>，&false; &lt; &true;</entry>
      </row>
      <row>
       <entry><type>object</type></entry>
       <entry><type>object</type></entry>
       <entry>
        内置类可以定义自己的比较，不同类不能比较，相同类和数组同样方式比较属性（PHP
        4 中），PHP 5 有其自己的<link
        linkend="language.oop5.object-comparison">说明</link>
       </entry>
      </row>
      <row>
       <entry><type>string</type>，<type>resource</type> 或 <type>number</type></entry>
       <entry><type>string</type>，<type>resource</type> 或 <type>number</type></entry>
       <entry>将字符串和资源转换成数字，按普通数学比较</entry>
      </row>
      <row>
       <entry><type>array</type></entry>
       <entry><type>array</type></entry>
       <entry>
        具有较少成员的数组较小，如果运算数 1 中的键不存在于运算数
        2 中则数组无法比较，否则挨个值比较（见下例）
       </entry>
      </row>
      <row>
       <entry><type>array</type></entry>
       <entry>任何其它类型</entry>
       <entry><type>array</type> 总是更大</entry>
      </row>
      <row>
       <entry><type>object</type></entry>
       <entry>任何其它类型</entry>
       <entry><type>object</type> 总是更大</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <para>
    <example>
     <title>标准数组比较代码</title>
     <programlisting role="php">
<![CDATA[
<?php
// 数组是用标准比较运算符这样比较的
function standard_array_compare($op1, $op2)
{
    if (count($op1) < count($op2)) {
        return -1; // $op1 < $op2
    } elseif (count($op1) > count($op2)) {
        return 1; // $op1 > $op2
    }
    foreach ($op1 as $key => $val) {
        if (!array_key_exists($key, $op2)) {
            return null; // uncomparable
        } elseif ($val < $op2[$key]) {
            return -1;
        } elseif ($val > $op2[$key]) {
            return 1;
        }
    }
    return 0; // $op1 == $op2
}
?>
]]>
     </programlisting>
    </example>
   </para>

   <para>
    参见 <function>strcasecmp</function>，<function>strcmp</function>，<link
    linkend="language.operators.array">数组运算符</link>和<link linkend="language.types">类型</link>一章。
   </para>

   <sect2 xml:id="language.operators.comparison.ternary">
    <title>三元运算符</title>
    <para>
     另一个条件运算符是“?:”（或三元）运算符 。
     <example>
      <title>赋默认值</title>
      <programlisting role="php">
 <![CDATA[
 <?php
 // Example usage for: Ternary Operator
 $action = (empty($_POST['action'])) ? 'default' : $_POST['action'];

 // The above is identical to this if/else statement
 if (empty($_POST['action'])) {
     $action = 'default';
 } else {
     $action = $_POST['action'];
 }

 ?>
 ]]>
      </programlisting>
     </example>
     表达式 <literal>(expr1) ? (expr2) : (expr3)</literal> 在
     <replaceable>expr1</replaceable> 求值为 &true;
     时的值为 <replaceable>expr2</replaceable>，在
     <replaceable>expr1</replaceable> 求值为 &false; 时的值为
     <replaceable>expr3</replaceable>。
    </para>
    <note>
     <simpara>
      注意三元运算符是个语句，因此其求值不是变量，而是语句的结果。如果想通过引用返回一个变量这点就很重要。在一个通过引用返回的函数中语句
      <literal>return $var == 42 ? $a : $b;</literal> 将不起作用，以后的 PHP
      版本会为此发出一条警告。
     </simpara>
    </note>
    <note>
     <para>
      建议避免将三元运算符堆积在一起使用。当在一条语句中使用多个三元运算符时会造成
      PHP 运算结果不清晰：
      Is is recommended that you avoid "stacking" ternary expressions. PHP's
      behaviour when using more than one ternary operator within a single
      statement is non-obvious:
      <example>
       <title>不清晰的三元运算符行为</title>
       <programlisting role="php">
<![CDATA[
<?php
// 乍看起来下面的输出是 'true'
echo (true?'true':false?'t':'f');

// 然而，上面语句的实际输出是't'，因为三元运算符是从左往右计算的

// 下面是与上面等价的语句，但更清晰
echo ((true ? 'true' : 'false') ? 't' : 'f');

// here, you can see that the first expression is evaluated to 'true', which
// in turn evaluates to (bool)true, thus returning the true branch of the
// second ternary expression.
?>
]]>
       </programlisting>
      </example>
     </para>
    </note>
    </sect2>

  </sect1>

  <sect1 xml:id="language.operators.errorcontrol">
   <title>错误控制运算符</title>
   <simpara>
    PHP 支持一个错误控制运算符：@。当将其放置在一个 PHP
    表达式之前，该表达式可能产生的任何错误信息都被忽略掉。
   </simpara>
   <simpara>
    如果激活了 <link linkend="ini.track-errors"><option>track_errors</option></link>
    特性，表达式所产生的任何错误信息都被存放在变量
    <varname>$php_errormsg</varname>
    中。此变量在每次出错时都会被覆盖，所以如果想用它的话就要尽早检查。
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
/* Intentional file error */
$my_file = @file ('non_existent_file') or
    die ("Failed opening file: error was '$php_errormsg'");

// this works for any expression, not just functions:
$value = @$cache[$key];
// will not issue a notice if the index $key doesn't exist.

?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <note>
    <simpara>
     @ 运算符只对<link linkend="language.expressions">表达式</link>有效。对新手来说一个简单的规则就是：如果能从某处得到值，就能在它前面加上
     @ 运算符。例如，可以把它放在变量，函数和 <function>include</function>
     调用，常量，等等之前。不能把它放在函数或类的定义之前，也不能用于条件结构例如
     <literal>if</literal> 和 <literal>foreach</literal> 等。
    </simpara>
   </note>
   <simpara>
    参见 <function>error_reporting</function>
    及手册中<link linkend="ref.errorfunc">错误处理及日志函数</link>的有关章节。
   </simpara>
   <warning>
    <para>
     目前的“@”错误控制运算符前缀甚至使导致脚本终止的严重错误的错误报告也失效。这意味着如果在某个不存在或类型错误的函数调用前用了“@”来抑制错误信息，那脚本会没有任何迹象显示原因而死在那里。
    </para>
   </warning>
  </sect1>

  <sect1 xml:id="language.operators.execution">
   <title>执行运算符</title>
   <para>
    PHP 支持一个执行运算符：反引号（``）。注意这不是单引号！PHP 将尝试将反引号中的内容作为外壳命令来执行，并将其输出信息返回（例如，可以赋给一个变量而不是简单地丢弃到标准输出）。使用反引号运算符“`”的效果与函数 <function>shell_exec</function> 相同。
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$output = `ls -al`;
echo "<pre>$output</pre>";
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <note>
    <para>
     反引号运算符在激活了&safemode;或者关闭了 <function>shell_exec</function> 时是无效的。
    </para>
   </note>
   <para>
    参见函数 <function>popen</function>、<function>proc_open</function>
    及手册中<link linkend="ref.exec">程序执行函数</link>和
    <link linkend="features.commandline">PHP 的命令行模式</link>的有关章节。
   </para>
  </sect1>

  <sect1 xml:id="language.operators.increment">
   <title>递增／递减运算符</title>
   <para>
    PHP 支持 C 风格的前／后递增与递减运算符。
   </para>
   <note>
    <simpara>
     递增／递减运算符不影响布尔值。递减
     &null; 值也没有效果，但是递增 &null; 的结果是 <literal>1</literal>。
    </simpara>
   </note>
   <table>
    <title>递增／递减运算符</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>例子</entry>
       <entry>名称</entry>
       <entry>效果</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>++$a</entry>
       <entry>前加</entry>
       <entry>$a 的值加一，然后返回 $a。</entry>
      </row>
      <row>
       <entry>$a++</entry>
       <entry>后加</entry>
       <entry>返回 $a，然后将 $a 的值加一。</entry>
      </row>
      <row>
       <entry>--$a</entry>
       <entry>前减</entry>
       <entry>$a 的值减一， 然后返回 $a。</entry>
      </row>
      <row>
       <entry>$a--</entry>
       <entry>后减</entry>
       <entry>返回 $a，然后将 $a 的值减一。</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <para>
    一个简单的示例脚本：
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
echo "<h3>Postincrement</h3>";
$a = 5;
echo "Should be 5: " . $a++ . "<br />\n";
echo "Should be 6: " . $a . "<br />\n";

echo "<h3>Preincrement</h3>";
$a = 5;
echo "Should be 6: " . ++$a . "<br />\n";
echo "Should be 6: " . $a . "<br />\n";

echo "<h3>Postdecrement</h3>";
$a = 5;
echo "Should be 5: " . $a-- . "<br />\n";
echo "Should be 4: " . $a . "<br />\n";

echo "<h3>Predecrement</h3>";
$a = 5;
echo "Should be 4: " . --$a . "<br />\n";
echo "Should be 4: " . $a . "<br />\n";
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    在处理字符变量的算数运算时，PHP 沿袭了 Perl 的习惯，而非 C 的。例如，在
    Perl 中 'Z'+1 将得到 'AA'，而在 C 中，'Z'+1 将得到
    '['（ord('Z') == 90，ord('[') == 91）。注意字符变量只能递增，不能递减，并且只支持纯字母（a-z 和 A-Z）。
    <example>
     <title>涉及字符变量的算数运算</title>
     <programlisting role="php">
<![CDATA[
<?php
$i = 'W';
for ($n=0; $n<6; $n++) {
    echo ++$i . "\n";
}
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
X
Y
Z
AA
AB
AC
]]>
     </screen>
    </example>
   </para>
   <para>
    递增或递减布尔值没有效果。
   </para>
  </sect1>

  <sect1 xml:id="language.operators.logical">
   <title>逻辑运算符</title>

   <table>
    <title>逻辑运算符</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>例子</entry>
       <entry>名称</entry>
       <entry>结果</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>$a and $b</entry>
       <entry>And（逻辑与）</entry>
       <entry>&true;，如果 $a 与 $b 都为 &true;。</entry>
      </row>
      <row>
       <entry>$a or $b</entry>
       <entry>Or（逻辑或）</entry>
       <entry>&true;，如果 $a 或 $b 任一为 &true;。</entry>
      </row>
      <row>
       <entry>$a xor $b</entry>
       <entry>Xor（逻辑异或）</entry>
       <entry>&true;，如果 $a 或 $b 任一为 &true;，但不同时是。</entry>
      </row>
      <row>
       <entry>! $a</entry>
       <entry>Not（逻辑非）</entry>
       <entry>&true;，如果 $a 不为 &true;。</entry>
      </row>
      <row>
       <entry>$a &amp;&amp; $b</entry>
       <entry>And（逻辑与）</entry>
       <entry>&true;，如果 $a 与 $b 都为 &true;。</entry>
      </row>
      <row>
       <entry>$a || $b</entry>
       <entry>Or（逻辑或）</entry>
       <entry>&true;，如果 $a 或 $b 任一为 &true;。</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <simpara>
    “与”和“或”有两种不同形式运算符的原因是它们运算的优先级不同（见<link linkend="language.operators.precedence">运算符优先级</link>）。
   </simpara>
   <example>
    <title>逻辑运算符示例</title>
    <programlisting role="php">
<![CDATA[
<?php

// 下面的 foo() 不会被调用，因为它们被运算符“短路”了。
$a = (false && foo());
$b = (true  || foo());
$c = (false and foo());
$d = (true  or  foo());

// "||" 的优先级比 "or" 高
$e = false || true; // $e 被赋值为 (false || true)，结果为 true
$f = false or true; // $f 被赋值为 false [Altair注："=" 的优先级比 "or" 高]
var_dump($e, $f);

// "&&" 的优先级比 "and"　高
$g = true && false; // $g 被赋值为 (true && false)，结果为 false
$h = true and false; // $h 被赋值为 true [Altair注："=" 的优先级比 "and" 高]
var_dump($g, $h);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
bool(true)
bool(false)
bool(false)
bool(true)
]]>
    </screen>
   </example>   
  </sect1>

  <sect1 xml:id="language.operators.string">
   <title>字符串运算符</title>
   <simpara>
    有两个<type>字符串</type>运算符。第一个是连接运算符（“.”），它返回其左右参数连接后的字符串。第二个是连接赋值运算符（“.=”），它将右边参数附加到左边的参数后。更多信息见<link
    linkend="language.operators.assignment">赋值运算符</link>。
   </simpara>

   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$a = "Hello ";
$b = $a . "World!"; // now $b contains "Hello World!"

$a = "Hello ";
$a .= "World!";     // now $a contains "Hello World!"
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    参见<link linkend="language.types.string">字符串类型</link>和<link linkend="ref.strings">字符串函数</link>章节。
   </para>
  </sect1>

  <sect1 xml:id="language.operators.array">
   <title>数组运算符</title>
   <table>
    <title>数组运算符</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>例子</entry>
       <entry>名称</entry>
       <entry>结果</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>$a + $b</entry>
       <entry>联合</entry>
       <entry>$a 和 $b 的联合。</entry>
      </row>
      <row>
       <entry>$a == $b</entry>
       <entry>相等</entry>
       <entry>如果 $a 和 $b 具有相同的键／值对则为 &true;。</entry>
      </row>
      <row>
       <entry>$a === $b</entry>
       <entry>全等</entry>
       <entry>如果 $a 和 $b 具有相同的键／值对并且顺序和类型都相同则为 &true;。</entry>
      </row>
      <row>
       <entry>$a != $b</entry>
       <entry>不等</entry>
       <entry>如果 $a 不等于 $b 则为 &true;。</entry>
      </row>
      <row>
       <entry>$a &lt;&gt; $b</entry>
       <entry>不等</entry>
       <entry>如果 $a 不等于 $b 则为 &true;。</entry>
      </row>
      <row>
       <entry>$a !== $b</entry>
       <entry>不全等</entry>
       <entry>如果 $a 不全等于 $b 则为 &true;。</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <para>
    <literal>+</literal> 运算符把右边的数组元素（除去键值与左边的数组元素相同的那些元素）附加到左边的数组后面，但是重复的键值不会被覆盖。
   </para>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$a = array("a" => "apple", "b" => "banana");
$b = array("a" => "pear", "b" => "strawberry", "c" => "cherry");

$c = $a + $b; // Union of $a and $b
echo "Union of \$a and \$b: \n";
var_dump($c);

$c = $b + $a; // Union of $b and $a
echo "Union of \$b and \$a: \n";
var_dump($c);
?>
]]>
     </programlisting>
    </informalexample>
    执行后，此脚本会显示：
    <screen role="php">
<![CDATA[
Union of $a and $b:
array(3) {
  ["a"]=>
  string(5) "apple"
  ["b"]=>
  string(6) "banana"
  ["c"]=>
  string(6) "cherry"
}
Union of $b and $a:
array(3) {
  ["a"]=>
  string(4) "pear"
  ["b"]=>
  string(10) "strawberry"
  ["c"]=>
  string(6) "cherry"
}
]]>
    </screen>
   </para>
   <para>
    数组中的单元如果具有相同的键名和值则比较时相等。
   </para>
   <para>
    <example>
     <title>比较数组</title>
     <programlisting role="php">
<![CDATA[
<?php
$a = array("apple", "banana");
$b = array(1 => "banana", "0" => "apple");

var_dump($a == $b); // bool(true)
var_dump($a === $b); // bool(false)
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    参见<link linkend="language.types.array">数组类型</link>和<link
    linkend="ref.array">数组函数</link>章节。
   </para>
  </sect1>

  <sect1 xml:id="language.operators.type">
   <title>类型运算符</title>
   <para>
    <literal>instanceof</literal> 用于确定一个 PHP 变量是否属于某一类 
    <link linkend="language.oop5.basic.class">class</link> 的实例：
    <example>
     <title>instanceof 使用示例</title>
     <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
}

class NotMyClass
{
}
$a = new MyClass;

var_dump($a instanceof MyClass);
var_dump($a instanceof NotMyClass);
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
bool(true)
bool(false)
]]>
     </screen>
    </example>
   </para>
   <para>
    <literal>instanceof</literal>　也可用来确定一个变量是不是继承自某一父类的子类的实例：
     can also be used to determine whether a variable
    is an instantiated object of a class that inherits from a parent class:
    <example>
     <title>instanceof 与继承类示例</title>
     <programlisting role="php">
<![CDATA[
<?php
class ParentClass
{
}

class MyClass extends ParentClass
{
}

$a = new MyClass;

var_dump($a instanceof MyClass);
var_dump($a instanceof ParentClass);
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
bool(true)
bool(true)
]]>
     </screen>
    </example>
   </para>
   <para>
    检查一个对象 <emphasis>不是</emphasis> 某个类的实例，可以使用 <link 
    linkend="language.operators.logical">逻辑运算符 <literal>not</literal></link>。
    <example>
     <title>使用instanceof检查对象 <emphasis>不是</emphasis> 某一类的实例</title>
     <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
}

$a = new MyClass;
var_dump(!($a instanceof stdClass));
?>
]]>
     </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(true)
]]>
     </screen>
    </example>
   </para>
   <para>
    最后，<literal>instanceof</literal>也可用于确定一个变量是不是实现了某个<link 
    linkend="language.oop5.interfaces">接口</link>的对象的实例:
    <example>
     <title>Using instanceof for class</title>
     <programlisting role="php">
<![CDATA[
<?php
interface MyInterface
{
}

class MyClass implements MyInterface
{
}

$a = new MyClass;

var_dump($a instanceof MyClass);
var_dump($a instanceof MyInterface);
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
bool(true)
bool(true)
]]>
     </screen>
    </example>
   </para>
   <para>
    虽然 <literal>instanceof</literal> 通常直接与类名一起使用，但也可以使用对象或字符串变量：
    <example>
     <title>Using instanceof with other variables</title>
     <programlisting role="php">
<![CDATA[
<?php
interface MyInterface
{
}

class MyClass implements MyInterface
{
}

$a = new MyClass;
$b = new MyClass;
$c = 'MyClass';
$d = 'NotMyClass';

var_dump($a instanceof $b); // $b is an object of class MyClass
var_dump($a instanceof $c); // $c is a string 'MyClass'
var_dump($a instanceof $d); // $d is a string 'NotMyClass'
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(true)
bool(true)
bool(false)
]]>
     </screen>
    </example>
   </para>
   <para>
    然而 instanceof 的使用还有一些陷阱必须了解。在
    PHP 5.1.0之前，如果要检查的类名称不存在，<literal>instanceof</literal> 会调用 <link
    linkend="language.oop5.autoload">__autoload()</link>。另外，如果该类没有被装载则会产生一个致命错误。可以通过使用<literal>动态类引用(dynamic 
    class reference)</literal>或用一个包含类名的字符串变量来避开这种问题：
    <example>
     <title>避免 PHP 5.0 中 instanceof 引起的类名查找和致命错误问题</title>
     <programlisting role="php">
<![CDATA[
<?php
$d = 'NotMyClass';
var_dump($a instanceof $d); // no fatal error here
?>
     ]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(false)
]]>
     </screen>
    </example>
   </para>
   <simpara>
    <literal>instanceof</literal> 运算符是 PHP 5 引进的。在此之前用
    <function>is_a</function>，但是
    <function>is_a</function> 已经过时了，最好用 <literal>instanceof</literal>。
   </simpara>
   <para>
    参见 <function>get_class</function> 和
    <function>is_a</function>。
   </para>
  </sect1>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
