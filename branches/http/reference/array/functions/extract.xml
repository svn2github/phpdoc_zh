<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.2 $ -->
<!-- $Author: dallas $ -->
<!-- EN-Revision: 1.6 Maintainer: dallas Status: ready -->
  <refentry id="function.extract">
   <refnamediv>
    <refname>extract</refname>
    <refpurpose>
     从数组中将变量导入到当前的符号表
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>说明</title>
     <methodsynopsis>
      <type>int</type><methodname>extract</methodname>
      <methodparam><type>array</type><parameter>var_array</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>extract_type</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>prefix</parameter></methodparam>
     </methodsynopsis>
    <para>
     本函数用来将变量从数组中导入到当前的符号表中。接受结合数组
     <parameter>var_array</parameter> 作为参数并将键名当作变量名，值作为变量的值。对每个键／值对都会在当前的符号表中建立变量，并受到
     <parameter>extract_type</parameter> 和 <parameter>prefix</parameter> 参数的影响。
    </para>
    <note>
     <para>
      自版本 4.0.5 起本函数返回被提取的变量数目。
     </para>
    </note>
    <note>
     <para>
      EXTR_IF_EXISTS 和 EXTR_PREFIX_IF_EXISTS 是版本 4.2.0 中引进的。
     </para>
    </note>
    <para>
     <function>extract</function> 检查每个键名看是否可以作为一个合法的变量名，同时也检查和符号表中已有的变量名的冲突。对待非法／数字和冲突的键名的方法将根据
     <parameter>extract_type</parameter> 参数决定。可以是以下值之一：
     <variablelist>
      <varlistentry>
       <term>EXTR_OVERWRITE</term>
       <listitem>
        <simpara>
         如果有冲突，覆盖已有的变量。
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>EXTR_SKIP</term>
       <listitem>
        <simpara>
         如果有冲突，不覆盖已有的变量。
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>EXTR_PREFIX_SAME</term>
       <listitem>
        <simpara>如果有冲突，在变量名前加上前缀 <parameter>prefix</parameter>。
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>EXTR_PREFIX_ALL</term>
       <listitem>
        <simpara>
         给所有变量名加上前缀
         <parameter>prefix</parameter>。自 PHP 4.0.5 起这也包括了对数字索引的处理。
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>EXTR_PREFIX_INVALID</term>
       <listitem>
        <simpara>
         仅在非法／数字的变量名前加上前缀
         <parameter>prefix</parameter>。本标记是 PHP 4.0.5 新加的。
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>EXTR_IF_EXISTS</term>
       <listitem>
        <simpara>
         仅在当前符号表中已有同名变量时，覆盖它们的值。其它的都不处理。可以用在已经定义了一组合法的变量，然后要从一个数组例如
         $_REQUEST 中提取值覆盖这些变量的场合。本标记是 PHP 4.2.0 新加的。
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>EXTR_PREFIX_IF_EXISTS</term>
       <listitem>
        <simpara>
         仅在当前符号表中已有同名变量时，建立附加了前缀的变量名，其它的都不处理。本标记是 PHP 4.2.0 新加的。
        </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
     如果没有指定 <parameter>extract_type</parameter>，则被假定为 EXTR_OVERWRITE。
    </para>
    <para>
     注意 <parameter>prefix</parameter> 仅在
     <parameter>extract_type</parameter> 的值是
     EXTR_PREFIX_SAME，EXTR_PREFIX_ALL，EXTR_PREFIX_INVALID 或 EXTR_PREFIX_IF_EXISTS
     时需要。如果附加了前缀后的结果不是合法的变量名，将不会导入到符号表中。
    </para>
    <para>
     <function>extract</function> 返回成功导入到符号表中的变量数目。
    </para>
    <para>
     一种可能的用法是将 <function>wddx_deserialize</function>
     返回的结合数组中的内容导入到符号表变量中去。
    </para>
    <para>
     <example>
      <title><function>extract</function> 例子</title>
      <programlisting role="php">
<![CDATA[
<?php

/* 假定 $var_array 是 wddx_deserialize 返回的数组*/

$size = "large";
$var_array = array ("color" => "blue",
                    "size"  => "medium",
                    "shape" => "sphere");
extract ($var_array, EXTR_PREFIX_SAME, "wddx");

print "$color, $size, $shape, $wddx_size\n";

?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     以上例子将产生：
     <programlisting>
<![CDATA[
blue, large, sphere, medium
]]>
     </programlisting>
    </para>
    <para>
     <varname>$size</varname> 没有被覆盖，因为指定了
     EXTR_PREFIX_SAME，这使得 <varname>$wddx_size</varname>
     被建立。如果指定了 EXTR_SKIP，则 $wddx_size
     也不会被建立。EXTR_OVERWRITE 将使 <varname>$size</varname>
     的值为“medium”，EXTR_PREFIX_ALL 将建立新变量
     <varname>$wddx_color</varname>，<varname>$wddx_size</varname> 和
     <varname>$wddx_shape</varname>。
    </para>
    <para>
     必须使用结合数组，数字索引的数组将不会产生结果，除非用了
     EXTR_PREFIX_ALL 或者 EXTR_PREFIX_INVALID。
    </para>
    <para>
     参见 <function>compact</function>。
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
