<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.6 $ -->
<!-- $Author: bjori $ -->
<!-- EN-Revision: 1.7 Maintainer: dallas Status: ready -->
<!-- Purpose: basic.php -->
<!-- Membership: pecl -->

<reference xml:id="ref.apd" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>APD 高级 PHP 调试器</title>
 <titleabbrev>APD</titleabbrev>
 <partintro>
    
  <section xml:id="apd.intro">
   &reftitle.intro;
   <para>
    APD 是 Advanced PHP Debugger，即高级 PHP 调试器。是用来给
    PHP 代码提供规划与纠错的能力，以及提供了显示整个堆栈追踪的能力。APD
    支持交互式纠错，但默认是将数据写入跟踪文件。它还提供了基于事件的日志，因此不同级别的信息（包括函数调用，参数传递，计时等）可以对个别的脚本打开或关闭。
    <caution>
     <para>
      APD 是一个 Zend 扩展库，修改了 PHP 内部处理函数调用的方式，因此有可能与其它
      Zend 扩展库（例如 Zend Optimizer）不兼容。
     </para>
    </caution>
   </para>
  </section>

  &reference.apd.configure;

  &reference.apd.ini;

  <section xml:id="apd.resources">
   &reftitle.resources;
   &no.resource;
  </section>

  &reference.apd.constants;

  <section xml:id="apd.examples">
   <title>怎样在脚本中使用 PHP-APD</title>
   <procedure>
    <step>
     <para>
      在 PHP 脚本的第一行调用 apd_set_pprof_trace() 函数来启动跟踪：
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
apd_set_pprof_trace();
]]>
      </programlisting>
     </para>
     <para>
      可以在脚本中任何一行插入这一行，但是如果不是从脚本开头开始跟踪的话，则丢失了部分数据，有可能造成性能上的瓶颈。
     </para>
    </step>
    <step>
     <para>
      然后运行脚本。输出将被写入到 <filename>apd.dumpdir/pprof_pid.ext</filename>。
      <tip>
       <para>
        如果运行的是 CGI 版的 PHP，需要加入 '-e'
        标记启用扩展信息以使 APD 正常工作。例如：
        <userinput>php -e -f script.php</userinput>
       </para>
      </tip>
     </para>
    </step>
    <step>
     <para>
      要显示格式化的调试数据，运行 <command>pprofp</command>
      命令并加上自己选择的排序和显示选项。格式化的输出类似于：
      <screen>
<![CDATA[
bash-2.05b$ pprofp -R /tmp/pprof.22141.0

Trace for /home/dan/testapd.php
Total Elapsed Time = 0.00
Total System Time  = 0.00
Total User Time    = 0.00


Real         User        System             secs/    cumm
%Time (excl/cumm)  (excl/cumm)  (excl/cumm) Calls    call    s/call  Memory Usage Name
--------------------------------------------------------------------------------------
100.0 0.00 0.00  0.00 0.00  0.00 0.00     1  0.0000   0.0009            0 main
56.9 0.00 0.00  0.00 0.00  0.00 0.00     1  0.0005   0.0005            0 apd_set_pprof_trace
28.0 0.00 0.00  0.00 0.00  0.00 0.00    10  0.0000   0.0000            0 preg_replace
14.3 0.00 0.00  0.00 0.00  0.00 0.00    10  0.0000   0.0000            0 str_replace
]]>
      </screen>
     </para>
     <para>
      上例中用的 -R 选项将调试数据表格以脚本执行每个函数所花的时间来排序。"cumm call"
      一列显示了每个函数被调用的次数，"s/call" 一列显示了每个函数每次调用平均所花的秒数。
     </para>
    </step>
    <step>
     <para>
      要生成可以导入到 KCacheGrind 调试分析系统中的调用树文件，运行
      <command>pprof2calltree</command> 命令。
     </para>
    </step>
   </procedure>
  </section>

  <section xml:id="apd.contact">
   <title>联系信息</title>
   <para>
    如果有注解，错误修正，提高或者想帮助开发此扩展，请发送邮件到
    <link xlink:href="mailto:&email.apd;">&email.apd;</link>。欢迎任何帮助。
   </para>
  </section>
 </partintro>

 &reference.apd.entities.functions;

</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
