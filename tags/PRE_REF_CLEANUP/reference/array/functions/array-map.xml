<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.7 $ -->
<!-- $Author: bjori $ -->
<!-- EN-Revision: 1.15 Maintainer: dallas Status: ready -->
  <refentry xml:id="function.array-map" xmlns="http://docbook.org/ns/docbook">
   <refnamediv>
    <refname>array_map</refname>
    <refpurpose>
     将回调函数作用到给定数组的单元上
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>说明</title>
    <methodsynopsis>
     <type>array</type><methodname>array_map</methodname>
     <methodparam><type>callback</type><parameter>callback</parameter></methodparam>
     <methodparam><type>array</type><parameter>arr1</parameter></methodparam>
     <methodparam choice="opt"><type>array</type><parameter>...</parameter></methodparam>
    </methodsynopsis>
    <para>
     <function>array_map</function> 返回一个数组，该数组包含了
     <parameter>arr1</parameter> 中的所有单元经过
     <parameter>callback</parameter> 作用过之后的单元。<parameter>callback</parameter>
     接受的参数数目应该和传递给
     <function>array_map</function> 函数的数组数目一致。
    </para>
    <para>
     <example>
      <title><function>array_map</function> 例子</title>
      <programlisting role="php">
<![CDATA[
<?php
function cube($n)
{
    return($n * $n * $n);
}

$a = array(1, 2, 3, 4, 5);
$b = array_map("cube", $a);
print_r($b);
?>
]]>
      </programlisting>
      <para>
       这使得 <varname>$b</varname> 成为：
      </para>
      <screen>
<![CDATA[
Array
(
    [0] => 1
    [1] => 8
    [2] => 27
    [3] => 64
    [4] => 125
)
]]>
      </screen>
     </example>
    </para>
    <para>
     <example>
      <title><function>array_map</function> - 使用更多的数组</title>
      <programlisting role="php">
<![CDATA[
<?php
function show_Spanish($n, $m)
{
    return("The number $n is called $m in Spanish");
}

function map_Spanish($n, $m)
{
    return(array($n => $m));
}

$a = array(1, 2, 3, 4, 5);
$b = array("uno", "dos", "tres", "cuatro", "cinco");

$c = array_map("show_Spanish", $a, $b);
print_r($c);

$d = array_map("map_Spanish", $a , $b);
print_r($d);
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
// printout of $c
Array
(
    [0] => The number 1 is called uno in Spanish
    [1] => The number 2 is called dos in Spanish
    [2] => The number 3 is called tres in Spanish
    [3] => The number 4 is called cuatro in Spanish
    [4] => The number 5 is called cinco in Spanish
)

// printout of $d
Array
(
    [0] => Array
        (
            [1] => uno
        )

    [1] => Array
        (
            [2] => dos
        )

    [2] => Array
        (
            [3] => tres
        )

    [3] => Array
        (
            [4] => cuatro
        )

    [4] => Array
        (
            [5] => cinco
        )

)
]]>
      </screen>
     </example>
    </para>
    <para>
     通常使用了两个或更多数组时，它们的长度应该相同，因为回调函数是平行作用于相应的单元上的。如果数组的长度不同，则最短的一个将被用空的单元扩充。
    </para>
    <para>
     本函数一个有趣的用法是构造一个数组的数组，这可以很容易的通过用 &null; 作为回调函数名来实现。
    </para>
    <para>
     <example>
      <title>建立一个数组的数组</title>
      <programlisting role="php">
<![CDATA[
<?php
$a = array(1, 2, 3, 4, 5);
$b = array("one", "two", "three", "four", "five");
$c = array("uno", "dos", "tres", "cuatro", "cinco");

$d = array_map(null, $a, $b, $c);
print_r($d);
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
Array
(
    [0] => Array
        (
            [0] => 1
            [1] => one
            [2] => uno
        )

    [1] => Array
        (
            [0] => 2
            [1] => two
            [2] => dos
        )

    [2] => Array
        (
            [0] => 3
            [1] => three
            [2] => tres
        )

    [3] => Array
        (
            [0] => 4
            [1] => four
            [2] => cuatro
        )

    [4] => Array
        (
            [0] => 5
            [1] => five
            [2] => cinco
        )

)
]]>
      </screen>
     </example>
    </para>
    <para>
     参见 <function>array_filter</function>，<function>array_reduce</function>，<function>array_walk</function>
     和&seealso.callback;。
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
