<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.9 $ -->
<!-- $Author: bjori $ -->
<!-- EN-Revision: 1.13 Maintainer: class007 Status: ready -->
  <refentry xml:id="function.xml-parse-into-struct" xmlns="http://docbook.org/ns/docbook">
   <refnamediv>
    <refname>xml_parse_into_struct</refname>
    <refpurpose>将 XML 数据解析到数组中</refpurpose>
   </refnamediv>
   <refsect1>
    <title>说明</title>
    <methodsynopsis>
     <type>int</type><methodname>xml_parse_into_struct</methodname>
     <methodparam><type>resource</type><parameter>parser</parameter></methodparam>
     <methodparam><type>string</type><parameter>data</parameter></methodparam>
     <methodparam><type>array</type><parameter role="reference">values</parameter></methodparam>
     <methodparam choice="opt"><type>array</type><parameter role="reference">index</parameter></methodparam>
    </methodsynopsis>
    <para>
	 该函数将 XML 文件解析到两个对应的数组中，<parameter>index</parameter>
	 参数含有指向 <parameter>values</parameter>
	 数组中对应值的指针。最后两个数组参数可由指针传递给函数。
    </para>
    <note>
     <para>
      <function>xml_parse_into_struct</function> 失败返回 0，成功返回
      1。这和 &false; 与
      &true; 不同，使用例如 === 的运算符时要注意。
     </para>
    </note>
    <para>
	 以下范例显示了由该函数生成的数组的内部结构。我们简单地将一个
	 <literal>note</literal> 嵌入到一个 <literal>para</literal>
	 标记中，解析后我们可以打印出生成的数组的结构：
     <example>
      <title><function>xml_parse_into_struct</function> 示例</title>
      <programlisting role="php">
<![CDATA[
<?php
$simple = "<para><note>simple note</note></para>";
$p = xml_parser_create();
xml_parse_into_struct($p, $simple, $vals, $index);
xml_parser_free($p);
echo "Index array\n";
print_r($index);
echo "\nVals array\n";
print_r($vals);
?>
]]>
      </programlisting>
     <para>
	 运行以上代码，我们得到的输出将是：
     </para>
      <screen>
<![CDATA[
Index array
Array
(
    [PARA] => Array
        (
            [0] => 0
            [1] => 2
        )

    [NOTE] => Array
        (
            [0] => 1
        )

)

Vals array
Array
(
    [0] => Array
        (
            [tag] => PARA
            [type] => open
            [level] => 1
        )

    [1] => Array
        (
            [tag] => NOTE
            [type] => complete
            [level] => 2
            [value] => simple note
        )

    [2] => Array
        (
            [tag] => PARA
            [type] => close
            [level] => 1
        )

)
]]>
      </screen>
     </example>
    </para>
    <para>
	 如果您的 XML 文档很复杂，基于该文档的事件处理（Event-driven）解析（基于 expat 扩展库）也会对应的变得复杂。该函数生成的并非 DOM 风格的对象，而是横向的树状结构。因此，我们能够方便的建立表达 XML 文件数据的对象。我们假设以下 XML 文件表示一个关于氨基酸信息的小型数据库：
     <example>
      <title>moldb.xml - 分子信息的小型数据库</title>
      <programlisting role="xml">
<![CDATA[
<?xml version="1.0"?>
<moldb>

    <molecule>
        <name>Alanine</name>
        <symbol>ala</symbol>
        <code>A</code>
        <type>hydrophobic</type>
    </molecule>

    <molecule>
        <name>Lysine</name>
        <symbol>lys</symbol>
        <code>K</code>
        <type>charged</type>
    </molecule>

</moldb>
]]>
      </programlisting>
     </example>
	 以下是解析该文档并生成相应对象的代码：
     <example>
      <title>
       parsemoldb.php - 将 moldb.xml 解析到分子（molecular）对象的数组中
      </title>
      <programlisting role="php">
<![CDATA[
<?php

class AminoAcid {
    var $name;  // aa 姓名
    var $symbol;    // 三字母符号
    var $code;  // 单字母代码
    var $type;  // hydrophobic, charged 或 neutral

    function AminoAcid ($aa)
    {
        foreach ($aa as $k=>$v)
            $this->$k = $aa[$k];
    }
}

function readDatabase($filename)
{
    // 读取 aminoacids 的 XML 数据
    $data = implode("",file($filename));
    $parser = xml_parser_create();
    xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, 0);
    xml_parser_set_option($parser, XML_OPTION_SKIP_WHITE, 1);
    xml_parse_into_struct($parser, $data, $values, $tags);
    xml_parser_free($parser);

    // 遍历 XML 结构
    foreach ($tags as $key=>$val) {
        if ($key == "molecule") {
            $molranges = $val;
            // each contiguous pair of array entries are the
            // lower and upper range for each molecule definition
            for ($i=0; $i < count($molranges); $i+=2) {
                $offset = $molranges[$i] + 1;
                $len = $molranges[$i + 1] - $offset;
                $tdb[] = parseMol(array_slice($values, $offset, $len));
            }
        } else {
            continue;
        }
    }
    return $tdb;
}

function parseMol($mvalues)
{
    for ($i=0; $i < count($mvalues); $i++) {
        $mol[$mvalues[$i]["tag"]] = $mvalues[$i]["value"];
    }
    return new AminoAcid($mol);
}

$db = readDatabase("moldb.xml");
echo "** Database of AminoAcid objects:\n";
print_r($db);

?>
]]>
      </programlisting>
     </example>
	 在执行完 <filename>parsemoldb.php</filename> 后，变量 <varname>$db</varname> 将包含有一个由 <classname>AminoAcid</classname> 对象组成的数组，该脚本的输出如下：
     <informalexample>
      <screen>
<![CDATA[
** Database of AminoAcid objects:
Array
(
    [0] => aminoacid Object
        (
            [name] => Alanine
            [symbol] => ala
            [code] => A
            [type] => hydrophobic
        )

    [1] => aminoacid Object
        (
            [name] => Lysine
            [symbol] => lys
            [code] => K
            [type] => charged
        )

)
]]>
      </screen>
     </informalexample>
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
