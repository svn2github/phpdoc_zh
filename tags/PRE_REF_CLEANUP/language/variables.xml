<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.21 $ -->
<!-- $Author: bjori $ -->
<!-- EN-Revision: 1.90 Maintainer: verdana Status: ready -->
<!-- CREDITS: dallas, Gregory -->
 <chapter xml:id="language.variables" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>变量</title>

  <sect1 xml:id="language.variables.basics">
   <title>基础</title>

   <simpara>
    PHP 中的变量用一个美元符号后面跟变量名来表示。变量名是区分大小写的。
   </simpara>

   <para>
    变量名与 PHP
    中其它的标签一样遵循相同的规则。一个有效的变量名由字母或者下划线开头，后面跟上任意数量的字母，数字，或者下划线。按照正常的正则表达式，它将被表述为：'[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*'。
   </para>

   <note>
    <simpara>
     在此所说的字母是 a-z，A-Z，以及 ASCII 字符从 127 到 255（0x7f-0xff）。
    </simpara>
   </note>
   <para>
    有关变量的函数信息见<link linkend="ref.var">变量函数</link>。
   </para>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$var = 'Bob';
$Var = 'Joe';
echo "$var, $Var";      // 输出 "Bob, Joe"

$4site = 'not yet';     // 非法变更名；以数字开头
$_4site = 'not yet';    // 合法变量名；以下划线开头
$i站点is = 'mansikka';  // 合法变量名；可以用中文
?>
]]>
     </programlisting>
    </informalexample>
   </para>

   <para>
    PHP 3 中，变量总是传值赋值。那也就是说，当将一个表达式的值赋予一个变量时，整个原始表达式的值被赋值到目标变量。这意味着，例如，当一个变量的值赋予另外一个变量时，改变其中一个变量的值，将不会影响到另外一个变量。有关这种类型的赋值操作，请参阅<link linkend="language.expressions">表达式</link>一章。
   </para>
   <para>
    PHP 4 提供了另外一种方式给变量赋值：<link linkend="language.references">引用赋值</link>。这意味着新的变量简单的引用（换言之，“成为其别名” 或者 “指向”）了原始变量。改动新的变量将影响到原始变量，反之亦然。
   </para>
   <para>
    使用引用赋值，简单地将一个 &amp;
    符号加到将要赋值的变量前（源变量）。例如，下列代码片断将输出“My name is Bob”两次：
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$foo = 'Bob';              // Assign the value 'Bob' to $foo
$bar = &$foo;              // Reference $foo via $bar.
$bar = "My name is $bar";  // Alter $bar...
echo $bar;
echo $foo;                 // $foo is altered too.
?>
]]>
     </programlisting>
    </informalexample>
   </para>

   <para>
    有一点重要事项必须指出，那就是只有有名字的变量才可以引用赋值。
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$foo = 25;
$bar = &$foo;      // This is a valid assignment.
$bar = &(24 * 7);  // Invalid; references an unnamed expression.

function test()
{
   return 25;
}

$bar = &test();    // Invalid.
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    虽然在 PHP 中并不需要初始化变量，但这是个好习惯。未初始化的变量具有其类型的默认值 -
    &false;，零，空字符串或者空数组。
   </para>
   <para>
    <example>
     <title>未初始化变量的默认值</title>
     <programlisting role="php">
<![CDATA[
<?php
echo ($unset_bool ? "true" : "false"); // false
$unset_int += 25; // 0 + 25 => 25
echo $unset_string . "abc"; // "" . "abc" => "abc"
$unset_array[3] = "def"; // array() + array(3 => "def") => array(3 => "def")
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    依赖未初始化变量的默认值在某些情况下会有问题，例如把一个文件包含到另一个之中时碰上相同的变量名。另外把
    <link linkend="ini.register-globals">register_globals</link> 打开是一个主要的<link 
    linkend="security.globals">安全隐患</link>。<link linkend="e-notice">E_NOTICE</link>
    级别的错误会在碰上未初始化的变量时发出，但是在向一个未初始化的数组附加单元时不会。<function>isset</function>
    语言结构可以用来检测一个变量是否已被初始化。
   </para>
  </sect1>

  <sect1 xml:id="language.variables.predefined">
   <title>预定义变量</title>

   <simpara>
    PHP 提供了大量的预定义变量。由于许多变量依赖于运行的服务器的版本和设置，及其它因素，所以并没有详细的说明文档。一些预定义变量在
    PHP 以<link linkend="features.commandline">命令行</link>形式运行时并不生效。有关这些变量的详细列表，请参阅<link
    linkend="reserved.variables">预定义变量</link>一章。
   </simpara>

   <warning>
    <simpara>
     PHP 4.2.0 以及后续版本中，PHP 指令 <link
     linkend="ini.register-globals">register_globals</link> 的默认值为
     <emphasis>off</emphasis>。这是 PHP 的一个主要变化。让 register_globals 的值为
     <emphasis>off</emphasis> 将影响到预定义变量集在全局范围内的有效性。例如，为了得到
     <varname>DOCUMENT_ROOT</varname> 的值，将必须使用
     <varname>$_SERVER['DOCUMENT_ROOT']</varname> 代替
     <varname>$DOCUMENT_ROOT</varname>，又如，使用
     <varname>$_GET['id']</varname> 来代替 <varname>$id</varname> 从 URL
     <literal>http://www.example.com/test.php?id=3</literal> 中获取
     id 值，亦或使用 <varname>$_ENV['HOME']</varname> 来代替
     <varname>$HOME</varname> 获取环境变量 HOME 的值。
    </simpara>
    <simpara>
     更多相关信息，请阅读 <link
     linkend="ini.register-globals">register_globals</link>
     的配置项条目，安全一章中的<link
     linkend="security.globals">使用 Register Globals</link>，以及 PHP
     <link xlink:href="&url.php.release4.1.0;">4.1.0</link> 和
     <link xlink:href="&url.php.release4.2.0;">4.2.0</link> 的发行通告。
    </simpara>
    <simpara>
     如果有可用的 PHP 预定义变量那最好用，如<link
     linkend="language.variables.superglobals">超全局变量</link>。
    </simpara>
   </warning>

   <simpara>
    从 PHP 4.1.0 开始，PHP 提供了一套附加的预定数组，这些数组变量包含了来自 web
    服务器（如果可用），运行环境，和用户输入的数据。这些数组非常特别，它们在全局范围内自动生效，例如，在任何范围内自动生效。因此通常被称为自动全局变量（autoglobals）或者超全局变量（superglobals）。（PHP
    中没有用户自定义超全局变量的机制。）超全局变量罗列于下文中；但是为了得到它们的内容和关于
    PHP 预定义变量的进一步的讨论以及它们的本质，请参阅<link
    linkend="reserved.variables">预定义变量</link>。而且，你也将注意到旧的预定义数组（<varname>$HTTP_*_VARS</varname>）仍旧存在。&avail.register-long-arrays;
   </simpara>

   <note>
    <title>可变变量</title>
    <para>
     超级全局变量不能被用作<link linkend="language.variables.variable">可变变量</link>。
    </para>
   </note>
    <note>
    <para>
     尽管超全局变量和 HTTP_*_VARS
     同时存在。但是他们并不是同一个变量，所以改变一个的值并不会对另一个产生影响。
    </para>
   </note>

   <para>
    如果某些 <link linkend="ini.variables-order">variables_order</link>
    中的变量没有设定，它们的对应的 PHP 预定义数组也是空的。
   </para>

   <variablelist xml:id="language.variables.superglobals">
    <title>PHP 超全局变量</title>
    <varlistentry>
     <term><link linkend="reserved.variables.globals">$GLOBALS</link></term>
     <listitem>
      <simpara>
       包含一个引用指向每个当前脚本的全局范围内有效的变量。该数组的键名为全局变量的名称。从
       PHP 3 开始存在 <varname>$GLOBALS</varname> 数组。
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><link linkend="reserved.variables.server">$_SERVER</link></term>
     <listitem>
      <simpara>
       变量由 web 服务器设定或者直接与当前脚本的执行环境相关联。类似于旧数组 <varname>$HTTP_SERVER_VARS</varname>
       数组（依然有效，但反对使用）。
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><link linkend="reserved.variables.get">$_GET</link></term>
     <listitem>
      <simpara>
       经由 URL 请求提交至脚本的变量。类似于旧数组 <varname>$HTTP_GET_VARS</varname>
       数组（依然有效，但反对使用）。
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><link linkend="reserved.variables.post">$_POST</link></term>
     <listitem>
      <simpara>
       经由 HTTP POST 方法提交至脚本的变量。类似于旧数组 <varname>$HTTP_POST_VARS</varname>
       数组（依然有效，但反对使用）。
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><link linkend="reserved.variables.cookies">$_COOKIE</link></term>
     <listitem>
      <simpara>
       经由 HTTP Cookies 方法提交至脚本的变量。类似于旧数组 <varname>$HTTP_COOKIE_VARS</varname>
       数组（依然有效，但反对使用）。
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><link linkend="reserved.variables.files">$_FILES</link></term>
     <listitem>
      <simpara>
       经由 HTTP POST 文件上传而提交至脚本的变量。类似于旧数组 <varname>$HTTP_POST_FILES</varname>
       数组（依然有效，但反对使用）。详细信息请参阅 <link linkend="features.file-upload.post-method">POST 方法上传</link>。
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><link linkend="reserved.variables.environment">$_ENV</link></term>
     <listitem>
      <simpara>
       执行环境提交至脚本的变量。类似于旧数组 <varname>$HTTP_ENV_VARS</varname>
       数组（依然有效，但反对使用）。
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><link linkend="reserved.variables.request">$_REQUEST</link></term>
     <listitem>
      <simpara>
       经由 GET，POST 和 COOKIE
       机制提交至脚本的变量，因此该数组并不值得信任。所有包含在该数组中的变量的存在与否以及变量的顺序均按照
       &php.ini; 中的 <link linkend="ini.variables-order">variables_order</link>
       配置指示来定义。此数组在 PHP 4.1.0 之前没有直接对应的版本。参见
       <function>import_request_variables</function>。
      </simpara>
      <caution>
       <simpara>
        自 PHP 4.3.0 起，<varname>$_FILES</varname> 中的文件信息不再存在于
        <varname>$_REQUEST</varname> 中。
       </simpara>
      </caution>
      <note>
       <simpara>
        当运行于<link linkend="features.commandline">命令行</link>模式时，此数组将<emphasis>不会</emphasis>包含
        <varname>argv</varname> 和 <varname>argc</varname> 条目；它们已经存在于数组
        <varname>$_SERVER</varname> 中。
       </simpara>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><link linkend="reserved.variables.session">$_SESSION</link></term>
     <listitem>
      <simpara>
       当前注册给脚本会话的变量。类似于旧数组
       <varname>$HTTP_SESSION_VARS</varname> 数组（依然有效，但反对使用）。详细信息，请参照
       <link linkend="ref.session">Session 处理函数</link>章节。
      </simpara>
     </listitem>
    </varlistentry>
   </variablelist>

  </sect1>


  <sect1 xml:id="language.variables.scope">
   <title>变量范围</title>

   <simpara>
    变量的范围即它定义的上下文背景（也就是它的生效范围）。大部分的
    PHP 变量只有一个单独的范围。这个单独的范围跨度同样包含了
    include 和 require 引入的文件。例如：
   </simpara>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$a = 1;
include 'b.inc';
?>
]]>
    </programlisting>
   </informalexample>
   <simpara>
    这里变量 <varname>$a</varname> 将会在包含文件
    <filename>b.inc</filename> 中生效。但是，在用户自定义函数中，一个局部函数范围将被引入。任何用于函数内部的变量按缺省情况将被限制在局部函数范围内。例如：
   </simpara>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$a = 1; /* global scope */

function Test()
{
    echo $a; /* reference to local scope variable */
}

Test();
?>
]]>
    </programlisting>
   </informalexample>

   <simpara>
    这个脚本不会有任何输出，因为 echo 语句引用了一个局部版本的变量
    <varname>$a</varname>，而且在这个范围内，它并没有被赋值。你可能注意到
    PHP 的全局变量和 C 语言有一点点不同，在 C
    语言中，全局变量在函数中自动生效，除非被局部变量覆盖。这可能引起一些问题，有些人可能漫不经心的改变一个全局变量。PHP
    中全局变量在函数中使用时必须申明为全局。
   </simpara>

   <sect2 xml:id="language.variables.scope.global">
    <title>global 关键字</title>
    <simpara>
     首先，一个使用 <literal>global</literal> 的例子：
    </simpara>
    <para>
     <example>
      <title>使用 global</title>
      <programlisting role="php">
<![CDATA[
<?php
$a = 1;
$b = 2;

function Sum()
{
    global $a, $b;

    $b = $a + $b;
}

Sum();
echo $b;
?>
]]>
      </programlisting>
     </example>
    </para>

    <simpara>
     以上脚本的输出将是“3”。在函数中申明了全局变量
     <varname>$a</varname> 和 <varname>$b</varname>，任何变量的所有引用变量都会指向到全局变量。对于一个函数能够申明的全局变量的最大个数，PHP 没有限制。
    </simpara>

    <simpara>
     在全局范围内访问变量的第二个办法，是用特殊的 PHP 自定义
     <varname>$GLOBALS</varname> 数组。前面的例子可以写成：
    </simpara>

    <para>
     <example>
      <title>使用 <varname>$GLOBALS</varname> 替代 global</title>
      <programlisting role="php">
<![CDATA[
<?php
$a = 1;
$b = 2;

function Sum()
{
    $GLOBALS['b'] = $GLOBALS['a'] + $GLOBALS['b'];
}

Sum();
echo $b;
?>
]]>
      </programlisting>
     </example>
    </para>

    <simpara>
     在 <varname>$GLOBALS</varname>
     数组中，每一个变量为一个元素，键名对应变量名，值对应变量的内容。<varname>$GLOBALS</varname>
     之所以在全局范围内存在，是因为 $GLOBALS 是一个<link
     linkend="language.variables.superglobals">超全局变量</link>。以下范例显示了超全局变量的用处：
    </simpara>

    <para>
     <example>
      <title>演示超全局变量和作用域的例子</title>
      <programlisting role="php">
<![CDATA[
<?php
function test_global()
{
    // 大多数的预定义变量并不 "super"，它们需要用 'global' 关键字来使它们在函数的本地区域中有效。
    global $HTTP_POST_VARS;

    echo $HTTP_POST_VARS['name'];

    // Superglobals 在任何范围内都有效，它们并不需要 'global' 声明。Superglobals 是在 PHP 4.1.0 引入的。
    echo $_POST['name'];
}
?>
]]>
      </programlisting>
     </example>
    </para>
   </sect2>

   <sect2 xml:id="language.variables.scope.static">
    <title>使用静态变量</title>

    <simpara>
     变量范围的另一个重要特性是<emphasis>静态变量</emphasis>（static
     variable）。静态变量仅在局部函数域中存在，但当程序执行离开此作用域时，其值并不丢失。看看下面的例子：
    </simpara>

    <para>
     <example>
      <title>演示需要静态变量的例子</title>
      <programlisting role="php">
<![CDATA[
<?php
function Test()
{
    $a = 0;
    echo $a;
    $a++;
}
?>
]]>
      </programlisting>
     </example>
    </para>

    <simpara>
     本函数没什么用处，因为每次调用时都会将
     <varname>$a</varname> 的值设为 <literal>0</literal> 并输出
     &quot;0&quot;。将变量加一的 <varname>$a</varname>++
     没有作用，因为一旦退出本函数则变量
     <varname>$a</varname> 就不存在了。要写一个不会丢失本次计数值的计数函数，要将变量
     <varname>$a</varname> 定义为静态的：
    </simpara>

    <para>
     <example>
      <title>使用静态变量的例子</title>
      <programlisting role="php">
<![CDATA[
<?php
function Test()
{
    static $a = 0;
    echo $a;
    $a++;
}
?>
]]>
      </programlisting>
     </example>
    </para>

    <simpara>
     现在，每次调用 Test() 函数都会输出
     <varname>$a</varname> 的值并加一。
    </simpara>

    <simpara>
     静态变量也提供了一种处理递归函数的方法。递归函数是一种调用自己的函数。写递归函数时要小心，因为可能会无穷递归下去。必须确保有充分的方法来中止递归。一下这个简单的函数递归计数到
     10，使用静态变量
     <varname>$count</varname> 来判断何时停止：
    </simpara>

    <para>
     <example>
      <title>静态变量与递归函数</title>
      <programlisting role="php">
<![CDATA[
<?php
function Test()
{
    static $count = 0;

    $count++;
    echo $count;
    if ($count < 10) {
        Test();
    }
    $count--;
}
?>
]]>
      </programlisting>
     </example>
    </para>

    <note>
     <para>
      静态变量可以按照上面的例子声明。如果在声明中用表达式的结果对其赋值会导致解析错误。
     </para>
     <para>
      <example>
       <title>声明静态变量</title>
       <programlisting role="php">
<![CDATA[
<?php
function foo(){
    static $int = 0;          // correct
    static $int = 1+2;        // wrong  (as it is an expression)
    static $int = sqrt(121);  // wrong  (as it is an expression too)

    $int++;
    echo $int;
}
?>
]]>
       </programlisting>
      </example>
     </para>
    </note>
   </sect2>

   <sect2 xml:id="language.variables.scope.references">
    <title>全局和静态变量的引用</title>
    <simpara>
     在 Zend 引擎 1 代，它驱动了 PHP4，对于变量的
     <link linkend="language.variables.scope.static">static</link> 和
     <link linkend="language.variables.scope.global">global</link>
     定义是以 <link linkend="language.references">references</link>
     的方式实现的。例如，在一个函数域内部用
     <literal>global</literal>
     语句导入的一个真正的全局变量实际上是建立了一个到全局变量的引用。这有可能导致预料之外的行为，如以下例子所演示的：
    </simpara>

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function test_global_ref() {
    global $obj;
    $obj = &new stdclass;
}

function test_global_noref() {
    global $obj;
    $obj = new stdclass;
}

test_global_ref();
var_dump($obj);
test_global_noref();
var_dump($obj);
?>
]]>
     </programlisting>
    </informalexample>

    <simpara>
     执行以上例子会导致如下输出：
    </simpara>

    <screen>
NULL
object(stdClass)(0) {
}
    </screen>

    <simpara>
     类似的行为也适用于
     <literal>static</literal> 语句。引用并不是静态地存储的：
    </simpara>

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function &get_instance_ref() {
    static $obj;

    echo 'Static object: ';
    var_dump($obj);
    if (!isset($obj)) {
        // 将一个引用赋值给静态变量
        $obj = &new stdclass;
    }
    $obj->property++;
    return $obj;
}

function &get_instance_noref() {
    static $obj;

    echo 'Static object: ';
    var_dump($obj);
    if (!isset($obj)) {
        // 将一个对象赋值给静态变量
        $obj = new stdclass;
    }
    $obj->property++;
    return $obj;
}

$obj1 = get_instance_ref();
$still_obj1 = get_instance_ref();
echo "\n";
$obj2 = get_instance_noref();
$still_obj2 = get_instance_noref();
?>
]]>
     </programlisting>
    </informalexample>

    <simpara>
     执行以上例子会导致如下输出：
    </simpara>

    <screen>
Static object: NULL
Static object: NULL

Static object: NULL
Static object: object(stdClass)(1) {
  ["property"]=>
  int(1)
}
    </screen>

    <simpara>
     上例演示了当把一个引用赋值给一个静态变量时，第二次调用
     <literal>&amp;get_instance_ref()</literal> 函数时其值并没有被<emphasis>记住</emphasis>。
    </simpara>
   </sect2>
  </sect1>

  <sect1 xml:id="language.variables.variable">
   <title>可变变量</title>

   <simpara>
     有时候使用可变变量名是很方便的。就是说，一个变量的变量名可以动态的设置和使用。一个普通的变量通过声明来设置，例如：
   </simpara>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$a = 'hello';
?>
]]>
    </programlisting>
   </informalexample>

   <simpara>
    一个可变变量获取了一个普通变量的值作为这个可变变量的变量名。在上面的例子中
    <emphasis>hello</emphasis> 使用了两个美元符号（$）以后，就可以作为一个可变变量的变量了。例如：
   </simpara>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$$a = 'world';
?>
]]>
    </programlisting>
   </informalexample>

   <simpara>
    这时，两个变量都被定义了：<varname>$a</varname> 的内容是“hello”并且
    <varname>$hello</varname> 的内容是“world”。因此，可以表述为：
   </simpara>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
echo "$a ${$a}";
?>
]]>
    </programlisting>
   </informalexample>

   <simpara>
    以下写法更准确并且会输出同样的结果：
   </simpara>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
echo "$a $hello";
?>
]]>
    </programlisting>
   </informalexample>

   <simpara>
     它们都会输出：<computeroutput>hello world</computeroutput>。
   </simpara>

   <simpara>
    要将可变变量用于数组，必须解决一个模棱两可的问题。这就是当写下
    <varname>$$a[1]</varname>
    时，解析器需要知道是想要
    <varname>$a[1]</varname>
    作为一个变量呢，还是想要
    <varname>$$a</varname>
    作为一个变量并取出该变量中索引为 [1]
    的值。解决此问题的语法是，对第一种情况用
    <varname>${$a[1]}</varname>，对第二种情况用
    <varname>${$a}[1]</varname>。
   </simpara>

   <warning>
    <simpara>
     注意，在 PHP 的函数和类的方法中，<link
     linkend="language.variables.superglobals">超全局变量</link>不能用作可变变量。
    </simpara>
   </warning>

  </sect1>

  <sect1 xml:id="language.variables.external">
   <title>来自 PHP 之外的变量</title>

   <sect2 xml:id="language.variables.external.form">
    <title>HTML 表单（GET 和 POST）</title>

    <simpara>
     当一个表单体交给 PHP
     脚本时，表单中的信息会自动在脚本中可用。有很多方法访问此信息，例如：
    </simpara>

    <para>
     <example>
      <title>一个简单的 HTML 表单</title>
      <programlisting role="html">
<![CDATA[
<form action="foo.php" method="POST">
    Name:  <input type="text" name="username"><br />
    Email: <input type="text" name="email"><br />
    <input type="submit" name="submit" value="Submit me!" />
</form>
]]>
      </programlisting>
     </example>
    </para>

    <para>
     根据特定的设置和个人的喜好，有很多种方法访问 HTML
     表单中的数据。例如：
    </para>

    <para>
     <example>
      <title>从一个简单的 POST HTML 表单访问数据</title>
      <programlisting role="html">
<![CDATA[
<?php
// 自 PHP 4.1.0 起可用
   echo $_POST['username'];
   echo $_REQUEST['username'];
   import_request_variables('p', 'p_');
   echo $p_username;
// 自 PHP 3 起可用。自 PHP 5.0.0 起，这些较长的预定义变量
// 可用 register_long_arrays 指令关闭。
   echo $HTTP_POST_VARS['username'];
// 如果 PHP 指令 register_globals = on 时可用。不过自
// PHP 4.2.0 起默认值为 register_globals = off。
// 不提倡使用/依赖此种方法。
   echo $username;
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     使用 GET 表单也类似，只不过要用适当的 GET 预定义变量。GET
     也适用于
     QUERY_STRING（URL 中在“?”之后的信息）。因此，举例说，<literal>http://www.example.com/test.php?id=3</literal>
     包含有可用 <varname>$_GET['id']</varname>
     访问的 GET 数据。参见
     <link linkend="reserved.variables.request">$_REQUEST</link> 和
     <function>import_request_variables</function>。
    </para>

    <note>
     <para>
      <link linkend="language.variables.superglobals">超全局变量</link>和
      <varname>$_POST</varname> 以及 <varname>$_GET</varname> 一样，自
      PHP 4.1.0 起可用。
     </para>
    </note>

    <para>
     如上所示，在 PHP 4.2.0 之前 <link
     linkend="ini.register-globals">register_globals</link>
     的默认值是
     <emphasis>on</emphasis>。在 PHP 3 中其值总是 on。PHP
     社区鼓励大家不要依赖此指令，建议在编码时假定其为
     <emphasis>off</emphasis>。
    </para>

    <note>
     <para>
      <link linkend="ini.magic-quotes-gpc">magic_quotes_gpc</link>
      配置指令影响到
      Get，Post 和 Cookie 的值。如果打开，值 (It's "PHP!") 会自动转换成
      (It\'s \"PHP!\")。数据库的插入就需要转义。参见
      <function>addslashes</function>，<function>stripslashes</function> 和
      <link linkend="ini.magic-quotes-sybase">magic_quotes_sybase</link>。
     </para>
    </note>

    <simpara>
     PHP 也懂得表单变量上下文中的数组（参见<link
     linkend="faq.html">相关常见问题</link>）。例如可以将相关的变量编成组，或者用此特性从多选输入框中取得值。例如，将一个表单 POST 给自己并在提交时显示数据：
    </simpara>

    <para>
     <example>
      <title>更复杂的表单变量</title>
      <programlisting role="php">
<![CDATA[
<?php
if (isset($_POST['action']) && $_POST['action'] == 'submitted') {
    echo '<pre>';

    print_r($_POST);
    echo '<a href="'. $_SERVER['PHP_SELF'] .'">Please try again</a>';

    echo '</pre>';
} else {
?>
<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
    Name:  <input type="text" name="personal[name]"><br />
    Email: <input type="text" name="personal[email]"><br />
    Beer: <br>
    <select multiple name="beer[]">
        <option value="warthog">Warthog</option>
        <option value="guinness">Guinness</option>
        <option value="stuttgarter">Stuttgarter Schwabenbr</option>
    </select><br />
    <input type="hidden" name="action" value="submitted" />
    <input type="submit" name="submit" value="submit me!" />
</form>
<?php
}
?>
]]>
      </programlisting>
     </example>
    </para>

    <para>
     在 PHP 3 中，变量使用中的数组仅限于一维数组。在
     PHP 4 中，没有此种限制。
    </para>

    <sect3 xml:id="language.variables.external.form.submit">
     <title>IMAGE SUBMIT 变量名</title>

     <simpara>
      当提交表单时，可以用一幅图像代替标准的提交按钮，用类似这样的标记：
     </simpara>

     <informalexample>
      <programlisting role="html">
<![CDATA[
<input type="image" src="image.gif" name="sub" />
]]>
      </programlisting>
     </informalexample>

     <simpara>
      当用户点击到图像中的某处时，相应的表单会被传送到服务器，并加上两个变量
      sub_x 和 sub_y。它们包含了用户点击图像的坐标。有经验的用户可能会注意到被浏览器发送的实际变量名包含的是一个点而不是下划线（即
      sub.x 和 sub.y），但 PHP 自动将点转换成了下划线。
     </simpara>
    </sect3>

   </sect2>

   <sect2 xml:id="language.variables.external.cookies">
    <title>HTTP Cookies</title>

    <simpara>
     PHP 透明地支持 <link
     xlink:href="&spec.cookies;">Netscape 规范</link>定义中的
     HTTP cookies。Cookies
     是一种在远端浏览器端存储数据并能追踪或识别再次访问的用户的机制。可以用
     <function>setcookie</function>
     函数设定 cookies。Cookies 是
     HTTP 信息头中的一部分，因此
     SetCookie 函数必须在向浏览器发送任何输出之前调用。对于
     <function>header</function> 函数也有同样的限制。Cookie
     数据会在相应的 cookie 数据数组中可用，例如
     <varname>$_COOKIE</varname>，<varname>$HTTP_COOKIE_VARS</varname> 和
     <varname>$_REQUEST</varname>。更多细节和例子见
     <function>setcookie</function> 手册页面。
    </simpara>

    <simpara>
     如果要将多个值赋给一个 cookie 变量，必须将其赋成数组。例如：
    </simpara>

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
  setcookie("MyCookie[foo]", 'Testing 1', time()+3600);
  setcookie("MyCookie[bar]", 'Testing 2', time()+3600);
?>
]]>
     </programlisting>
    </informalexample>

    <simpara>
     这将会建立两个单独的 cookie，尽管 MyCookie
     在脚本中是一个单一的数组。如果想在仅仅一个 cookie
     中设定多个值，考虑先在值上使用
     <function>serialize</function> 或
     <function>explode</function>。
    </simpara>

    <simpara>
     注意在浏览器中一个 cookie 会替换掉上一个同名的
     cookie，除非路径或者域不同。因此对于购物车程序可以保留一个计数器并一起传递，例如：
    </simpara>

    <example>
     <title>一个 <function>setcookie</function> 的示例</title>
     <programlisting role="php">
<![CDATA[
<?php
if (isset($_COOKIE['count'])) {
    $count = $_COOKIE['count'] + 1;
} else {
    $count = 1;
}
setcookie('count', $count, time()+3600);
setcookie("Cart[$count]", $item, time()+3600);
?>
]]>
     </programlisting>
    </example>

   </sect2>

   <sect2 xml:id="language.variables.external.dot-in-names">
    <title>变量名中的点</title>

    <para>
     通常，PHP 不会改变传递给脚本中的变量名。然而应该注意到点（句号）不是
     PHP 变量名中的合法字符。至于原因，看看：
     <programlisting role="php">
<![CDATA[
<?php
$varname.ext;  /* 非法变量名 */
?>
]]>
     </programlisting>
     这时，解析器看到是一个名为
     <varname>$varname</varname>
     的变量，后面跟着一个字符串连接运算符，后面跟着一个裸字符串（即没有加引号的字符串，且不匹配任何已知的健名或保留字）'ext'。很明显这不是想要的结果。
    </para>

    <para>
     出于此原因，要注意 PHP
     将会自动将变量名中的点替换成下划线。
    </para>

   </sect2>

   <sect2 xml:id="language.variables.determining-type-of">
    <title>确定变量类型</title>

    <para>
     因为 PHP 会判断变量类型并在需要时进行转换（通常情况下），因此在某一时刻给定的变量是何种类型并不明显。PHP
     包括几个函数可以判断变量的类型，例如：<function>gettype</function>，<function>is_array</function>，<function>is_float</function>，<function>is_int</function>，<function>is_object</function> 和
     <function>is_string</function>。参见<link
     linkend="language.types">类型</link>一章。
    </para>
   </sect2>

  </sect1>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
