<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.6 $ -->
<!-- $Author: dallas $ -->
<!-- EN-Revision: 1.7 Maintainer: dallas Status: ready -->
<refentry id="function.is-uploaded-file">
 <refnamediv>
  <refname>is_uploaded_file</refname>
  <refpurpose>判断文件是否是通过 HTTP POST 上传的</refpurpose>
 </refnamediv>
 <refsect1>
  <title>说明</title>
  <methodsynopsis>
   <type>bool</type><methodname>is_uploaded_file</methodname>
   <methodparam><type>string</type><parameter>filename</parameter></methodparam>
  </methodsynopsis>
  <para>
   如果 <parameter>filename</parameter> 所给出的文件是通过
   HTTP POST 上传的则返回 &true;。这可以用来确保恶意的用户无法欺骗脚本去访问本不能访问的文件，例如
   <filename>/etc/passwd</filename>。
  </para>
  <para>
   这种检查显得格外重要，如果上传的文件有可能会造成对用户或本系统的其他用户显示其内容的话。
  </para>
  <para>
   为了能使 <function>is_uploaded_file</function> 函数正常工作，必段指定类似于
   $_FILES['userfile']['tmp_name'] 的变量，而在从客户端上传的文件名
   $_FILES['userfile']['name'] 不能正常运作。
  </para>
  <example>
   <title><function>is_uploaded_file</function> 例子</title>
   <programlisting role="php">
<![CDATA[
<?php

if (is_uploaded_file($_FILES['userfile']['tmp_name'])) {
   echo "File ". $_FILES['userfile']['name'] ." uploaded successfully.\n";
   echo "Displaying contents\n";
   readfile($_FILES['userfile']['tmp_name']);
} else {
   echo "Possible file upload attack: ";
   echo "filename '". $_FILES['userfile']['tmp_name'] . "'.";
}

?>]]>
   </programlisting>
  </example>
  <para>
   <function>is_uploaded_file</function> 仅可用于
   PHP 3 的 3.0.16 版之后，以及 PHP 4 的 4.0.2
   版之后。如果执意要用老版本，可以用下面的函数来保护自己：
   <note>
    <para>
     以下例子<emphasis>不能</emphasis>用于
     PHP 4 的 4.0.2 版之后。它依赖的 PHP 内部函数在该版本之后改变了。
    </para>
   </note>
  </para>
   <example>
    <title><function>is_uploaded_file</function> 可运行于 PHP 4 &lt; 4.0.3 的例子</title>
     <programlisting role="php">
<![CDATA[
<?php
/* Userland test for uploaded file. */
function is_uploaded_file_4_0_2($filename)
{
    if (!$tmp_file = get_cfg_var('upload_tmp_dir')) {
        $tmp_file = dirname(tempnam('', ''));
    }
    $tmp_file .= '/' . basename($filename);
    /* User might have trailing slash in php.ini... */
    return (ereg_replace('/+', '/', $tmp_file) == $filename);
}

/* This is how to use it, since you also don't have
 * move_uploaded_file() in these older versions: */
if (is_uploaded_file_4_0_2($HTTP_POST_FILES['userfile'])) {
    copy($HTTP_POST_FILES['userfile'], "/place/to/put/uploaded/file");
} else {
    echo "Possible file upload attack: filename '$HTTP_POST_FILES[userfile]'.";
}
?>
]]>
   </programlisting>
  </example>
  <para>
   参见 <function>move_uploaded_file</function>，以及<link
   linkend="features.file-upload">文件上传处理</link>一章中的简单使用例子。
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
