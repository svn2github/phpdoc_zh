<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.1 $ -->
<!-- $Author: dallas $ -->
<!-- EN-Revision: 1.7 Maintainer: dallas Status: ready -->
  <refentry id="function.preg-match-all">
   <refnamediv>
    <refname>preg_match_all</refname>
    <refpurpose>进行全局正则表达式匹配</refpurpose>
   </refnamediv>
   <refsect1>
    <title>说明</title>
    <methodsynopsis>
     <type>int</type><methodname>preg_match_all</methodname>
     <methodparam><type>string</type><parameter>pattern</parameter></methodparam>
     <methodparam><type>string</type><parameter>subject</parameter></methodparam>
     <methodparam><type>array</type><parameter>matches</parameter></methodparam>
     <methodparam choice="opt"><type>int</type><parameter>flags</parameter></methodparam>
    </methodsynopsis>
    <para>
     在 <parameter>subject</parameter> 中搜索所有与
     <parameter>pattern</parameter> 给出的正则表达式匹配的内容并将结果以
     <parameter>flags</parameter> 指定的顺序放到
     <parameter>matches</parameter> 中。
    </para>
    <para>
     搜索到第一个匹配项之后，接下来的搜索从上一个匹配项末尾开始。
    </para>
    <para>
     <parameter>flags</parameter> 可以是下列标记的组合（注意把
     <constant>PREG_PATTERN_ORDER</constant> 和
     <constant>PREG_SET_ORDER</constant> 合起来用没有意义）：
     <variablelist>
      <varlistentry>
       <term>PREG_PATTERN_ORDER</term>
       <listitem>
        <para>
         对结果排序使 $matches[0] 为全部模式匹配的数组，$matches[1]
         为第一个括号中的子模式所匹配的字符串组成的数组，以此类推。
        </para>
        <para>
         <informalexample>
          <programlisting role="php">
<![CDATA[
<?php
preg_match_all ("|<[^>]+>(.*)</[^>]+>|U",
    "<b>example: </b><div align=left>this is a test</div>",
    $out, PREG_PATTERN_ORDER);
print $out[0][0].", ".$out[0][1]."\n";
print $out[1][0].", ".$out[1][1]."\n";
?>
]]>
          </programlisting>
          <para>
           本例将输出：
          </para>
          <screen role="html">
<![CDATA[
<b>example: </b>, <div align=left>this is a test</div>
example: , this is a test
]]>
          </screen>
          <para>
           因此，$out[0] 包含匹配整个模式的字符串，$out[1]
           包含一对 HTML 标记之间的字符串。
          </para>
         </informalexample>
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>PREG_SET_ORDER</term>
       <listitem>
        <para>
         对结果排序使 $matches[0] 为第一组匹配项的数组，$matches[1]
         为第二组匹配项的数组，以此类推。
         <informalexample>
          <programlisting role="php">
<![CDATA[
<?php
preg_match_all ("|<[^>]+>(.*)</[^>]+>|U",
    "<b>example: </b><div align=left>this is a test</div>",
    $out, PREG_SET_ORDER);
print $out[0][0].", ".$out[0][1]."\n";
print $out[1][0].", ".$out[1][1]."\n";
?>
]]>
          </programlisting>
          <para>
           本例将输出：
          </para>
          <screen role="html">
<![CDATA[
<b>example: </b>, example:
<div align=left>this is a test</div>, this is a test
]]>
          </screen>
         </informalexample>
        </para>
        <para>
         本例中，$matches[0] 是第一组匹配结果，$matches[0][0]
         包含匹配整个模式的文本，$matches[0][1]
         包含匹配第一个子模式的文本，以此类推。同样，$matches[1]
         是第二组匹配结果，等等。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>PREG_OFFSET_CAPTURE</term>
       <listitem>
        <para>
         如果设定本标记，对每个出现的匹配结果也同时返回其附属的字符串偏移量。注意这改变了返回的数组的值，使其中的每个单元也是一个数组，其中第一项为匹配字符串，第二项为其在
         <parameter>subject</parameter> 中的偏移量。本标记自
         <literal>PHP 4.3.0</literal> 起可用。
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
     如果没有给出标记，则假定为 <constant>PREG_PATTERN_ORDER</constant>。
    </para>
    <para>
     返回整个模式匹配的次数（可能为零），如果出错返回 &false;。
    </para>
    <para>
     <example>
      <title>从某文本中取得所有的电话号码</title>
      <programlisting role="php">
<![CDATA[
<?php
preg_match_all ("/\(?  (\d{3})?  \)?  (?(1)  [\-\s] ) \d{3}-\d{4}/x",
                "Call 555-1212 or 1-800-555-1212", $phones);
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>搜索匹配的 HTML 标记（greedy）</title>
      <programlisting role="php">
<![CDATA[
<?php
// \\2 是一个逆向引用的例子，其在 PCRE 中的含义是
// 必须匹配正则表达式本身中第二组括号内的内容，本例中
// 就是 ([\w]+)。因为字符串在双引号中，所以需要
// 多加一个反斜线。
$html = "<b>bold text</b><a href=howdy.html>click me</a>";

preg_match_all ("/(<([\w]+)[^>]*>)(.*)(<\/\\2>)/", $html, $matches);

for ($i=0; $i< count($matches[0]); $i++) {
  echo "matched: ".$matches[0][$i]."\n";
  echo "part 1: ".$matches[1][$i]."\n";
  echo "part 2: ".$matches[3][$i]."\n";
  echo "part 3: ".$matches[4][$i]."\n\n";
}
?>
]]>
      </programlisting>
      <para>
       本例将输出：
      </para>
      <screen role="html">
<![CDATA[
matched: <b>bold text</b>
part 1: <b>
part 2: bold text
part 3: </b>

matched: <a href=howdy.html>click me</a>
part 1: <a href=howdy.html>
part 2: click me
part 3: </a>
]]>
      </screen>
     </example>
    </para>
    <simpara>
     参见 <function>preg_match</function>，<function>preg_replace</function>
     和 <function>preg_split</function>。
    </simpara>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
