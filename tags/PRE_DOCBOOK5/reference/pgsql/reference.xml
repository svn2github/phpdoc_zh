<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.13 $ -->
<!-- $Author: dallas $ -->
<!-- EN-Revision: 1.29 Maintainer: dallas Status: ready -->
<!-- Purpose: database.vendors -->
<!-- Membership: bundled, external -->

<reference id="ref.pgsql">
 <title>PostgreSQL 数据库函数</title>
 <titleabbrev>PostgreSQL</titleabbrev>

 <partintro>
  <section id="pgsql.intro">
   &reftitle.intro;
   <para>
    PostgreSQL 是一个开放源码的免费数据库系统。Postgres
    最初由加州大学伯克利分校计算机科学系开发，倡导了很多关系对象的观念，这些观念现在已经用在一些商业数据库系统中。它提供了
    SQL92/SQL99 语言支持，事务处理，引用集成，存储过程以及类型扩展。PostgreSQL 则是
    Postgres 的一个开放源代码的后代。
   </para>
  </section>

  <section id="pgsql.requirements">
   &reftitle.required;
   <para>
    要使用 PostgreSQL 支持，需要 PostgreSQL 6.5 或更新版本，PostgreSQL 8.0
    或更新版本来使用所有的 PostgreSQL 模块。PostgreSQL
    支持多种字符编码包括多字节字符编码。关于 PostgreSQL
    的当前版本以及更多信息见 <ulink url="&url.pgsql;">&url.pgsql;</ulink>
    以及 <ulink url="&url.pgsql.manual;">PostgreSQL 文档</ulink>。
   </para>
  </section>

  &reference.pgsql.configure;
  &reference.pgsql.ini;

  <section id="pgsql.resources">
  &reftitle.resources;
   <para>
    PostgreSQL 模块使用了两种资源类型。第一种是数据库连接的标识符，第二种是保存查询结果的资源。
   </para>
  </section>

  &reference.pgsql.constants;

  <section id="pgsql.notes">
  &reftitle.notes;
   <note>
    <para>
     不是所有的版本都支持所有的函数，这和
     libpq（PostgreSQL C 客户端库）的版本和编译方法有关。如果 PHP
     的 PostgreSQL 扩展不见了，那是因为 libpq 的版本不支持它。
    </para>
   </note>
   <note>
    <para>
     大多数 PostgreSQL 函数接受 <parameter>connection</parameter>
     作为第一个可选参数。如果没有提供，则使用上一个打开的连接。如果没有打开的连接，函数返回 &false;。
    </para>
   </note>
   <note>
    <para>
     PostgreSQL 在创建对象和查询时自动将所有标识符（例如表／列名）转成小写字母值。要强制其使用混合或大写字母的标识符，必须将标识符用双引号（"）转义。
    </para>
   </note>
   <note>
    <para>
     PostgreSQL 没有特殊的命令来取得数据库的结构信息（例如当前数据库中的所有表）。不过在
     PostgreSQL 7.4 及以上版本有一个标准结构名叫
     <literal>information_schema</literal>，它包含有系统视图以及所有必要的信息，可以很容易地查询出来。其细节见
     <ulink url="&url.pgsql.manual;">PostgreSQL 文档</ulink>。
    </para>
   </note>
  </section>

  <section id="pgsql.examples">
   &reftitle.examples;
   <para>
    此简单例子演示了 PostgreSQL 数据库的连接，执行查询，显示结果以及断开连接。
    <example>
     <title>PostgreSQL 例子</title>
     <programlisting role="php">
<![CDATA[
<?php
// 连接，选择数据库
$dbconn = pg_connect("host=localhost dbname=publishing user=www password=foo")
    or die('Could not connect: ' . pg_last_error());

// 执行 SQL 查询
$query = 'SELECT * FROM authors';
$result = pg_query($query) or die('Query failed: ' . pg_last_error());

// 用 HTML 显示结果
echo "<table>\n";
while ($line = pg_fetch_array($result, null, PGSQL_ASSOC)) {
    echo "\t<tr>\n";
    foreach ($line as $col_value) {
        echo "\t\t<td>$col_value</td>\n";
    }
    echo "\t</tr>\n";
}
echo "</table>\n";

// 释放结果集
pg_free_result($result);

// 关闭连接
pg_close($dbconn);
?>
]]>
     </programlisting>
    </example>
   </para>
  </section>
 </partintro>

 &reference.pgsql.functions;

</reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
