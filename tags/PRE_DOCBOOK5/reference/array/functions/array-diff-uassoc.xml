<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.2 $ -->
<!-- $Author: dallas $ -->
<!-- EN-Revision: 1.7 Maintainer: dallas Status: ready -->
<refentry id="function.array-diff-uassoc">
 <refnamediv>
  <refname>array_diff_uassoc</refname>
  <refpurpose>用用户提供的回调函数做索引检查来计算数组的差集</refpurpose>
 </refnamediv>
 <refsect1>
  <title>说明</title>
  <methodsynopsis>
   <type>array</type><methodname>array_diff_uassoc</methodname>
   <methodparam><type>array</type><parameter>array1</parameter></methodparam>
   <methodparam><type>array</type><parameter>array2</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>...</parameter></methodparam>
   <methodparam><type>callback</type><parameter>key_compare_func</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>array_diff_uassoc</function> 返回一个数组，该数组包括了所有在
   <parameter>array1</parameter> 中但是不在任何其它参数数组中的值。注意和
   <function>array_diff</function> 不同的是键名也用于比较。
  </para>
  <para>
   此比较是通过用户提供的回调函数来进行的。如果认为第一个参数小于，等于，或大于第二个参数时必须分别返回一个小于零，等于零，或大于零的整数。这和
   <function>array_diff_assoc</function>
   不同的是还使用了比较索引的内部函数。
  </para>
  <para>
   <example>
    <title><function>array_diff_uassoc</function> 例子</title>
    <programlisting role="php">
<![CDATA[
<?php
function key_compare_func($a, $b)
{
    if ($a === $b) {
        return 0;
    }
    return ($a > $b)? 1:-1;
}

$array1 = array("a" => "green", "b" => "brown", "c" => "blue", "red");
$array2 = array("a" => "green", "yellow", "red");
$result = array_diff_uassoc($array1, $array2, "key_compare_func");
print_r($result);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [b] => brown
    [c] => blue
    [0] => red
)
]]>
    </screen>
   </example>
  </para>
  <simpara>
   上面的例子中 <literal>"a" =&gt; "green"</literal>
   出现在两个数组中因此不在函数的输出中。但是
   <literal>0 =&gt; "red"</literal> 却在输出中，因为第二个参数中的
   <literal>"red"</literal> 的键名是 <literal>1</literal>。
  </simpara>
  <simpara>
   两个索引是否相同是由用户提供的回调函数来检查的。
  </simpara>
  <note>
   <simpara>
    注意本函数只检查了多维数组中的一维。当然可以用
    <literal>array_diff_uassoc($array1[0], $array2[0], "key_compare_func");</literal>
    检查更深的维度。
   </simpara>
  </note>
  <para>
   参见
   <function>array_diff</function>，<function>array_diff_assoc</function>，<function>array_udiff</function>，<function>array_udiff_assoc</function>，<function>array_udiff_uassoc</function>，<function>array_intersect</function>，<function>array_intersect_assoc</function>，<function>array_uintersect</function>，<function>array_uintersect_assoc</function>
   和
   <function>array_uintersect_uassoc</function>。
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
