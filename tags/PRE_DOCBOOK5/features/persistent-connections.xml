<?xml version="1.0" encoding="gb2312"?>
<!-- $Revision: 1.9 $ -->
<!-- $Author: dallas $ -->
<!-- EN-Revision: 1.24 Maintainer: Gregory Status: ready -->
<chapter id="features.persistent-connections">
 <title>数据库永久连接</title>

 <simpara>
  永久的数据库连接是指在脚本结束运行时不关闭的连接。当收到一个永久连接的请求时。PHP
  将检查是否已经存在一个（前面已经开启的）相同的永久连接。如果存在，将直接使用这个连接；如果不存在，则建立一个新的连接。所谓“相同”的连接是指用相同的用户名和密码到相同主机的连接。
 </simpara>
 <simpara>
  对 web 服务器的工作和分布负载没有完全理解的读者可能会错误地理解永久连接的作用。特别的，永久连接<emphasis>不会</emphasis>在相同的连接上提供建立“用户会话”的能力，也不提供有效建立事务的能力。实际上，从严格意义上来讲，永久连接不会提供<emphasis>任何</emphasis>非永久连接无法提供的特殊功能。
 </simpara>
 <simpara>
  为什么？
 </simpara>
 <simpara>
  这和 web 服务器工作的方式有关。web 服务器可以用三种方法来利用 PHP 生成 web 页面。
 </simpara>
 <simpara>
  第一种方法是将 PHP 用作一个“外壳”。以这种方法运行，PHP
  会为向 web 服务器提出的每个 PHP 页面请求生成并结束一个 PHP
  解释器线程。由于该线程会随每个请求的结束而结束，因此任何在这个线程中利用的任何资源（例如指向
  SQL 数据库服务器的连接）都会随线程的结束而关闭。在这种情况下，使用永久连接不会获得任何地改变――因为它们根本不是永久的。
 </simpara>
 <simpara>
  第二，也是最常用的方法，是把 PHP 用作多进程 web
  服务器的一个模块，这种方法目前只适用于
  Apache。对于一个多进程的服务器，其典型特征是有一个父进程和一组子进程协调运行，其中实际生成
  web 页面的是子进程。每当客户端向父进程提出请求时，该请求会被传递给还没有被其它的客户端请求占用的子进程。这也就是说当相同的客户端第二次向服务端提出请求时，它将有可能被一个不同的子进程来处理。在开启了一个永久连接后，所有请求
  SQL 服务的后继页面都能够重新使用这个已经建立的 SQL Server 连接。
 </simpara>
 <simpara>
  最后一种方法是将 PHP 用作多线程 web 服务器的一个插件。目前 PHP 4
  已经支持 ISAPI、WSAPI 和 NSAPI（在 Windows 环境下），这些使得
  PHP 可以被用作诸如 Netscape FastTrack (iPlanet)、Microsoft's Internet Information
  Server (IIS) 和 O'Reilly's WebSite Pro 等多线程 web
  服务器的插件。永久连接的行为和前面所描述的多过程模型在本质上是相同的。注意
  PHP 3 不支持 SAPI。
 </simpara>
 <simpara>
  如果永久连接并没有任何附加的功能，那么使用它有什么好处？
 </simpara>
 <simpara>
  答案非常简单――效率。当客户端对 SQL
  服务器的连接请求非常频繁时，永久连接将更加高效。连接请求频繁的标准取决于很多因素。例如，数据库的种类，数据库服务和
  web 服务是否在同一台服务器上，SQL 服务器如何加载负载等。但我们至少知道，当连接请求很频繁时，永久连接将显著的提高效率。它使得每个子进程在其生命周期中只做一次连接操作，而非每次在处理一个页面时都要向
  SQL 服务器提出连接请求。这也就是说，每个子进程将对服务器建立各自独立的永久连接。例如，如果有
  20 个不同的子进程运行某脚本建立了永久的 SQL 服务器永久连接，那么实际上向该
  SQL 服务器建立了 20 个不同的永久连接，每个进程占有一个。
 </simpara>
 <simpara>
  注意，如果永久连接的子进程数目超过了设定的数据库连接数限制，系统将会产生一些缺陷。如果数据库的同时连接数限制为
  16，而在繁忙会话的情况下，有 17
  个线程试图连接，那么有一个线程将无法连接。如果这个时候，在脚本中出现了使得连接无法关闭的错误（例如无限循环），则该数据库的
  16 个连接将迅速地受到影响。请查阅使用的数据库的文档，以获取关于如何处理已放弃的及闲置的连接的方法。
 </simpara>
 <warning>
  <simpara>
   在使用永久连接时还有一些特别的问题需要注意。例如在永久连接中使用数据表锁时，如果脚本不管什么原因无法释放该数据表锁，其随后使用相同连接的脚本将会被永久的阻塞，使得需要重新启动
   httpd 服务或者数据库服务。另外，在使用事务处理时，如果脚本在事务阻塞产生前结束，则该阻塞也会影响到使用相同连接的下一个脚本。不管在什么情况下，都可以通过使用
   <function>register_shutdown_function</function> 函数来注册一个简单的清理函数来打开数据表锁，或者回滚事务。或者更好的处理方法，是不在使用数据表锁或者事务处理的脚本中使用永久连接，这可以从根本上解决这个问题（当然还可以在其它地方使用永久连接）。
  </simpara>
 </warning>
 <simpara>
  以下是一点重要的总结。永久连接是为通常连接建立一对一的分布而设计的。这意味着必须能够保证在将永久连接替换为非永久连接时，脚本的行为不会改变。使用永久连接将（非常）有可能改变脚本的效率，但不改变其行为！
 </simpara>
 <para>
  参见 <function>fbsql_pconnect</function>，<function>ibase_pconnect</function>，<function>ifx_pconnect</function>，<function>ingres_pconnect</function>，<function>msql_pconnect</function>，<function>mssql_pconnect</function>，<function>mysql_pconnect</function>，<function>ociplogon</function>，<function>odbc_pconnect</function>，<function>ora_plogon</function>，<function>pfsockopen</function>，<function>pg_pconnect</function>
  和 <function>sybase_pconnect</function>。
 </para>

</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
